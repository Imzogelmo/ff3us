hirom
incsrc tracelog-plus-disasm.asm
org $C26800


; Cinematic Loader (C2/6800 - C2/686B)
C26800:  JMP C26813     ; If we have to have this here, why is it not a BRA?

C26803:  JMP C2680C     ; Or this one?

C26806:  JMP C2681A     ; Or this one?

C26809:  JMP C26821     ; Or this one?

; These four function decompress, and then run, the code for showing a special cutscene, one that requires its own event code and doesn't show maps or sprites

; This is for showing the world gets torn asunder.
C2680C:  JSR C26828
C2680F:  JML $7E5000

; This is for the intro cutscene of the three Magitek soldiers approaching Narshe with the opening credits.
C26813:  JSR C26828
C26816:  JML $7E5003

; This is for the Floating Continent rising into the sky.
C2681A:  JSR C26828
C2681D:  JML $7E5006

; This is for the title screen.
C26821:  JSR C26828
C26824:  JML $7E5009

C26828:  PHP
C26829:  REP #$30       ; 16-bit A, X, Y
C2682B:  PHA
C2682C:  PHX
C2682D:  PHY
C2682E:  PHB
C2682F:  PHD
C26830:  REP #$10       ; Um, X and Y are already 16-bit...
C26832:  SEP #$20       ; 8-bit A
C26834:  LDA #$00
C26836:  PHA
C26837:  PLB            ; Data bank register now points to bank $00
C26838:  LDX #$0000     ; 0
C2683B:  PHX
C2683C:  PLD            ; Direct page register now points to bank $00, page $00
C2683D:  LDX #$0000     ; X = 0 already...
C26840:  STX $00
C26842:  LDA #$7E       ; 126
C26844:  STA $2183
C26847:  LDY #$686C     ; 26,732
C2684A:  STY $F3
C2684C:  LDA #$C2       ; -62
C2684E:  STA $F5
C26850:  LDY #$5000     ; 20,480
C26853:  STY $F6
C26855:  LDA #$7E       ; 126
C26857:  STA $F8
C26859:  PHB
C2685A:  LDA #$7E       ; A = #$7E already...
C2685C:  PHA
C2685D:  PLB            ; Data bank register now points to bank $7E
C2685E:  JSL C2FF6D     ; Decompression function
C26862:  PLB
C26863:  REP #$30
C26865:  PLD
C26866:  PLB
C26867:  PLY
C26868:  PLX
C26869:  PLA
C2686A:  PLP
C2686B:  RTS

;*****************************************************************************************
; Title, Intro, Floating Island, & World Cinematic Program (compressed)(C2/686C - C2/8A6F)
;*****************************************************************************************

C2686C:  dw $21F4    	; Length of data block (8692 bytes)
C2686F:  db $FF : db $4C,$0C,$50,$4C,$F3,$57,$4C,$C4 ; Control byte, then 8-byte data block
         db $FF : db $69,$4C,$F2,$6C,$08,$C2,$30,$48
         db $FF : db $DA,$5A,$8B,$0B,$20,$2F,$50,$20
         db $FF : db $7F,$50,$20,$F7,$50,$20,$A8,$50
         db $FF : db $20,$43,$50,$20,$4E,$50,$C2,$30
         db $FF : db $2B,$AB,$7A,$FA,$68,$28,$6B,$E2
         db $FF : db $20,$A9,$7E,$48,$AB,$A2,$00,$00
         db $FB : db $DA,$2B,$13,$00,$86,$00,$20,$62
         db $50 : db $FF,$60,$A9,$F0,$8F,$00,$13,$00
         db $22 : db $FF,$04,$00,$C5,$60,$A9,$8F,$8F
         db $00 : db $FF,$21,$00,$7B,$8F,$00,$42,$00
         db $8F : db $FD,$0B,$35,$00,$0C,$42,$00,$60
         db $A9 : db $5C,$FF,$8D,$00,$15,$8D,$04,$15
         db $A2 : db $33,$FF,$72,$8E,$01,$15,$A2,$64
         db $72 : db $8E,$FF,$05,$15,$A9,$7E,$8D,$03
         db $15 : db $8D,$FF,$07,$15,$60,$20,$11,$77
         db $7B : db $20,$FF,$93,$50,$20,$15,$78,$20
         db $4F : db $78,$FF,$20,$85,$74,$20,$FA,$78
         db $60 : db $8F,$DF,$02,$13,$00,$A9,$10,$23
         db $08 : db $A9,$02,$FB,$8F,$01,$25,$20,$7B
         db $A5 : db $19,$30,$18,$FF,$0A,$AA,$FC,$DF
         db $50 : db $A5,$06,$89,$FF,$80,$D0,$08,$20
         db $0F : db $75,$20,$FD,$FF,$71,$80,$E8,$A9
         db $FF : db $8D,$00,$02,$FF,$A0,$0F,$00,$84
         db $15 : db $A9,$00,$A0,$FF,$A0,$55,$20,$DC
         db $74 : db $A4,$15,$F0,$FE,$95,$28,$F4,$60
         db $AE : db $51,$80,$52,$97,$FF,$52,$A6,$52
         db $E0 : db $52,$EC,$52,$3F,$FF,$53,$77,$53
         db $8A : db $53,$9C,$53,$B5,$D7,$53,$BC,$53
         db $86 : db $08,$0D,$8B,$00,$31,$51,$FA,$96
         db $20 : db $EE,$A3,$B0,$7B,$A8,$85,$19,$84
         db $F7 : db $25,$84,$27,$6A,$08,$4E,$50,$60
         db $55 : db $FF,$51,$A5,$51,$00,$00,$63,$10
         db $BD : db $DF,$77,$00,$00,$FF,$7F,$1B,$99
         db $20 : db $06,$FF,$53,$A2,$00,$30,$A0,$65
         db $74 : db $20,$AF,$24,$73,$A2,$20,$38,$31
         db $31 : db $42,$39,$43,$BF,$7B,$A9,$01,$20
         db $3A : db $73,$36,$09,$45,$D9,$74,$57,$19
         db $40 : db $01,$35,$51,$57,$11,$A0,$00,$FF
         db $01 : db $84,$25,$A0,$2C,$01,$84,$15,$FF
         db $E6 : db $19,$A9,$0F,$85,$32,$60,$A4,$FF
         db $15 : db $D0,$04,$A9,$FF,$85,$19,$60,$16
         db $48 : db $09,$63,$7B,$3C,$09,$40,$53,$09
         db $3C : db $09,$37,$49,$55,$C3,$91,$11,$C0
         db $38 : db $29,$40,$38,$29,$60,$38,$29,$E5
         db $E0 : db $38,$29,$A0,$38,$29,$B1,$01,$03
         db $7C : db $A9,$09,$04,$59,$09,$BA,$01,$23
         db $E2 : db $21,$C3,$01,$EC,$29,$CC,$01,$D9
         db $43 : db $E2,$21,$D5,$01,$E3,$7B,$E3,$11
         db $A9 : db $01,$1B,$A0,$39,$AC,$08,$A0,$3C
         db $A5 : db $00,$7C,$19,$14,$02,$FD,$C8,$AC
         db $08 : db $C2,$20,$A9,$40,$30,$9D,$53,$01
         db $37 : db $0D,$00,$28,$3A,$60,$33,$72,$C0
         db $33 : db $1A,$7E,$82,$09,$12,$E6,$19,$A0
         db $43 : db $04,$A6,$00,$97,$FF,$8F,$05,$73
         db $00 : db $FF,$61,$00,$82,$09,$0A,$9F,$20
         db $97 : db $78,$A0,$1E,$1E,$12,$82,$09,$35
         db $66 : db $A8,$00,$C5,$53,$AD,$00,$A8,$00
         db $31 : db $54,$8D,$1A,$79,$AF,$94,$0A,$36
         db $09 : db $83,$7B,$A9,$02,$64,$21,$4D,$A3
         db $56 : db $19,$A0,$4A,$79,$11,$82,$09,$07
         db $62 : db $02,$F1,$F0,$A5,$00,$82,$09,$7B
         db $01 : db $A0,$C0,$03,$84,$D1,$15,$33,$09
         db $52 : db $19,$E4,$09,$60,$A8,$00,$DB,$76
         db $BE : db $2C,$1A,$5C,$7A,$9D,$00,$35,$0D
         db $00 : db $40,$FF,$9D,$01,$33,$A9,$A0,$9D
         db $01 : db $34,$4A,$E4,$42,$5F,$F0,$22,$90
         db $F8 : db $2A,$82,$09,$33,$62,$02,$0E,$73
         db $01 : db $15,$A2,$00,$8E,$09,$A6,$22,$2A
         db $13 : db $E4,$11,$C4,$37,$01,$2C,$03,$08
         db $64 : db $21,$42,$23,$82,$09,$0E,$A9,$EB
         db $40 : db $04,$20,$0B,$01,$A5,$00,$20,$BD
         db $5C : db $FE,$82,$09,$0D,$E6,$19,$64,$31
         db $A9 : db $80,$CF,$85,$33,$A0,$A0,$D2,$02
         db $82 : db $09,$08,$A0,$FD,$E0,$B8,$1A,$A5
         db $18 : db $29,$03,$D0,$06,$2F,$C2,$20,$E6
         db $27 : db $5B,$1A,$02,$81,$02,$87,$09,$FD
         db $7B : db $A0,$00,$60,$AA,$7C,$C9,$53,$CD
         db $FF : db $53,$D5,$53,$A6,$1D,$FE,$00,$3A
         db $FF : db $9E,$01,$37,$A5,$33,$30,$56,$A6
         db $FF : db $1D,$7B,$A8,$9E,$01,$38,$A6,$1D
         db $FF : db $BD,$01,$37,$18,$7D,$01,$38,$20
         db $FF : db $A5,$54,$48,$AF,$12,$42,$00,$29
         db $7F : db $40,$F0,$F8,$A9,$08,$8F,$1B,$30
         db $08 : db $BE,$D6,$03,$68,$8F,$1C,$21,$00
         db $DF : db $0B,$A6,$FF,$1D,$C2,$20,$AF,$35
         db $21 : db $00,$99,$EF,$80,$41,$E2,$20,$BE
         db $0B : db $38,$18,$69,$DF,$04,$9D,$01,$38
         db $C8 : db $FF,$03,$C0,$C0,$FF,$00,$D0,$B6
         db $FE : db $01,$37,$38,$60,$FD,$18,$A2,$03
         db $35 : db $54,$39,$54,$41,$54,$D6,$AB,$1B
         db $00 : db $39,$B3,$03,$5B,$B7,$0B,$A9,$10
         db $F4 : db $FC,$03,$BE,$9B,$0A,$D5,$C3,$00
         db $45 : db $99,$02,$F5,$45,$F2,$93,$B3,$08
         db $24 : db $18,$69,$40,$EB,$FF,$A5,$00,$EB
         db $AA : db $BF,$6D,$FE,$C2,$BE,$A2,$03,$B3
         db $54 : db $B7,$54,$C1,$16,$1C,$A9,$FB,$01
         db $9D : db $1D,$04,$18,$29,$01,$F0,$0F,$DE
         db $BE : db $03,$00,$39,$C9,$40,$B2,$00,$DA
         db $54 : db $F7,$FE,$00,$39,$0B,$0C,$A9,$40
         db $8F : db $05,$DD,$42,$31,$00,$04,$42,$00
         db $A7 : db $04,$8F,$06,$F7,$42,$00,$EA,$CA
         db $0C : db $64,$F2,$A0,$FC,$FF,$00,$64,$E2
         db $64 : db $E9,$64,$EA,$AF,$7F,$15,$42,$00
         db $85 : db $E8,$AF,$14,$DC,$04,$FD,$E7,$A7
         db $04 : db $C5,$E2,$90,$02,$80,$07,$FE,$2F
         db $02 : db $00,$01,$80,$0C,$7B,$A5,$EA,$FF
         db $38 : db $E5,$E2,$C2,$20,$49,$FF,$FF,$FF
         db $1A : db $99,$FA,$3D,$A5,$E7,$18,$65,$FF
         db $E9 : db $85,$E9,$E2,$20,$E6,$E2,$88,$F6
         db $10 : db $05,$D0,$D0,$A2,$03,$3D,$55,$41
         db $55 : db $FF,$59,$55,$A0,$FF,$FF,$84,$10
         db $A0 : db $FF,$40,$00,$84,$0E,$A9,$7F,$85
         db $14 : db $F2,$5F,$0B,$27,$AB,$13,$86,$13
         db $36 : db $C2,$20,$A5,$FF,$27,$C9,$1F,$01
         db $F0 : db $2F,$C9,$00,$FF,$01,$B0,$24,$29
         db $07 : db $00,$D0,$1F,$FF,$A5,$27,$38,$E9
         db $08 : db $00,$29,$F8,$FF,$FF,$0A,$0A,$0A
         db $18 : db $69,$C0,$23,$DB,$85,$12,$50,$45
         db $85 : db $10,$8E,$0B,$38,$60,$F3,$E2,$20
         db $1F : db $15,$0D,$0C,$A4,$55,$A8,$55,$4B
         db $B2 : db $55,$95,$1C,$0F,$F8,$02,$B0,$00
         db $0C : db $BE,$0B,$FF,$33,$85,$32,$DE,$01
         db $33 : db $38,$60,$FA,$70,$03,$32,$0D,$0C
         db $CC : db $55,$D2,$55,$EB,$73,$55,$20,$B6
         db $03 : db $97,$0C,$80,$9D,$00,$3C,$05,$F7
         db $A9 : db $3E,$56,$F1,$12,$20,$5F,$75,$38
         db $FD : db $60,$A5,$0C,$36,$F0,$17,$C9,$01
         db $F0 : db $BF,$07,$A6,$1D,$DE,$00,$36,$9E
         db $05 : db $02,$F7,$A0,$F9,$56,$AD,$00,$E6
         db $36 : db $80,$ED,$7F,$BD,$01,$3B,$C9,$FE
         db $D0 : db $03,$AD,$03,$AB,$C2,$20,$C0,$03
         db $AA : db $C2,$05,$75,$C6,$05,$20,$F8,$B5
         db $0B : db $B7,$05,$9A,$0C,$3A,$4C,$DC,$55
         db $7B : db $FF,$E6,$34,$A5,$18,$18,$65,$34
         db $AA : db $FF,$BF,$00,$FD,$C0,$60,$23,$7C
         db $01 : db $DF,$59,$56,$02,$D9,$56,$1E,$26
         db $79 : db $56,$FF,$02,$99,$56,$03,$B9,$56
         db $04 : db $D9,$FF,$56,$FE,$63,$10,$DE,$66
         db $5B : db $56,$FF,$B4,$45,$2E,$35,$08,$31
         db $E8 : db $2C,$FF,$C7,$28,$A6,$24,$A5,$1C
         db $84 : db $18,$FF,$64,$14,$63,$10,$BB,$21
         db $36 : db $11,$FF,$7F,$73,$00,$00,$39,$52
         db $D7 : db $45,$DF,$51,$39,$EC,$2C,$E7,$44
         db $16 : db $85,$20,$EF,$84,$18,$84,$14,$4D
         db $2E : db $7B,$5A,$00,$FF,$00,$94,$3D,$53
         db $35 : db $EE,$2C,$AA,$1B,$24,$A5,$66,$06
         db $64 : db $1C,$4D,$0E,$89,$1E,$51,$0E,$FF
         db $D6 : db $45,$00,$00,$AA,$20,$A7,$20,$CF
         db $85 : db $1C,$43,$18,$89,$2E,$89,$4E,$CC
         db $24 : db $F8,$13,$09,$B9,$9E,$51,$0E,$63
         db $10 : db $AA,$7C,$FD,$9F,$56,$01,$57,$36
         db $57 : db $AB,$13,$FE,$05,$29,$5F,$03,$F0
         db $37 : db $0A,$AA,$F1,$05,$46,$DE,$06,$2E
         db $F1 : db $12,$E2,$20,$DA,$FE,$05,$FA,$F8
         db $02 : db $FB,$16,$77,$29,$7F,$69,$28,$04
         db $34 : db $A6,$1D,$C4,$05,$BC,$BE,$0B,$E9
         db $05 : db $F0,$05,$20,$8D,$C6,$05,$18,$FF
         db $60 : db $00,$00,$4E,$57,$66,$57,$4E,$FF
         db $57 : db $7F,$57,$01,$7E,$57,$01,$84,$6A
         db $2D : db $17,$91,$2D,$17,$9E,$2D,$0F,$FE
         db $AB : db $2D,$17,$D5,$B0,$2D,$17,$BD,$2D
         db $17 : db $CA,$3F,$17,$00,$01,$DF,$08,$00
         db $4C : db $35,$03,$24,$07,$35,$10,$FF,$00
         db $60 : db $35,$08,$10,$62,$35,$03,$F7,$08
         db $00 : db $64,$6A,$07,$66,$35,$08,$20,$D5
         db $68 : db $6E,$0F,$6A,$6A,$07,$6C,$77,$07
         db $6E : db $35,$FE,$5D,$0F,$75,$03,$10,$00
         db $4E : db $75,$08,$97,$00,$60,$75,$6B,$07
         db $75 : db $6F,$0F,$96,$07,$66,$A9,$75,$78
         db $07 : db $9A,$0F,$6A,$96,$07,$6C,$A3,$07
         db $6E : db $FF,$75,$40,$A8,$40,$70,$B0,$48
         db $68 : db $FF,$A8,$70,$68,$60,$A8,$80,$D0
         db $88 : db $FF,$58,$90,$A8,$98,$88,$50,$58
         db $70 : db $FF,$60,$90,$60,$10,$78,$08,$C2
         db $30 : db $FF,$48,$DA,$5A,$8B,$0B,$20,$2F
         db $50 : db $FF,$20,$13,$58,$20,$72,$58,$20
         db $43 : db $FD,$50,$0B,$01,$C2,$30,$2B,$AB
         db $7A : db $FA,$77,$68,$28,$6B,$5D,$00,$20
         db $3C : db $58,$69,$02,$F2,$72,$38,$04,$7D
         db $28 : db $64,$38,$FF,$61,$60,$8B,$FF,$A9
         db $00 : db $48,$AB,$A9,$03,$8D,$01,$FF,$21
         db $A6 : db $00,$8E,$02,$21,$A9,$07,$FF,$8D
         db $05 : db $21,$A9,$78,$8D,$07,$21,$FF,$A9
         db $7C : db $8D,$08,$21,$A9,$74,$8D,$FF,$09
         db $21 : db $8D,$0A,$21,$A9,$22,$8D,$FF,$0B
         db $21 : db $A9,$77,$8D,$0C,$21,$7B,$6F,$8D
         db $1A : db $21,$AB,$85,$30,$AD,$58,$90,$F8
         db $FE : db $B2,$38,$22,$0C,$00,$EE,$60,$B5
         db $58 : db $FF,$4C,$5A,$66,$5A,$70,$5A,$20
         db $70 : db $EF,$5C,$20,$5D,$5B,$1A,$10,$22
         db $09 : db $00,$FF,$EE,$22,$03,$00,$EE,$AB
         db $20 : db $45,$51,$5C,$08,$01,$28,$0B,$43
         db $61 : db $60,$4A,$29,$80,$4A,$29,$F1,$A0
         db $4A : db $29,$37,$79,$BA,$B9,$A9,$68,$85
         db $39 : db $FF,$A9,$48,$85,$3A,$A9,$78,$85
         db $3B : db $EF,$A9,$C0,$85,$3C,$70,$03,$3D
         db $A9 : db $90,$FF,$85,$3E,$64,$29,$64,$2A
         db $A0 : db $38,$7F,$00,$84,$2B,$64,$37,$64
         db $38 : db $72,$00,$7B,$C0,$5F,$77,$00,$7B
         db $20 : db $08,$5B,$B1,$02,$32,$36,$01,$02
         db $35 : db $01,$33,$0B,$90,$64,$B1,$12,$BF
         db $08 : db $40,$46,$01,$A7,$12,$C9,$00,$46
         db $01 : db $05,$1A,$44,$11,$06,$3B,$13,$BF
         db $31 : db $A0,$70,$64,$A9,$03,$A8,$22,$10
         db $24 : db $52,$21,$ED,$00,$30,$52,$21,$C3
         db $01 : db $50,$52,$21,$FF,$39,$B2,$72,$00
         db $27 : db $30,$09,$72,$00,$ED,$5A,$8D,$1A
         db $92 : db $DE,$B1,$09,$7B,$9D,$01,$39,$9A
         db $0C : db $36,$A9,$F9,$5A,$9C,$04,$2F,$02
         db $A0 : db $FF,$9D,$00,$38,$50,$F4,$02,$B6
         db $21 : db $9A,$04,$BF,$01,$0A,$03,$0E,$28
         db $C8 : db $19,$55,$60,$CF,$61,$02,$BE,$09
         db $07 : db $03,$0E,$2D,$C8,$19,$FD,$80,$CF
         db $19 : db $E6,$19,$A9,$01,$85,$32,$76,$63
         db $00 : db $A0,$CA,$6F,$08,$0F,$85,$32,$5D
         db $2A : db $9B,$E4,$0C,$70,$10,$E2,$5C,$77
         db $00 : db $64,$03,$20,$E3,$79,$5A,$92,$23
         db $40 : db $0A,$9A,$33,$A5,$3F,$8F,$DF,$1F
         db $21 : db $00,$A5,$40,$59,$12,$41,$8F,$E5
         db $20 : db $5B,$02,$42,$65,$0A,$A5,$05,$96
         db $5A : db $9C,$DF,$5A,$AF,$5A,$C6,$5A,$AB
         db $13 : db $7B,$BD,$BF,$01,$39,$A8,$B9,$3C
         db $00 : db $FD,$02,$9E,$19,$00,$0E,$07,$CB
         db $05 : db $D0,$0B,$AD,$03,$A7,$04,$B7,$05
         db $D3 : db $38,$60,$D6,$15,$C9,$1D,$1E,$F1
         db $05 : db $00,$34,$FF,$18,$7D,$00,$38,$9D
         db $00 : db $34,$E2,$FD,$20,$7F,$12,$BD,$01
         db $34 : db $99,$3C,$00,$FA,$D6,$15,$18,$85
         db $1B : db $08,$C2,$20,$C6,$41,$F9,$C6,$8F
         db $03 : db $86,$03,$3F,$D0,$05,$A4,$2B,$7F
         db $C8 : db $84,$2B,$38,$60,$85,$F4,$59,$05
         db $5F : db $85,$F3,$A4,$00,$5A,$DB,$05,$7E
         db $30 : db $09,$EB,$A5,$F4,$9C,$0C,$F3,$BE
         db $01 : db $7A,$C2,$20,$B7,$B9,$45,$5B,$BF
         db $15 : db $C8,$C8,$05,$0B,$01,$FD,$37,$0E
         db $1B : db $38,$C8,$C0,$18,$00,$D0,$7F,$CD
         db $60 : db $31,$60,$04,$F8,$54,$23,$07,$FF
         db $21 : db $61,$FD,$E0,$90,$61,$FB,$E0,$9F
         db $7F : db $60,$04,$08,$D0,$34,$03,$1A,$18
         db $17 : db $FF,$8D,$2C,$21,$A9,$02,$8D,$2D
         db $21 : db $FF,$A9,$E0,$8D,$32,$21,$9C,$20
         db $43 : db $FF,$A9,$32,$8D,$21,$43,$A0,$23
         db $5C : db $FF,$8C,$22,$43,$A9,$7E,$8D,$24
         db $43 : db $FF,$8D,$27,$43,$9C,$30,$43,$A9
         db $05 : db $FF,$8D,$31,$43,$A0,$40,$5C,$8C
         db $32 : db $FE,$5C,$0B,$34,$43,$8D,$37,$43
         db $A9 : db $01,$FF,$8D,$40,$43,$A9,$30,$8D
         db $41 : db $43,$DF,$A0,$0E,$5C,$8C,$42,$5C
         db $0B : db $44,$43,$FF,$8D,$47,$43,$8D,$54
         db $43 : db $8D,$57,$FD,$43,$45,$03,$50,$43
         db $A9 : db $11,$8D,$51,$FF,$43,$A0,$01,$5C
         db $8C : db $52,$43,$A9,$FF,$43,$8D,$60,$43
         db $A9 : db $1B,$8D,$61,$BF,$43,$A0,$15,$5C
         db $8C : db $62,$5C,$0B,$64,$F7,$43,$8D,$67
         db $A8 : db $0B,$70,$43,$A9,$1D,$FF,$8D,$71
         db $43 : db $A0,$1C,$5C,$8C,$72,$FE,$5C,$0B
         db $74 : db $43,$8D,$77,$43,$A9,$FC,$FF,$04
         db $31 : db $AB,$60,$27,$00,$00,$10,$FE,$E0
         db $2B : db $00,$54,$82,$04,$01,$80,$81,$FF
         db $00 : db $E4,$A0,$3C,$FB,$30,$3E,$00,$FF
         db $E4 : db $20,$40,$FB,$B0,$41,$00,$54,$FF
         db $E0 : db $01,$ED,$01,$EB,$01,$EA,$02,$FF
         db $E9 : db $03,$E8,$04,$E7,$05,$E6,$06,$FF
         db $E5 : db $07,$E4,$08,$E3,$0C,$E2,$0F,$FF
         db $E1 : db $1E,$E0,$00,$54,$09,$01,$07,$EF
         db $00 : db $7B,$AA,$A8,$AB,$0A,$03,$99,$00
         db $FF : db $3D,$BD,$80,$06,$99,$80,$40,$C8
         db $6F : db $C8,$BD,$C0,$04,$2B,$0C,$40,$08
         db $31 : db $14,$FF,$E8,$E8,$E0,$C0,$01,$D0
         db $DD : db $E2,$FF,$20,$60,$A0,$00,$01,$84
         db $3F : db $A0,$FF,$80,$00,$84,$41,$84,$25
         db $7B : db $A8,$FF,$84,$27,$64,$72,$64,$73
         db $64 : db $74,$FF,$A0,$E0,$00,$84,$87,$A0
         db $00 : db $40,$7F,$84,$8B,$A0,$00,$00,$84
         db $8D : db $1F,$0D,$7F,$8F,$20,$B1,$5C,$A0
         db $40 : db $74,$22,$05,$BF,$00,$44,$84,$12
         db $A9 : db $7E,$2B,$05,$80,$FF,$02,$84,$0E
         db $60 : db $7B,$AA,$9E,$00,$FF,$44,$E8,$E0
         db $80 : db $02,$D0,$F7,$60,$72,$72,$00,$C6
         db $39 : db $0A,$CA,$0A,$01,$D0,$0B,$9A,$19
         db $B6 : db $CE,$00,$80,$09,$9A,$09,$98,$64
         db $CE : db $00,$38,$7E,$A5,$05,$E6,$5C,$EA
         db $5C : db $FC,$5C,$7A,$12,$86,$BA,$05,$47
         db $5D : db $BF,$2D,$14,$1F,$A7,$0C,$DB,$00
         db $00 : db $94,$47,$19,$14,$1F,$20,$E1,$1C
         db $65 : db $DC,$01,$EB,$34,$FE,$FF,$F0,$18
         db $20 : db $93,$75,$E2,$10,$BD,$FB,$00,$3B
         db $25 : db $04,$B1,$EB,$85,$E7,$C2,$ED,$10
         db $C2 : db $05,$8B,$5E,$C7,$0A,$98,$65,$01
         db $FF : db $A5,$65,$8B,$19,$5E,$01,$BC,$65
         db $FB : db $01,$C9,$29,$15,$ED,$65,$01,$01
         db $66 : db $5E,$2A,$0D,$21,$66,$01,$36,$3B
         db $2D : db $5D,$3B,$15,$EF,$7E,$66,$01,$88
         db $3B : db $15,$9A,$66,$01,$BD,$AD,$3B,$15
         db $C1 : db $66,$01,$D4,$3B,$15,$F7,$AF,$66
         db $01 : db $09,$67,$69,$25,$2E,$71,$15,$54
         db $F7 : db $67,$01,$66,$71,$15,$8D,$67,$01
         db $A3 : db $DE,$71,$15,$C4,$67,$01,$DA,$71
         db $15 : db $F0,$67,$F7,$01,$05,$68,$2A,$0D
         db $15 : db $68,$01,$31,$5E,$9E,$15,$46,$68
         db $01 : db $61,$A7,$2D,$94,$A7,$2D,$7D,$CA
         db $9E : db $15,$F5,$68,$01,$12,$69,$2A,$0D
         db $EF : db $25,$69,$01,$41,$CB,$15,$55,$69
         db $01 : db $BD,$68,$CB,$15,$7A,$69,$01,$8D
         db $CB : db $15,$A5,$F7,$69,$01,$B4,$CB,$15
         db $19 : db $5E,$FE,$46,$8B,$44,$01,$F9,$BD
         db $FE : db $F9,$FD,$1B,$FE,$31,$66,$00,$FF
         db $A6 : db $00,$9B,$C2,$20,$B2,$E7,$85,$FF
         db $EB : db $E6,$E7,$E6,$E7,$E2,$20,$B1,$FF
         db $E7 : db $85,$43,$C8,$7B,$B1,$E7,$C8,$7F
         db $20 : db $DF,$5E,$B1,$E7,$F0,$17,$19,$07
         db $FF : db $14,$C9,$FF,$F0,$19,$5A,$9B,$91
         db $DF : db $EB,$E8,$9B,$A5,$43,$92,$06,$7A
         db $C8 : db $FF,$80,$E5,$60,$C2,$21,$A9,$80
         db $00 : db $AF,$85,$E0,$80,$07,$A0,$06,$40
         db $A4 : db $06,$A5,$DF,$EB,$65,$E0,$85,$EB
         db $B7 : db $02,$AA,$C8,$FF,$80,$C7,$DA,$5A
         db $0A : db $0A,$AA,$BD,$FF,$07,$5F,$49,$FF
         db $8D : db $02,$5C,$BD,$BD,$08,$C4,$0E,$05
         db $5C : db $BD,$09,$C4,$0E,$08,$F7,$5C,$BD
         db $0A : db $C4,$0E,$0B,$5C,$7A,$FA,$04,$23
         db $07 : db $E5,$0E,$04,$EA,$06,$E8,$16,$E9
         db $06 : db $EB,$06,$ED,$06,$FC,$EB,$16,$EB
         db $06 : db $A5,$1F,$C9,$77,$B0,$3F,$6F,$A9
         db $40 : db $14,$33,$72,$00,$DB,$76,$BA,$09
         db $76 : db $CB,$02,$07,$0A,$25,$04,$B9,$6E
         db $5F : db $08,$13,$FF,$DA,$20,$30,$56,$FA
         db $9D : db $01,$33,$A7,$29,$0F,$1A,$19,$03
         db $28 : db $27,$34,$12,$02,$29,$FD,$03,$32
         db $07 : db $37,$9D,$00,$37,$38,$60,$FF,$B4
         db $63 : db $B7,$63,$BA,$63,$BD,$63,$DF,$C0
         db $63 : db $C3,$63,$C6,$4F,$07,$AA,$7C,$3F
         db $82 : db $5F,$86,$5F,$98,$5F,$7A,$12,$D7
         db $04 : db $FE,$80,$02,$18,$7D,$01,$3B,$9D
         db $01 : db $3B,$77,$A6,$1D,$7B,$97,$02,$A8
         db $A5 : db $37,$6F,$07,$BF,$37,$BB,$75,$39
         db $A6 : db $1D,$2D,$07,$A5,$BD,$38,$6F,$07
         db $38 : db $BB,$75,$3C,$86,$0F,$34,$F7,$20
         db $8D : db $75,$BE,$0C,$C4,$5F,$C8,$5F,$D9
         db $DF : db $63,$1F,$CB,$01,$27,$60,$08,$13
         db $A9 : db $08,$76,$73,$07,$9E,$00,$75,$07
         db $20 : db $EF,$5F,$78,$07,$BB,$3B,$A8,$16
         db $05 : db $38,$38,$60,$AB,$0A,$35,$DC,$B4
         db $0E : db $F0,$0C,$FF,$D0,$08,$BA,$07,$20
         db $1B : db $27,$60,$80,$F1,$F0,$04,$92,$0A
         db $3B : db $EA,$07,$E0,$0F,$DF,$E1,$DE,$01
         db $3B : db $60,$C2,$17,$C8,$B1,$FD,$EB,$73
         db $07 : db $60,$01,$04,$02,$08,$01,$FE,$EB
         db $0E : db $FF,$40,$60,$04,$45,$60,$10,$EF
         db $4A : db $60,$04,$4F,$13,$08,$FF,$01,$90
         db $BF : db $27,$84,$30,$01,$90,$26,$21,$08
         db $27 : db $FB,$84,$70,$23,$08,$70,$5D,$60
         db $14 : db $6E,$FE,$33,$08,$FF,$04,$90,$08
         db $6C : db $30,$A0,$FF,$08,$6E,$30,$90,$18
         db $80 : db $30,$A0,$FF,$18,$82,$30,$04,$98
         db $08 : db $6C,$70,$FF,$88,$08,$6E,$70,$98
         db $18 : db $80,$70,$FF,$88,$18,$82,$70,$9A
         db $60 : db $08,$A3,$FF,$60,$04,$AC,$60,$04
         db $B5 : db $60,$04,$EF,$BE,$60,$08,$C7,$61
         db $28 : db $B5,$60,$FF,$FF,$02,$80,$08,$60
         db $30 : db $80,$18,$62,$AF,$30,$02,$80,$09
         db $7B : db $00,$19,$7F,$10,$64,$AA,$85,$00
         db $66 : db $80,$00,$08,$8D,$00,$18,$91,$10
         db $68 : db $F2,$7C,$00,$6A,$80,$08,$9F,$00
         db $19 : db $6A,$30,$0F,$FF,$61,$08,$18,$61
         db $04 : db $FD,$60,$04,$FF,$06,$61,$04,$EB
         db $60 : db $08,$F4,$60,$FE,$B3,$20,$06,$61
         db $FF : db $02,$A0,$08,$60,$FF,$70,$A0,$18
         db $62 : db $70,$02,$A0,$09,$AA,$CC,$00,$19
         db $D0 : db $10,$64,$D6,$00,$66,$D1,$00,$08
         db $2A : db $DE,$00,$18,$E2,$10,$68,$CD,$00
         db $6A : db $D1,$08,$F0,$00,$FF,$19,$6A,$70
         db $3F : db $61,$04,$48,$61,$FF,$04,$51,$61
         db $04 : db $5A,$61,$04,$63,$FF,$61,$04,$6C
         db $61 : db $08,$75,$61,$04,$EF,$7E,$61,$04
         db $87 : db $15,$09,$FF,$02,$90,$FF,$3F,$40
         db $30 : db $90,$4F,$42,$30,$02,$6B,$90,$3D
         db $20 : db $01,$4D,$24,$09,$3F,$44,$21,$01
         db $D5 : db $46,$25,$01,$3E,$32,$01,$4E,$36
         db $09 : db $3D,$48,$D2,$2A,$01,$4A,$37,$09
         db $44 : db $01,$4E,$48,$09,$3D,$4C,$52,$2A
         db $01 : db $4E,$2E,$09,$56,$01,$4F,$5A,$09
         db $41 : db $56,$01,$FF,$51,$4E,$30,$AE,$61
         db $08 : db $B7,$61,$FF,$04,$C0,$61,$04,$C9
         db $61 : db $04,$D2,$FF,$61,$04,$DB,$61,$04
         db $E4 : db $61,$04,$CF,$ED,$61,$04,$F6,$84
         db $09 : db $C8,$00,$3E,$48,$EF,$70,$A0,$4E
         db $4A : db $D1,$00,$3D,$4C,$70,$57,$A0,$4D
         db $4E : db $D1,$00,$3F,$98,$01,$4F,$9C,$09
         db $55 : db $41,$98,$01,$51,$9C,$11,$40,$A2
         db $01 : db $42,$94,$09,$5A,$B3,$01,$4D,$B7
         db $09 : db $3F,$44,$A2,$01,$46,$D1,$00,$D5
         db $3E : db $C5,$01,$4E,$C9,$09,$3D,$8F,$01
         db $4D : db $4A,$FF,$70,$20,$A8,$7A,$C2,$21
         db $AF : db $66,$BF,$DA,$DF,$69,$00,$DB,$85
         db $75 : db $06,$AF,$FD,$68,$E4,$01,$DF,$85
         db $E9 : db $A0,$00,$98,$FF,$84,$EB,$A9,$7F
         db $85 : db $ED,$A0,$00,$BF,$08,$84,$EF,$20
         db $CC : db $62,$E0,$01,$5D,$AA,$E4,$09,$E3
         db $E9 : db $11,$5F,$EF,$29,$A0,$F8,$71,$60
         db $EA : db $E4,$39,$62,$EF,$29,$A8,$F8,$59
         db $64 : db $E4,$64,$FF,$E5,$A9,$80,$85,$ED
         db $A2 : db $00,$98,$FF,$A9,$7F,$20,$48,$63
         db $20 : db $DD,$62,$DF,$A0,$00,$B8,$84,$E7
         db $FA : db $01,$E9,$64,$D7,$ED,$64,$EE,$69
         db $0C : db $EB,$6E,$04,$20,$18,$BF,$7A,$A2
         db $80 : db $00,$86,$E4,$56,$1A,$A8,$F2,$5D
         db $CA : db $20,$7A,$02,$CC,$07,$A4,$00,$B7
         db $E7 : db $FF,$97,$EB,$C8,$C8,$C4,$EF,$D0
         db $F6 : db $F6,$4B,$04,$7B,$AA,$CD,$07,$FB
         db $62 : db $A8,$E8,$BD,$E8,$BF,$02,$85,$E7
         db $E8 : db $E8,$26,$0F,$1B,$7F,$63,$FA,$E0
         db $20 : db $00,$D0,$E5,$E4,$1E,$EB,$04,$40
         db $E9 : db $03,$80,$E9,$06,$C0,$00,$00,$FF
         db $08 : db $00,$20,$00,$0C,$40,$20,$00,$FB
         db $08 : db $80,$EC,$02,$C0,$20,$8B,$A9,$7F
         db $EE : db $3E,$03,$20,$85,$E0,$FE,$02,$E1
         db $A6 : db $E7,$BF,$B9,$C0,$0B,$9D,$00,$B8
         db $43 : db $04,$C6,$FF,$E1,$D0,$F3,$C2,$21
         db $A5 : db $E7,$69,$FB,$00,$01,$E9,$09,$C6
         db $E0 : db $D0,$DE,$AB,$DF,$60,$85,$E9,$86
         db $E7 : db $F9,$12,$7B,$AA,$FF,$A9,$08,$85
         db $E6 : db $C2,$20,$A0,$10,$FF,$00,$A7,$E7
         db $85 : db $F1,$B7,$E7,$85,$FF,$EF,$7B,$E2
         db $20 : db $A0,$08,$00,$7B,$FF,$06,$F0,$2A
         db $06 : db $EF,$2A,$06,$F2,$FF,$2A,$06,$F1
         db $2A : db $29,$0F,$F0,$12,$FF,$85,$E0,$DA
         db $A6 : db $E4,$BF,$B8,$64,$F7,$7E,$FA,$0A
         db $63 : db $03,$29,$30,$05,$E0,$FF,$9D,$01
         db $B8 : db $E8,$E8,$88,$D0,$D5,$FF,$A4,$E7
         db $C8 : db $C8,$84,$E7,$C6,$E6,$FF,$D0,$B8
         db $C2 : db $20,$E6,$E4,$A5,$E7,$BF,$18,$69
         db $10 : db $00,$85,$E7,$42,$03,$C6,$FF,$ED
         db $D0 : db $A1,$AB,$60,$C9,$63,$FE,$FF,$CE
         db $63 : db $FE,$D3,$63,$FE,$D8,$63,$FF,$FE
         db $DD : db $63,$FE,$EE,$63,$FE,$F7,$7F,$63
         db $FE : db $01,$00,$00,$86,$72,$A7,$03,$DB
         db $87 : db $76,$A7,$03,$88,$78,$A7,$03,$89
         db $7A : db $DF,$04,$08,$08,$87,$72,$A8,$03
         db $36 : db $00,$FF,$10,$86,$78,$20,$00,$86
         db $32 : db $02,$BE,$B7,$03,$76,$10,$08,$89
         db $76 : db $CC,$03,$86,$FF,$7A,$30,$08,$86
         db $38 : db $00,$00,$FF,$FF,$7F,$F6,$62,$E6
         db $20 : db $00,$00,$9C,$FF,$73,$51,$4E,$83
         db $14 : db $00,$00,$0B,$FF,$46,$CA,$3D,$48
         db $29 : db $69,$2D,$49,$DF,$29,$6A,$35,$08
         db $20 : db $FC,$1B,$CD,$35,$FF,$AB,$31,$70
         db $56 : db $6F,$56,$4E,$52,$FE,$EE,$1B,$27
         db $25 : db $C6,$14,$0D,$4A,$E7,$FD,$1C,$08
         db $1C : db $AC,$39,$69,$2D,$27,$25,$FE,$08
         db $2C : db $8A,$35,$6A,$31,$69,$2D,$48,$9B
         db $29 : db $49,$F5,$03,$0D,$4A,$FC,$2B,$FC
         db $0B : db $6F,$FE,$09,$04,$00,$00,$EF,$41
         db $8C : db $31,$28,$FF,$2D,$07,$25,$E7,$1C
         db $C6 : db $18,$8B,$FF,$41,$69,$39,$06,$2D
         db $C5 : db $24,$8A,$F7,$3D,$26,$31,$FC,$1B
         db $00 : db $00,$D2,$62,$FB,$90,$5A,$0C,$0C
         db $76 : db $15,$2E,$00,$42,$FF,$0C,$41,$08
         db $CD : db $45,$6A,$3D,$28,$FF,$35,$28,$25
         db $E7 : db $2C,$E6,$24,$C5,$FF,$20,$C5,$18
         db $A3 : db $18,$83,$14,$63,$AF,$10,$00,$01
         db $02 : db $31,$1E,$02,$9F,$14,$03,$17,$02
         db $03 : db $03,$9F,$1C,$02,$98,$1C,$A9,$2C
         db $AE : db $FC,$74,$DF,$FC,$EC,$4C,$05,$0E
         db $25 : db $03,$03,$03,$14,$15,$40,$1B,$2D
         db $0C : db $1D,$1C,$4D,$A8,$0C,$2D,$75,$3B
         db $1D : db $04,$EC,$DC,$FD,$00,$9F,$04,$58
         db $44 : db $24,$00,$2C,$2E,$FF,$2B,$20,$31
         db $1F : db $21,$2E,$00,$CE,$FF,$44,$20,$00
         db $09 : db $0A,$13,$10,$0F,$FF,$10,$03,$16
         db $01 : db $14,$02,$0C,$02,$BF,$08,$16,$04
         db $09 : db $0A,$00,$76,$05,$01,$FF,$20,$25
         db $2E : db $21,$1F,$30,$2B,$2E,$FF,$00,$D0
         db $44 : db $20,$01,$1A,$10,$14,$FF,$09,$0A
         db $0F : db $10,$13,$0A,$01,$0C,$7F,$0A,$15
         db $02 : db $14,$06,$FE,$01,$87,$0D,$FF,$1A
         db $16 : db $0C,$0A,$01,$0A,$15,$10,$FF,$16
         db $00 : db $50,$44,$24,$02,$29,$1D,$F7,$25
         db $2A : db $01,$7A,$05,$23,$2E,$1D,$29,$DD
         db $29 : db $80,$05,$D2,$44,$20,$98,$04,$0C
         db $06 : db $DF,$0F,$01,$0F,$02,$13,$B6,$05
         db $FE : db $0C,$A9,$0A,$AB,$15,$AA,$1D,$0A
         db $CA : db $0D,$03,$D7,$05,$2C,$E7,$24,$25
         db $1F : db $9D,$3D,$83,$05,$03,$15,$06,$7F
         db $15 : db $14,$16,$1A,$02,$01,$15,$91,$05
         db $F3 : db $09,$02,$AD,$05,$4C,$06,$0C,$02
         db $1B : db $16,$97,$0C,$10,$01,$AD,$05,$03
         db $1C : db $06,$DE,$0D,$00,$FE,$BC,$05,$05
         db $06 : db $10,$01,$0E,$0A,$0F,$FA,$A4,$04
         db $FE : db $18,$2E,$0F,$10,$0E,$16,$13,$F7
         db $02 : db $00,$5A,$77,$05,$29,$31,$2F,$25
         db $F9 : db $1F,$3A,$16,$8B,$0D,$10,$01,$16
         db $06 : db $0E,$ED,$02,$1A,$06,$00,$52,$00
         db $06 : db $25,$29,$1D,$FF,$23,$21,$01,$20
         db $21 : db $2F,$25,$23,$C9,$2A,$80,$05,$A7
         db $05 : db $03,$AB,$15,$20,$0E,$01,$02,$EF
         db $0E : db $02,$0F,$10,$77,$0E,$04,$1E,$1D
         db $FF : db $30,$30,$28,$21,$01,$2C,$28,$1D
         db $1D : db $2A,$87,$26,$04,$1A,$02,$1B,$06
         db $C2 : db $0D,$24,$06,$EB,$06,$03,$BA,$05
         db $02 : db $F0,$2D,$10,$10,$15,$FD,$02,$77
         db $0E : db $05,$22,$25,$21,$28,$20,$B4,$A9
         db $36 : db $83,$05,$05,$AB,$15,$09,$0A,$30
         db $06 : db $0E,$3F,$02,$06,$0C,$02,$18,$02
         db $29 : db $06,$E3,$0D,$3E,$B6,$05,$01,$06
         db $15 : db $10,$09,$82,$0D,$98,$0C,$7F,$14
         db $02 : db $15,$10,$13,$16,$01,$1A,$06,$69
         db $0B : db $28,$06,$40,$0E,$15,$F3,$15,$0C
         db $06 : db $2E,$06,$7E,$D3,$16,$06,$21,$32
         db $21 : db $2A,$30,$DE,$4E,$FB,$06,$01,$19
         db $0F : db $0C,$02,$14,$02,$01,$59,$07,$1C
         db $07 : db $ED,$0D,$06,$0A,$4B,$07,$06,$F4
         db $06 : db $D6,$1A,$06,$09,$02,$59,$06,$4E
         db $33 : db $0F,$22,$22,$04,$A1,$05,$D3,$65
         db $06 : db $87,$0D,$F4,$0D,$66,$0F,$ED,$05
         db $13 : db $0F,$12,$CC,$16,$08,$90,$07,$6A
         db $0F : db $05,$A3,$2E,$D5,$3D,$E7,$0E,$8C
         db $C7 : db $06,$87,$0D,$01,$1A,$99,$06,$94
         db $1D : db $FF,$0D,$2F,$27,$2B,$31,$2A,$DD
         db $06 : db $D5,$3D,$D4,$15,$06,$46,$06,$1C
         db $16 : db $0F,$91,$05,$10,$00,$48,$CC,$05
         db $6F : db $27,$03,$36,$8A,$83,$46,$02,$87
         db $0D : db $0C,$73,$0E,$8F,$05,$90,$05,$0A
         db $23 : db $00,$4A,$A0,$06,$D9,$1E,$FE,$8F
         db $03 : db $20,$1E,$17,$07,$DA,$72,$16,$10
         db $29 : db $06,$1A,$16,$5C,$17,$0F,$02,$E3
         db $10 : db $13,$FB,$06,$8B,$0D,$C1,$1D,$0C
         db $06 : db $05,$F5,$02,$82,$0D,$07,$48,$07
         db $10 : db $0E,$10,$06,$C5,$01,$47,$06,$1B
         db $F9 : db $26,$EF,$07,$B2,$05,$15,$02,$35
         db $0F : db $91,$05,$FE,$20,$0E,$0E,$0A,$96
         db $05 : db $32,$36,$71,$CC,$A8,$05,$AD,$0D
         db $9B : db $08,$13,$10,$16,$BE,$06,$21,$0E
         db $1E : db $08,$FB,$0E,$C7,$36,$BA,$00,$16
         db $6F : db $00,$F3,$07,$FF,$00,$29,$2B,$2A
         db $2F : db $30,$21,$2E,$A0,$FD,$7F,$3B,$0E
         db $92 : db $06,$F3,$15,$1D,$20,$46,$D6,$06
         db $2B : db $C3,$1E,$26,$FA,$97,$E7,$0E,$2C
         db $0E : db $BF,$17,$10,$09,$F8,$F8,$0E,$77
         db $16 : db $D2,$1F,$21,$2A,$23,$25,$2A,$7D
         db $21 : db $DC,$1D,$03,$06,$0A,$0B,$0A,$E8
         db $05 : db $F8,$98,$00,$58,$0E,$78,$0E,$2E
         db $21 : db $29,$1D,$27,$BA,$A8,$3E,$D6,$15
         db $06 : db $18,$06,$0A,$46,$06,$01,$C5,$0D
         db $28 : db $06,$02,$F1,$0E,$C6,$05,$99,$0D
         db $03 : db $30,$3F,$2E,$1D,$2A,$2F,$28,$1D
         db $A3 : db $0D,$6B,$09,$FF,$15,$06,$05,$01
         db $18 : db $10,$10,$0D,$FF,$14,$06,$1A,$00
         db $08 : db $C2,$30,$48,$FF,$DA,$5A,$8B,$0B
         db $20 : db $2F,$50,$20,$FF,$E1,$69,$20,$10
         db $6A : db $20,$4E,$50,$FF,$C2,$30,$2B,$AB
         db $7A : db $FA,$68,$28,$FF,$6B,$20,$11,$77
         db $20 : db $F4,$69,$20,$FF,$15,$78,$20,$4F
         db $78 : db $20,$85,$74,$7F,$20,$E5,$6B,$60
         db $8B : db $A9,$00,$FC,$02,$FF,$03,$8D,$01
         db $21 : db $A6,$00,$8E,$02,$FF,$21,$A9,$07
         db $8D : db $05,$21,$7B,$A9,$FF,$80,$8D,$1A
         db $21 : db $AB,$60,$7B,$A5,$FF,$19,$30,$0D
         db $0A : db $AA,$FC,$3C,$6A,$FF,$20,$0F,$75
         db $20 : db $FD,$71,$80,$EE,$FF,$A0,$0F,$00
         db $84 : db $15,$A9,$00,$A0,$FF,$A0,$55,$20
         db $DC : db $74,$A4,$15,$F0,$FD,$08,$F8,$21
         db $F4 : db $60,$48,$6A,$87,$6A,$FF,$9E,$6A
         db $AD : db $6A,$BC,$6A,$C6,$6A,$FF,$20,$C3
         db $6B : db $A2,$00,$31,$A0,$65,$7F,$74,$20
         db $24 : db $73,$A2,$00,$30,$2C,$2A,$FF,$31
         db $A0 : db $D2,$6C,$A9,$02,$20,$3A,$D8,$31
         db $12 : db $3F,$22,$05,$02,$8C,$6B,$0A,$02
         db $E6 : db $19,$EF,$A9,$0F,$85,$32,$37,$03
         db $84 : db $15,$60,$FF,$A4,$15,$D0,$0F,$E6
         db $19 : db $A0,$58,$75,$02,$03,$12,$18,$55
         db $0A : db $20,$CF,$6A,$64,$0A,$A5,$07,$69
         db $02 : db $3C,$02,$02,$78,$42,$01,$84,$3A
         db $02 : db $FB,$E6,$19,$78,$0A,$A9,$FF,$85
         db $19 : db $7B,$FF,$8D,$00,$02,$60,$A5,$3F
         db $8F : db $1F,$EF,$21,$00,$A5,$40,$AF,$12
         db $41 : db $8F,$20,$BA,$B1,$02,$42,$BB,$12
         db $44 : db $8F,$1B,$B1,$02,$45,$AE,$C7,$12
         db $46 : db $8F,$1C,$B1,$02,$47,$D3,$12,$48
         db $EB : db $8F,$1D,$B1,$02,$49,$DF,$12,$4A
         db $8F : db $1E,$FA,$B1,$02,$4B,$EB,$0A,$60
         db $AA : db $7C,$1C,$6B,$FF,$20,$6B,$51,$6B
         db $A6 : db $1D,$FE,$00,$FF,$3A,$A9,$80,$8F
         db $30 : db $21,$00,$A9,$77,$57,$8F,$31,$07
         db $03 : db $17,$8F,$2C,$0D,$13,$FD,$2D,$07
         db $03 : db $88,$9D,$01,$33,$A9,$20,$FF,$9D
         db $02 : db $33,$A9,$42,$9D,$01,$34,$FE,$20
         db $03 : db $00,$36,$A6,$1D,$BD,$00,$36,$FF
         db $D0 : db $2F,$BD,$01,$33,$C9,$97,$B0,$FF
         db $07 : db $8F,$32,$21,$00,$FE,$01,$33,$DF
         db $BD : db $02,$33,$C9,$8F,$3B,$23,$02,$33
         db $9F : db $BD,$01,$34,$C9,$91,$3B,$2B,$29
         db $1B : db $DE,$FF,$00,$36,$38,$60,$20,$9D
         db $6B : db $A5,$FF,$18,$29,$07,$D0,$06,$C2
         db $20 : db $E6,$FF,$27,$E2,$20,$38,$60,$A5
         db $19 : db $C9,$7F,$03,$F0,$0A,$C9,$04,$F0
         db $0F : db $6D,$03,$F7,$01,$D0,$08,$73,$03
         db $44 : db $E6,$4A,$E2,$E3,$20,$60,$8B,$13
         db $8E : db $03,$8F,$13,$A0,$40,$00,$FF,$84
         db $3F : db $A0,$20,$00,$84,$41,$A0,$FF,$A0
         db $FF : db $84,$25,$A0,$C0,$FF,$84,$7F,$27
         db $7B : db $A8,$84,$46,$84,$48,$91,$0A,$FF
         db $44 : db $84,$4A,$60,$A0,$96,$4E,$84,$FF
         db $F3 : db $A9,$D9,$85,$F5,$A0,$00,$00,$FF
         db $84 : db $F6,$A9,$7F,$85,$F8,$22,$6D,$EB
         db $FF : db $C2,$CC,$0B,$E7,$D1,$03,$E9,$A0
         db $00 : db $F7,$98,$84,$EB,$D1,$03,$ED,$A0
         db $C0 : db $07,$FF,$84,$EF,$20,$CC,$62,$A9
         db $40 : db $85,$FF,$ED,$A2,$00,$98,$A9,$7F
         db $20 : db $7A,$7F,$6C,$20,$3D,$6C,$A0,$00
         db $B8 : db $DC,$1B,$FF,$64,$ED,$64,$EE,$A0
         db $00 : db $20,$84,$DD,$EB,$CC,$03,$20,$18
         db $7A : db $D1,$01,$7F,$48,$FF,$AB,$7B,$AA
         db $9D : db $00,$B8,$E8,$E8,$DF,$E0,$00,$20
         db $D0 : db $F6,$B5,$03,$E7,$A9,$FF,$0A,$85
         db $E0 : db $A9,$20,$85,$E1,$A6,$EF,$E7,$B9
         db $C0 : db $07,$22,$04,$C8,$E8,$E8,$FF,$C6
         db $E1 : db $D0,$F3,$C2,$21,$A5,$E7,$FF,$69
         db $00 : db $01,$85,$E7,$E2,$20,$C6,$FF,$E0
         db $D0 : db $DE,$AB,$60,$85,$E9,$86,$FD,$E7
         db $1B : db $24,$A9,$08,$85,$E6,$C2,$20,$FE
         db $5F : db $02,$A7,$E7,$85,$F1,$B7,$E7,$85
         db $FF : db $EF,$7B,$E2,$20,$A0,$08,$00,$7B
         db $FF : db $06,$F0,$2A,$06,$EF,$2A,$06,$F2
         db $FF : db $2A,$06,$F1,$2A,$29,$0F,$F0,$00
         db $FB : db $9D,$01,$24,$04,$88,$D0,$E7,$A4
         db $E7 : db $FF,$C8,$C8,$84,$E7,$C6,$E6,$D0
         db $CA : db $FF,$C2,$20,$A5,$E7,$18,$69,$10
         db $00 : db $FB,$85,$E7,$74,$04,$C6,$ED,$D0
         db $B5 : db $AB,$FF,$60,$2F,$5E,$76,$3E,$8E
         db $29 : db $0A,$FF,$21,$C8,$1C,$86,$14,$64
         db $14 : db $43,$BF,$10,$23,$0C,$22,$04,$00
         db $C4 : db $34,$A4,$7D,$18,$A2,$49,$0F,$6D
         db $20 : db $47,$6D,$B3,$69,$DB,$22,$6D,$C5
         db $39 : db $FB,$6F,$D1,$41,$A9,$82,$FF,$8D
         db $30 : db $21,$A9,$50,$8D,$31,$21,$FF,$A9
         db $17 : db $8D,$2C,$21,$A9,$01,$8D,$BF,$2D
         db $21 : db $A9,$E0,$8D,$32,$EB,$41,$73,$FD
         db $6D : db $F8,$F9,$7D,$6D,$27,$6E,$41,$6E
         db $FF : db $74,$6E,$81,$6E,$64,$34,$A9,$80
         db $AB : db $85,$35,$32,$3A,$80,$2B,$2A,$A0
         db $2B : db $42,$7D,$27,$71,$A9,$04,$43,$0A
         db $6B : db $05,$BD,$81,$25,$74,$05,$7D,$DD
         db $81 : db $1D,$A9,$02,$A0,$FD,$6E,$56,$02
         db $FF : db $C2,$20,$A9,$7A,$70,$9D,$00,$35
         db $FF : db $A9,$FC,$FF,$9D,$00,$38,$A9,$04
         db $7F : db $00,$9D,$00,$37,$A9,$68,$01,$2C
         db $03 : db $2F,$E2,$20,$A9,$72,$1D,$0B,$80
         db $27 : db $0B,$9E,$3D,$39,$A6,$A9,$15,$B4
         db $0D : db $38,$A9,$FE,$AF,$05,$B8,$3D,$A5
         db $50 : db $1D,$0B,$A0,$27,$03,$59,$22,$B4
         db $61 : db $42,$38,$F5,$04,$03,$12,$8A,$A1
         db $0D : db $20,$97,$6F,$20,$8B,$4C,$6F,$64
         db $0A : db $28,$69,$02,$00,$0E,$32,$1A,$A9
         db $01 : db $08,$84,$25,$2E,$2E,$74,$15,$30
         db $16 : db $18,$3E,$9D,$0A,$19,$1E,$FE,$A4
         db $32 : db $AA,$7C,$8E,$6E,$92,$6E,$97,$F9
         db $6E : db $FE,$12,$2F,$1B,$39,$BC,$00,$39
         db $5A : db $D6,$05,$02,$DB,$76,$56,$02,$7A
         db $A5 : db $05,$19,$71,$BE,$AA,$05,$E2,$20
         db $B9 : db $E9,$6E,$1D,$03,$C8,$FE,$93,$16
         db $34 : db $C8,$C0,$14,$00,$F0,$16,$FF,$A6
         db $1D : db $C2,$20,$98,$9D,$00,$39,$62,$BF
         db $05 : db $10,$2C,$13,$65,$13,$6A,$0D,$9D
         db $71 : db $70,$05,$FF,$18,$60,$70,$9D,$74
         db $A0 : db $78,$9E,$FF,$7C,$9D,$80,$9C,$84
         db $9F : db $88,$A0,$FF,$8C,$9F,$90,$A4,$94
         db $A5 : db $AA,$7C,$BF,$01,$6F,$05,$6F,$15
         db $6F : db $FE,$12,$20,$DB,$5F,$75,$A5,$05
         db $94 : db $02,$AB,$06,$A6,$1D,$EE,$7C,$06
         db $F0 : db $2B,$BC,$32,$03,$17,$C2,$21,$FF
         db $BD : db $00,$33,$7D,$00,$37,$9D,$00,$FF
         db $33 : db $BD,$00,$34,$18,$7D,$00,$38,$FF
         db $9D : db $00,$34,$E2,$20,$C2,$20,$DE,$DB
         db $00 : db $39,$31,$03,$F0,$03,$65,$03,$E2
         db $20 : db $F7,$20,$8D,$75,$68,$03,$83,$6F
         db $29 : db $1F,$5B,$D0,$27,$05,$02,$5A,$70
         db $A2 : db $1D,$F6,$A9,$0D,$F7,$E2,$20,$DA
         db $2A : db $0F,$03,$0A,$A8,$FA,$B7,$B9,$7B
         db $6F : db $1D,$03,$B9,$7C,$4E,$07,$34,$FF
         db $60 : db $72,$9A,$7A,$92,$62,$AA,$52,$FF
         db $BA : db $7B,$E6,$34,$A5,$34,$AA,$BF,$DF
         db $00 : db $FD,$C0,$85,$35,$66,$17,$65,$35
         db $AE : db $29,$17,$07,$D0,$2A,$31,$47,$DA
         db $3D : db $3F,$FA,$4F,$29,$3F,$69,$68,$1D
         db $03 : db $8E,$2F,$98,$55,$0F,$4A,$2A,$0F
         db $0F : db $7A,$57,$42,$8D,$1E,$8E,$1F,$1F
         db $95 : db $47,$5D,$1F,$A1,$1F,$A0,$00,$E9
         db $C6 : db $03,$EC,$CA,$AB,$16,$0B,$14,$E0
         db $0F : db $12,$0C,$30,$17,$04,$FC,$0F,$06
         db $44 : db $5D,$07,$12,$2C,$A0,$E0,$16,$F2
         db $4F : db $0D,$12,$0C,$FD,$60,$17,$0C,$AA
         db $7C : db $5E,$70,$62,$70,$F3,$6A,$70,$E3
         db $2E : db $2F,$03,$01,$3B,$C9,$FE,$FB,$F0
         db $05 : db $25,$17,$18,$60,$7D,$70,$FE,$FF
         db $0A : db $90,$00,$12,$38,$A0,$00,$14,$FF
         db $38 : db $B0,$00,$16,$38,$80,$10,$30,$FF
         db $38 : db $90,$10,$32,$38,$A0,$10,$34,$FF
         db $38 : db $B0,$10,$36,$38,$80,$20,$50,$FF
         db $38 : db $90,$20,$52,$38,$A0,$20,$54,$FF
         db $38 : db $A9,$70,$FE,$0C,$80,$18,$10,$AF
         db $38 : db $90,$00,$18,$5F,$00,$1A,$63,$00
         db $1C : db $AF,$38,$C0,$00,$1E,$6B,$00,$38
         db $6F : db $00,$3A,$BE,$73,$00,$3C,$38,$C0
         db $10 : db $3E,$7F,$00,$5A,$FF,$38,$B0,$20
         db $5C : db $38,$C0,$20,$5E,$FF,$38,$E7,$70
         db $08 : db $EC,$70,$08,$F1,$7F,$70,$08,$E6
         db $70 : db $FE,$00,$01,$C4,$04,$F5,$3A,$C5
         db $00 : db $01,$C9,$08,$02,$3A,$02,$71,$DF
         db $08 : db $07,$71,$08,$0C,$D8,$08,$FE,$01
         db $FF : db $04,$04,$03,$3A,$01,$02,$02,$04
         db $FF : db $3A,$03,$00,$00,$05,$3A,$08,$00
         db $FF : db $06,$3A,$00,$08,$07,$3A,$2E,$71
         db $FF : db $08,$33,$71,$08,$38,$71,$08,$3D
         db $5C : db $FB,$10,$FA,$00,$2E,$71,$FF,$C5
         db $00 : db $08,$C9,$08,$F5,$09,$C9,$08,$0A
         db $C9 : db $08,$0B,$3A,$51,$71,$FF,$08,$56
         db $71 : db $08,$5F,$71,$08,$6C,$BA,$27,$09
         db $FE : db $C5,$00,$0C,$3A,$02,$30,$09,$08
         db $73 : db $00,$0D,$E9,$08,$37,$19,$10,$00
         db $0E : db $3C,$59,$FF,$18,$00,$0F,$3A,$E7
         db $1C : db $BD,$7B,$FF,$7A,$77,$58,$77,$17
         db $73 : db $D4,$6E,$FF,$8F,$66,$4D,$62,$E8
         db $59 : db $86,$4D,$FF,$25,$3D,$E3,$30,$A3
         db $24 : db $82,$1C,$FF,$62,$18,$42,$10,$00
         db $00 : db $BF,$26,$FF,$FF,$01,$95,$42,$32
         db $36 : db $11,$32,$FF,$F0,$2D,$CF,$29,$AE
         db $21 : db $8D,$1D,$FF,$4B,$19,$09,$15,$C8
         db $10 : db $A6,$0C,$87,$59,$01,$B2,$C4,$04
         db $89 : db $09,$81,$99,$89,$09,$00,$C7,$00
         db $7F : db $47,$7D,$09,$97,$19,$C6,$79,$A9
         db $81 : db $FF,$8F,$00,$42,$00,$85,$17,$58
         db $A5 : db $FF,$17,$D0,$FC,$78,$A5,$32,$8F
         db $00 : db $FE,$B1,$02,$31,$8F,$0C,$42,$00
         db $20 : db $1B,$FD,$72,$93,$03,$A5,$08,$49
         db $FF : db $FF,$25,$FF,$04,$85,$06,$A4,$04
         db $84 : db $08,$AF,$E5,$18,$DF,$01,$04,$91
         db $03 : db $D0,$2C,$E2,$20,$AD,$FB,$10,$42
         db $01 : db $0D,$A2,$00,$00,$DA,$2B,$7F,$A5
         db $17 : db $F0,$0C,$20,$65,$72,$44,$05,$FF
         db $03 : db $88,$84,$15,$E6,$18,$64,$17,$FE
         db $E4 : db $2C,$40,$40,$9C,$0C,$42,$9C,$0B
         db $FF : db $42,$A5,$25,$8D,$0D,$21,$A5,$26
         db $7E : db $4B,$0A,$27,$8D,$0E,$21,$A5,$28
         db $55 : db $0A,$BF,$29,$8D,$0F,$21,$A5,$2A
         db $5F : db $0A,$2B,$DF,$8D,$10,$21,$A5,$2C
         db $69 : db $0A,$2D,$8D,$EF,$11,$21,$A5,$2E
         db $73 : db $0A,$2F,$8D,$12,$F7,$21,$A5,$30
         db $7D : db $02,$20,$B0,$72,$20,$FF,$FE,$72
         db $4C : db $D5,$72,$A6,$00,$8E,$FF,$02,$21
         db $8A : db $8D,$04,$43,$A9,$02,$FF,$8D,$00
         db $43 : db $A9,$04,$8D,$01,$43,$FF,$A0,$00
         db $03 : db $8C,$02,$43,$A0,$20,$EF,$02,$8C
         db $05 : db $43,$19,$05,$0B,$42,$60,$FF,$A4
         db $10 : db $C0,$FF,$FF,$F0,$21,$8C,$69,$16
         db $18 : db $0D,$9A,$02,$18,$9E,$02,$A4,$12
         db $A4 : db $02,$DB,$A5,$14,$94,$02,$A4,$0E
         db $AA : db $32,$A5,$00,$57,$8D,$21,$21,$97
         db $1A : db $22,$9E,$12,$30,$A4,$02,$DB,$A9
         db $7E : db $94,$02,$A0,$00,$A9,$3A,$86,$E7
         db $FF : db $84,$EB,$A4,$00,$C2,$20,$B1,$EB
         db $7D : db $91,$94,$04,$C0,$20,$00,$D0,$F5
         db $91 : db $03,$49,$48,$02,$0B,$31,$0F,$73
         db $36 : db $07,$96,$07,$39,$9D,$0C,$E6,$07
         db $07 : db $A5,$EB,$11,$17,$37,$08,$73,$62
         db $73 : db $BF,$71,$73,$A6,$1D,$A9,$1F,$B2
         db $06 : db $9E,$DB,$01,$36,$72,$06,$38,$60
         db $75 : db $0E,$39,$D0,$6F,$2B,$BD,$01,$39
         db $AB : db $06,$C2,$20,$01,$07,$DB,$85,$E0
         db $0A : db $07,$85,$E3,$1B,$07,$85,$F1,$FF
         db $20 : db $A8,$73,$E2,$20,$AE,$1D,$00,$7A
         db $1B : db $0F,$05,$B7,$06,$D0,$02,$18,$60
         db $18 : db $07,$FE,$BA,$06,$10,$00,$A4,$00
         db $B1 : db $E0,$85,$FF,$E7,$B1,$E3,$85,$E9
         db $20 : db $C2,$73,$FF,$A5,$E7,$91,$E0,$C8
         db $C8 : db $CA,$D0,$FF,$EC,$60,$A5,$E7,$29
         db $1F : db $00,$85,$F7,$EB,$A5,$E9,$A2,$03
         db $38 : db $E5,$EB,$F0,$FF,$0C,$90,$08,$C5
         db $F1 : db $90,$06,$E6,$DF,$EB,$80,$02,$C6
         db $EB : db $A0,$03,$E0,$03,$FB,$85,$ED,$A7
         db $03 : db $E0,$03,$38,$E5,$ED,$FF,$F0,$1C
         db $90 : db $12,$0A,$0A,$0A,$EB,$FE,$B3,$03
         db $12 : db $18,$A5,$ED,$69,$20,$00,$FF,$85
         db $ED : db $80,$08,$A5,$ED,$38,$E9,$BC,$DC
         db $0B : db $A0,$03,$00,$7C,$85,$EF,$A7,$03
         db $00 : db $FF,$7C,$38,$E5,$EF,$F0,$1F,$90
         db $15 : db $7F,$E2,$20,$EB,$4A,$4A,$C2,$20
         db $D4 : db $1B,$BF,$EF,$69,$00,$04,$85,$EF
         db $E0 : db $03,$EF,$FB,$38,$E9,$0C,$0C,$A5
         db $EB : db $05,$ED,$05,$FF,$EF,$85,$E7,$60
         db $00 : db $00,$FF,$7F,$F8,$25,$CC,$C6,$91
         db $C6 : db $41,$A6,$00,$86,$1D,$86,$FF,$1F
         db $C2 : db $20,$20,$B7,$74,$E2,$10,$FF,$7B
         db $AA : db $9E,$00,$32,$9E,$00,$3A,$FF,$9E
         db $00 : db $3C,$9E,$00,$33,$9E,$00,$FF,$34
         db $9E : db $00,$37,$9E,$00,$38,$9E,$FF,$00
         db $39 : db $E8,$E8,$E0,$00,$D0,$E2,$FE,$14
         db $07 : db $10,$60,$7B,$AA,$A9,$01,$E0,$7F
         db $9D : db $00,$03,$E8,$E8,$A9,$01,$DD,$05
         db $DE : db $9C,$04,$E0,$00,$02,$D0,$05,$03
         db $98 : db $99,$FB,$00,$05,$0E,$1B,$F6,$60
         db $20 : db $E9,$74,$FF,$E2,$20,$A5,$1D,$9D
         db $01 : db $3C,$E6,$EB,$1F,$60,$1C,$03,$EB
         db $D0 : db $03,$0A,$0A,$C2,$7F,$20,$AA,$BD
         db $00 : db $32,$D0,$05,$AA,$06,$FB,$32,$60
         db $8A : db $0C,$01,$D0,$EF,$CA,$CA,$FE,$D8
         db $0C : db $80,$FE,$60,$A2,$00,$03,$86,$FF
         db $0A : db $A2,$00,$05,$86,$0C,$A9,$03,$FF
         db $85 : db $23,$64,$24,$A2,$80,$00,$86,$F3
         db $21 : db $A6,$07,$03,$D3,$04,$F0,$22,$86
         db $1D : db $FF,$DA,$85,$1B,$E2,$20,$7B,$BD
         db $00 : db $EF,$3A,$0A,$20,$5C,$EA,$06,$FA
         db $B0 : db $0E,$EE,$72,$44,$39,$C6,$1F,$DD
         db $1C : db $D2,$20,$8F,$FD,$76,$35,$03,$6C
         db $1B : db $00,$7B,$9D,$00,$FD,$3B,$5C,$0B
         db $35 : db $85,$EB,$E2,$20,$A0,$FF,$02,$00
         db $B1 : db $EB,$9D,$01,$3B,$60,$FF,$DA,$20
         db $93 : db $75,$E2,$10,$BD,$00,$FB,$3B,$A8
         db $08 : db $0B,$C2,$10,$A8,$E2,$20,$35,$FA
         db $C2 : db $06,$60,$54,$05,$4C,$DA,$47,$00
         db $06 : db $0B,$FC,$43,$25,$4A,$18,$22,$C9
         db $FF : db $D0,$08,$9E,$7F,$00,$3B,$20,$CA
         db $75 : db $80,$ED,$4A,$00,$3B,$D0,$0E,$59
         db $05 : db $18,$69,$03,$3E,$05,$8C,$0D,$33
         db $DA : db $DE,$50,$05,$57,$1D,$C8,$C8,$4D
         db $15 : db $92,$04,$F2,$57,$3D,$85,$0D,$03
         db $90 : db $0C,$A4,$00,$A5,$21,$FF,$F0,$6A
         db $B1 : db $E7,$85,$E6,$F0,$64,$FD,$C8,$D0
         db $05 : db $E0,$10,$12,$7B,$A5,$23,$FF,$AA
         db $BD : db $8B,$76,$18,$65,$24,$85,$FF,$24
         db $92 : db $0C,$A6,$1D,$80,$04,$A5,$DE,$E8
         db $05 : db $A5,$E0,$29,$7F,$61,$03,$01,$3A
         db $BF : db $89,$01,$F0,$0D,$64,$E1,$F9,$01
         db $E0 : db $DF,$38,$E5,$25,$85,$E0,$23,$07
         db $5D : db $76,$EF,$C6,$23,$10,$0A,$F7,$1C
         db $C2 : db $20,$E6,$DD,$0C,$02,$0E,$92,$0A
         db $E6 : db $23,$06,$A5,$E2,$FE,$22,$1E,$E2
         db $20 : db $C6,$21,$F0,$04,$C6,$FF,$E6,$D0
         db $9D : db $60,$A5,$E0,$18,$7D,$71,$01,$60
         db $03 : db $D6,$05,$3D,$06,$34,$85,$E1,$D6
         db $0D : db $FB,$E2,$C8,$F9,$0D,$02,$F0,$06
         db $B1 : db $E7,$EF,$09,$40,$80,$02,$44,$0E
         db $00 : db $3C,$85,$FF,$E3,$C8,$60,$80,$20
         db $08 : db $02,$A4,$BF,$21,$F0,$10,$A2,$FC
         db $01 : db $97,$1C,$CA,$E2,$7A,$06,$88,$B7
         db $04 : db $71,$FD,$93,$95,$AA,$7C,$DF,$DF
         db $76 : db $E3,$76,$EB,$76,$E3,$2E,$A5,$33
         db $3F : db $89,$40,$D0,$1E,$A6,$1D,$FF,$A6
         db $51 : db $20,$FD,$8B,$1E,$0A,$7B,$A8,$8C
         db $81 : db $21,$8C,$EF,$02,$21,$8D,$04,$FB
         db $16 : db $06,$21,$8D,$A3,$0C,$42,$AF,$02
         db $4B : db $02,$0B,$0F,$0E,$10,$17,$0F,$AA
         db $16 : db $17,$10,$1C,$17,$11,$22,$17,$12
         db $28 : db $17,$13,$F2,$2E,$17,$14,$34,$0F
         db $BA : db $02,$8C,$18,$21,$8D,$DB,$1A,$21
         db $DE : db $02,$8D,$22,$46,$17,$23,$21,$FF
         db $8D : db $24,$21,$8D,$25,$21,$8D,$26,$FF
         db $21 : db $8D,$28,$21,$8D,$27,$21,$8D,$FF
         db $29 : db $21,$8D,$2A,$21,$8D,$2B,$21,$FF
         db $8D : db $2E,$21,$8D,$2F,$21,$8D,$33,$FF
         db $21 : db $8D,$00,$42,$8D,$02,$42,$8D,$EF
         db $03 : db $42,$8D,$04,$79,$17,$05,$42,$8D
         db $EF : db $06,$42,$8D,$07,$85,$17,$08,$42
         db $8D : db $F5,$09,$8E,$17,$0A,$07,$17,$0C
         db $42 : db $A9,$63,$E3,$8D,$01,$01,$05,$90
         db $02 : db $D6,$02,$05,$21,$A9,$FF,$03,$8D
         db $07 : db $21,$A9,$11,$8D,$08,$FF,$21,$A9
         db $19 : db $8D,$09,$21,$8D,$0A,$BF,$21,$A9
         db $23 : db $8D,$0B,$21,$E6,$02,$0C,$FF,$21
         db $A9 : db $80,$8D,$15,$21,$A9,$FF,$F7,$8D
         db $01 : db $42,$F1,$02,$83,$21,$A9,$1F,$D7
         db $8D : db $2C,$21,$9C,$02,$2D,$E0,$0A,$30
         db $21 : db $FF,$A9,$42,$8D,$31,$21,$A9,$E0
         db $8D : db $FF,$32,$21,$AB,$60,$7B,$A8,$84
         db $25 : db $FF,$84,$27,$84,$29,$84,$2B,$84
         db $2D : db $FF,$84,$2F,$84,$15,$84,$04,$84
         db $06 : db $FF,$84,$08,$85,$33,$85,$18,$85
         db $19 : db $FF,$85,$1A,$85,$17,$85,$31,$85
         db $32 : db $FF,$85,$36,$84,$12,$84,$0E,$A9
         db $7E : db $FF,$85,$14,$A0,$FF,$FF,$84,$10
         db $20 : db $DF,$64,$78,$20,$70,$78,$F8,$01
         db $7B : db $8F,$FF,$16,$21,$00,$A8,$8F,$18
         db $21 : db $00,$3F,$C8,$C0,$00,$80,$D0,$F6
         db $35 : db $03,$70,$0C,$7F,$3D,$E8,$E0,$80
         db $0A : db $D0,$F7,$2C,$08,$FF,$AA,$A9,$1F
         db $01 : db $9D,$02,$3D,$E8,$BE,$58,$00,$E0
         db $80 : db $03,$D0,$F4,$95,$04,$00,$F7,$01
         db $9D : db $FC,$57,$18,$04,$01,$D0,$F4,$FC
         db $35 : db $03,$EF,$16,$A9,$43,$8D,$20,$43
         db $8D : db $EF,$30,$43,$8D,$40,$F0,$0A,$24
         db $43 : db $8D,$EF,$34,$43,$8D,$44,$F0,$0A
         db $27 : db $43,$8D,$FF,$37,$43,$8D,$47,$43
         db $A9 : db $0D,$8D,$FF,$21,$43,$A0,$E4,$78
         db $8C : db $22,$43,$FF,$A9,$0F,$8D,$31,$43
         db $A0 : db $EB,$78,$F7,$8C,$32,$43,$B2,$07
         db $41 : db $43,$A0,$F2,$FF,$78,$8C,$42,$43
         db $A9 : db $1C,$04,$31,$FF,$AB,$60,$E4,$00
         db $3D : db $FB,$90,$3E,$FF,$00,$E4,$80,$40
         db $FB : db $10,$42,$00,$FF,$E4,$00,$44,$FB
         db $90 : db $45,$00,$68,$FF,$20,$01,$7A,$A0
         db $30 : db $79,$84,$E7,$EF,$A9,$7F,$85,$E9
         db $F6 : db $02,$84,$EB,$A0,$FF,$00,$14,$84
         db $ED : db $A0,$00,$19,$20,$F5,$18,$DA,$00
         db $7B : db $DE,$20,$B0,$06,$84,$EB,$7F,$64
         db $ED : db $64,$EE,$A0,$00,$20,$F1,$08,$5B
         db $E0 : db $81,$DE,$48,$80,$00,$EC,$08,$11
         db $F1 : db $08,$AB,$C0,$1B,$DE,$28,$18,$00
         db $29 : db $00,$22,$11,$33,$EA,$DE,$28,$42
         db $00 : db $29,$40,$F1,$00,$7B,$AA,$C2,$FF
         db $20 : db $BF,$E1,$DA,$DF,$18,$69,$00,$BF
         db $DB : db $85,$E7,$E8,$E8,$E2,$58,$11,$69
         db $55 : db $DF,$E2,$08,$20,$00,$29,$30,$09
         db $11 : db $83,$DE,$28,$B5,$08,$00,$29,$28
         db $F1 : db $00,$20,$33,$0B,$01,$8B,$56,$DE
         db $48 : db $77,$07,$EC,$08,$05,$09,$11,$8D
         db $DE : db $20,$DB,$10,$11,$00,$21,$70,$67
         db $F1 : db $08,$F0,$9E,$D6,$DE,$20,$B8,$0F
         db $E7 : db $08,$70,$C7,$01,$60,$A0,$FF,$00
         db $F0 : db $84,$F3,$A9,$D8,$85,$F5,$F6,$37
         db $01 : db $84,$F6,$E0,$00,$F8,$22,$6D,$FF
         db $F5 : db $C2,$4D,$00,$98,$30,$08,$7B,$A8
         db $B7 : db $E7,$F7,$18,$65,$ED,$35,$10,$C8
         db $C4 : db $EB,$D0,$7D,$F1,$35,$03,$C2,$20
         db $A9 : db $00,$04,$30,$08,$3F,$20,$4C,$7A
         db $A9 : db $00,$0C,$16,$22,$3F,$08,$AF,$A8
         db $A9 : db $77,$07,$35,$20,$04,$B7,$04,$62
         db $BF : db $7A,$FE,$97,$7A,$FE,$0D,$60,$04
         db $33 : db $FF,$10,$00,$02,$33,$20,$00,$04
         db $33 : db $FF,$30,$00,$06,$33,$40,$00,$08
         db $33 : db $FF,$58,$00,$2A,$33,$68,$00,$2C
         db $33 : db $FF,$78,$00,$2E,$33,$00,$10,$20
         db $33 : db $FF,$10,$10,$22,$33,$20,$10,$24
         db $33 : db $FF,$30,$10,$26,$33,$40,$10,$28
         db $33 : db $AF,$04,$00,$10,$40,$64,$02,$42
         db $68 : db $02,$44,$B6,$6C,$02,$46,$33,$D8
         db $08 : db $40,$09,$DE,$28,$B0,$F6,$1B,$03
         db $7F : db $85,$ED,$00,$04,$84,$EF,$20,$43
         db $CC : db $62,$E8,$09,$DF,$18,$8A,$02,$01
         db $21 : db $64,$22,$11,$75,$53,$DE,$28,$22
         db $49 : db $49,$A0,$C0,$23,$81,$41,$F4,$6F
         db $09 : db $ED,$00,$7C,$93,$09,$2A,$7B,$A0
         db $C0 : db $8D,$75,$DE,$20,$70,$03,$00,$29
         db $DA : db $11,$11,$0A,$7C,$7E,$30,$08,$A2
         db $20 : db $02,$A9,$87,$3E,$35,$08,$E7,$CA
         db $D0 : db $F9,$72,$00,$58,$0C,$E8,$24,$86
         db $FF : db $20,$63,$10,$BD,$77,$5C,$4B,$FA
         db $FF : db $2A,$00,$00,$76,$26,$D4,$21,$B2
         db $FF : db $15,$00,$00,$EB,$0C,$88,$10,$63
         db $FE : db $3E,$FB,$10,$9F,$6F,$5F,$57,$FF
         db $46 : db $FF,$7E,$36,$1E,$26,$19,$32,$BB
         db $21 : db $FF,$9B,$15,$76,$1D,$36,$11,$F1
         db $10 : db $7F,$B0,$08,$AD,$08,$8B,$08,$50
         db $60 : db $04,$FC,$29,$0B,$58,$0C,$1E,$26
         db $9B : db $15,$F1,$10,$E6,$4E,$6C,$08,$21
         db $41 : db $1B,$89,$AB,$00,$00,$C6,$FF,$1C
         db $A5 : db $1C,$85,$1C,$84,$18,$64,$F9,$14
         db $A7 : db $0B,$A7,$3B,$5B,$56,$B4,$45,$2E
         db $DF : db $35,$00,$00,$DE,$66,$DB,$1B,$08
         db $31 : db $7F,$E8,$2C,$C7,$28,$A6,$24,$A5
         db $C8 : db $23,$BF,$BB,$21,$36,$11,$7F,$73
         db $E1 : db $BB,$7F,$FD,$73,$1B,$0C,$00,$00
         db $7E : db $36,$36,$11,$FF,$42,$0C,$41,$08
         db $CD : db $45,$6A,$3D,$FF,$28,$35,$28,$25
         db $E7 : db $2C,$E6,$24,$7F,$C5,$20,$C5,$18
         db $A3 : db $18,$83,$CC,$03

; Unused space
C28A60:  dd $FFFFFFFF
         dd $FFFFFFFF
         dd $FFFFFFFF
         dd $FFFFFFFF

; *****************************************
; Ending Cinematic Data (C2/8A70 - C2/953B)
; *****************************************

; Mode 7 animation script for aerial-view airship scene
C28A70:  dw $0480 : db $3C  ; x60 : Scroll up, zoom in
C28A73:  dw $0490 : db $3C  ; x60 : Scroll up, rotate CW, zoom in
C28A76:  dw $0490 : db $3C  ; x60 : Scroll up, rotate CW, zoom in
C28A79:  dw $0410 : db $1E  ; x30 : Scroll up, rotate CW
C28A7C:  dw $0450 : db $1E  ; x30 : Scroll up, rotate CW and FWD
C28A7F:  dw $0440 : db $1E  ; x30 : Scroll up, rotate FWD
C28A82:  dw $04C0 : db $3C  ; x60 : Scroll up, rotate FWD, zoom in
C28A85:  dw $0440 : db $3C  ; x60 : Scroll up, rotate FWD
C28A88:  dw $0400 : db $3C  ; x60 : Scroll up
C28A8B:  dw $8400 : db $1E  ; x30 : Scroll up, zoom out
C28A8E:  dw $8410 : db $1E  ; x30 : Scroll up, rotate CW, zoom out
C28A91:  dw $0410 : db $78  ; x120: Scroll up, rotate CW
C28A94:  dw $0400 : db $1E  ; x30 : Scroll up
C28A97:  dw $8400 : db $3C  ; x60 : Scroll up, zoom out
C28A9A:  dw $0400 : db $B4  ; x180: Scroll up
C28A9D:  dw $0400 : db $B4  ; x180: Scroll up
C28AA0:  dw $0400 : db $B4  ; x180: Scroll up
C28AA3:  dw $0400 : db $B4  ; x180: Scroll up
C28AA6:  dw $0400 : db $B4  ; x180: Scroll up
C28AA9:  dw $0400 : db $B4  ; x180: Scroll up
C28AAC:  dw $4400 : db $1E  ; x30 : Scroll up, rotate BWD
C28AAF:  dw $C400 : db $3C  ; x60 : Scroll up, rotate BWD, zoom out
C28AB2:  dw $4400 : db $3C  ; x60 : Scroll up, rotate BWD
C28AB5:  dw $0400 : db $3C  ; x60 : Scroll up
C28AB8:  dw $0500 : db $3C  ; x60 : Scroll NW
C28ABB:  dw $0420 : db $78  ; x120: Scroll up, rotate CCW
C28ABE:  dw $0480 : db $3C  ; x60 : Scroll up, zoom in
C28AC1:  dw $0400 : db $B4  ; ...
C28AC4:  dw $0400 : db $FE  ; Inf.: Scroll up

; Unused Mode 7 animation script
C28AC7:  dw $0090 : db $B4  ; x180: Rotate CW, zoom in
C28ACA:  dw $0410 : db $B4  ; x180: Scroll up, rotate CW
C28ACD:  dw $0450 : db $1E  ; x30 : Scroll up, rotate CW and FWD
C28AD0:  dw $0440 : db $B4  ; x180: Scroll up, rotate FWD
C28AD3:  dw $0400 : db $B4  ; ...
C28AD6:  dw $0400 : db $FE  ; Inf.: Scroll up

; Mode 7 animation script for boat scene
C28AD9:  dw $08C0 : db $3C  ; x60 : Scroll down, rotate FWD, zoom in
C28ADC:  dw $08C0 : db $3C  ; x60 : Scroll down, rotate FWD, zoom in
C28ADF:  dw $0800 : db $B4  ; x180: Scroll down
C28AE2:  dw $0800 : db $B4  ; x180: Scroll down
C28AE5:  dw $0800 : db $B4  ; x180: Scroll down
C28AE8:  dw $0020 : db $1E  ; x30 : Rotate CCW
C28AEB:  dw $0440 : db $1E  ; x30 : Scroll up, rotate FWD
C28AEE:  dw $0480 : db $3C  ; x60 : Scroll up, zoom in
C28AF1:  dw $0220 : db $61  ; x97 : Scroll right, rotate CCW
C28AF4:  dw $8200 : db $46  ; x70 : Scroll right, zoom out
C28AF7:  dw $0200 : db $FE  ; Inf.: Scroll right

; Mode 7 animation script for aerial-view plains scene
C28AFA:  dw $0800 : db $B4  ; x180: Scroll down
C28AFD:  dw $0800 : db $B4  ; x180: Scroll down
C28B00:  dw $0800 : db $B4  ; x180: Scroll down
C28B03:  dw $0800 : db $0A  ; x10 : Scroll down
C28B06:  dw $0800 : db $78  ; x120: Scroll down
C28B09:  dw $08C0 : db $5A  ; x90 : Scroll down, rotate FWD, zoom in
C28B0C:  dw $0840 : db $14  ; x20 : Scroll down, rotate FWD
C28B0F:  dw $0800 : db $B4  ; x180: Scroll down
C28B12:  dw $0800 : db $B4  ; x180: Scroll down
C28B15:  dw $0800 : db $B4  ; x180: Scroll down
C28B18:  dw $0800 : db $B4  ; x180: Scroll down
C28B1B:  dw $0810 : db $1E  ; x30 : Scroll down, rotate CW
C28B1E:  dw $0800 : db $B4  ; x180: Scroll down
C28B21:  dw $0800 : db $B4  ; x180: Scroll down
C28B24:  dw $0800 : db $B4  ; x180: Scroll down
C28B27:  dw $0800 : db $B4  ; x180: Scroll down
C28B2A:  dw $0800 : db $B4  ; x180: Scroll down
C28B2D:  dw $0820 : db $0A  ; x10 : Scroll down, rotate CCW
C28B30:  dw $0860 : db $1E  ; x30 : Scroll down, rotate CCW and FWD
C28B33:  dw $0800 : db $FE  ; Inf.: Scroll down

; Mode 7 animation script for skimming airship scene
C28B36:  dw $0100 : db $FE  ; Inf.: Scroll left

; Mode 7 animation script for frontview airship scene
C28B39:  dw $0400 : db $FE  ; Inf.: Scroll up

; Mode 7 animation script for panning clouds scene
C28B3C:  dw $0800 : db $B4  ; ...
C28B3F:  dw $0800 : db $FE  ; Inf.: Scroll down

; Mode 7 animation script for spining clouds scene
C28B42:  dw $0890 : db $FE  ; Inf.: Scroll down, rotate CW, zoom in

; Animation script for last book
C28B45:  dw $8B89    	; Frame B
C28B47:  db $08      	; Wait: 8
C28B48:  dw $8B91    	; Frame C
C28B4A:  db $08      	; Wait: 8
C28B4B:  dw $8B99    	; Frame D
C28B4D:  db $08      	; Wait: 8
C28B4E:  dw $8BA1    	; Frame E
C28B50:  db $08      	; Wait: 8
C28B51:  dw $8BA1    	; Bogus...
C28B53:  db $FF      	; Loop

; Animation script for stopping book
C28B54:  dw $8B89    	; Frame B
C28B56:  db $08      	; Wait: 8
C28B57:  dw $8B91    	; Frame C
C28B59:  db $08      	; Wait: 8
C28B5A:  dw $8B99    	; Frame D
C28B5C:  db $08      	; Wait: 8
C28B5D:  dw $8BA9    	; Frame F
C28B5F:  db $08      	; Wait: 8
C28B60:  dw $8B81    	; Frame A
C28B62:  db $FE      	; Freeze

; Animation script for first book
C28B63:  dw $8B89    	; Frame B
C28B65:  db $08      	; Wait: 8
C28B66:  dw $8B91    	; Frame C
C28B68:  db $08      	; Wait: 8
C28B69:  dw $8B99    	; Frame D
C28B6B:  db $08      	; Wait: 8
C28B6C:  dw $8BA1    	; Frame E
C28B6E:  db $08      	; Wait: 8
C28B6F:  dw $8BA1    	; Bogus...
C28B71:  db $FF      	; Loop

; Animation script for Strago's book
C28B72:  dw $8B89    	; Frame B
C28B74:  db $08      	; Wait: 8
C28B75:  dw $8B91    	; Frame C
C28B77:  db $08      	; Wait: 8
C28B78:  dw $8B99    	; Frame D
C28B7A:  db $08      	; Wait: 8
C28B7B:  dw $8BA1    	; Frame E
C28B7D:  db $08      	; Wait: 8
C28B7E:  dw $8BA1    	; Bogus...
C28B80:  db $FF      	; Loop

; Book frame A
C28B81:  dw $001C    	; Width: 14
C28B83:  dw $0006    	; Height: 6
C28B85:  dw $0BC8    	; Src: 7F/0BC8
C28B87:  dw $3AD9    	; Dst: 7E/3AD9

; Book frame B
C28B89:  dw $001C    	; Width: 14
C28B8B:  dw $0006    	; Height: 6
C28B8D:  dw $0BE4    	; Src: 7F/0BE4
C28B8F:  dw $3AD9    	; Dst: 7E/3AD9

; Book frame C
C28B91:  dw $001C    	; Width: 14
C28B93:  dw $0006    	; Height: 6
C28B95:  dw $0D48    	; Src: 7F/0D48
C28B97:  dw $3AD9    	; Dst: 7E/3AD9

; Book frame D
C28B99:  dw $001C    	; Width: 14
C28B9B:  dw $0006    	; Height: 6
C28B9D:  dw $0D64    	; Src: 7F/0D64
C28B9F:  dw $3AD9    	; Dst: 7E/3AD9

; Book frame E
C28BA1:  dw $001C    	; Width: 14
C28BA3:  dw $0006    	; Height: 6
C28BA5:  dw $0EC8    	; Src: 7F/0EC8
C28BA7:  dw $3AD9    	; Dst: 7E/3AD9

; Book frame F
C28BA9:  dw $001C    	; Width: 14
C28BAB:  dw $0006    	; Height: 6
C28BAD:  dw $0EE4    	; Src: 7F/0EE4
C28BAF:  dw $3AD9    	; Dst: 7E/3AD9

; Animation script for skimming airship
C28BB1:  dw $8BBA    	; Frame 1
C28BB3:  db $02      	; Wait: 2
C28BB4:  dw $8BD3    	; Frame 2
C28BB6:  db $02      	; Wait: 2
C28BB7:  dw $8BD3    	; Bogus...
C28BB9:  db $FF      	; Loop

; OAM for skimming airship, frame 1
C28BBA:  db $06      	; Tiles: 6
C28BBB:  dd $320C0080	; Tile 1
C28BBF:  dd $320E0090	; Tile 2
C28BC3:  dd $32201080	; Tile 3
C28BC7:  dd $32221090	; Tile 4
C28BCB:  dd $326C1808	; Tile 5
C28BCF:  dd $327C1818	; Tile 6

; OAM for skimming airship, frame 2
C28BD3:  db $06      	; Tiles: 6
C28BD4:  dd $320C0080	; Tile 1
C28BD8:  dd $320E0090	; Tile 2
C28BDC:  dd $32201080	; Tile 3
C28BE0:  dd $32221090	; Tile 4
C28BE4:  dd $326D1808	; Tile 5
C28BE8:  dd $327D1818	; Tile 6

; Animation script for skimming airship's shadow
C28BEC:  dw $8C01    	; Frame 1
C28BEE:  db $2B      	; Wait: 43
C28BEF:  dw $8C0A    	; Frame 2
C28BF1:  db $2B      	; Wait: 43
C28BF2:  dw $8C13    	; Frame 3
C28BF4:  db $2B      	; Wait: 43
C28BF5:  dw $8C1C    	; Frame 4
C28BF7:  db $2B      	; Wait: 43
C28BF8:  dw $8C13    	; Frame 5
C28BFA:  db $2B      	; Wait: 43
C28BFB:  dw $8C0A    	; Frame 6
C28BFD:  db $2B      	; Wait: 43
C28BFE:  dw $8C01    	; Bogus...
C28C00:  db $FF      	; Loop

; OAM for skimming airship's shadow, frame 1
C28C01:  db $02      	; Tiles: 2
C28C02:  dd $32700000	; Tile 1
C28C06:  dd $32710008	; Tile 2

; OAM for skimming airship's shadow, frame 2
C28C0A:  db $02      	; Tiles: 2
C28C0B:  dd $32720000	; Tile 1
C28C0F:  dd $32730008	; Tile 2

; OAM for skimming airship's shadow, frame 3
C28C13:  db $02      	; Tiles: 2
C28C14:  dd $32740000	; Tile 1
C28C18:  dd $32750008	; Tile 2

; OAM for skimming airship's shadow, frame 4
C28C1C:  db $02      	; Tiles: 2
C28C1D:  dd $32760000	; Tile 1
C28C21:  dd $32770008	; Tile 2

; Animation script for frontview airship
C28C25:  dw $8C2E    	; Frame 1
C28C27:  db $02      	; Wait: 2
C28C28:  dw $8C47    	; Frame 2
C28C2A:  db $02      	; Wait: 2
C28C2B:  dw $8C47    	; Bogus...
C28C2D:  db $FF      	; Loop

; OAM for frontview airship, frame 1
C28C2E:  db $06      	; Tiles: 6
C28C2F:  dd $720C0090	; Tile 1
C28C33:  dd $720E0080	; Tile 2
C28C37:  dd $72201090	; Tile 3
C28C3B:  dd $72221080	; Tile 4
C28C3F:  dd $726C1810	; Tile 5
C28C43:  dd $727C1800	; Tile 6

; OAM for frontview airship, frame 2
C28C47:  db $06      	; Tiles: 6
C28C48:  dd $720C0090	; Tile 1
C28C4C:  dd $720E0080	; Tile 2
C28C50:  dd $72201090	; Tile 3
C28C54:  dd $72221080	; Tile 4
C28C58:  dd $726D1810	; Tile 5
C28C5C:  dd $727D1800	; Tile 6

; Animation script for rearview airship
C28C60:  dw $8C63    	; Frame 1
C28C62:  db $FE      	; Freeze

; OAM for rearview airship
C28C63:  db $1E      	; Tiles: 30
C28C64:  dd $360038B0	; Tile 1
C28C68:  dd $360248B0	; Tile 2
C28C6C:  dd $360458B0	; Tile 3
C28C70:  dd $760038C0	; Tile 4
C28C74:  dd $760248C0	; Tile 5
C28C78:  dd $760458C0	; Tile 6
C28C7C:  dd $70C000B0	; Tile 7
C28C80:  dd $70C200A0	; Tile 8
C28C84:  dd $70C40090	; Tile 9
C28C88:  dd $70C610B0	; Tile 10
C28C8C:  dd $70C810A0	; Tile 11
C28C90:  dd $70CA1090	; Tile 12
C28C94:  dd $70CC20B0	; Tile 13
C28C98:  dd $70CE20A0	; Tile 14
C28C9C:  dd $70E030B0	; Tile 15
C28CA0:  dd $70E23028	; Tile 16
C28CA4:  dd $70E32090	; Tile 17
C28CA8:  dd $70E62888	; Tile 18
C28CAC:  dd $30C000C0	; Tile 19
C28CB0:  dd $30C200D0	; Tile 20
C28CB4:  dd $30C400E0	; Tile 21
C28CB8:  dd $30C610C0	; Tile 22
C28CBC:  dd $30C810D0	; Tile 23
C28CC0:  dd $30CA10E0	; Tile 24
C28CC4:  dd $30CC20C0	; Tile 25
C28CC8:  dd $30CE20D0	; Tile 26
C28CCC:  dd $30E030C0	; Tile 27
C28CD0:  dd $30E23050	; Tile 28
C28CD4:  dd $30E320E0	; Tile 29
C28CD8:  dd $30E628E8	; Tile 30

; Animation script for aerial-view airship
C28CDC:  dw $8CDF    	; Frame 1
C28CDE:  db $FE      	; Freeze

; OAM for aerial-view airship
C28CDF:  db $04      	; Tiles: 4
C28CE0:  dd $32080000	; Tile 1
C28CE4:  dd $32090008	; Tile 2
C28CE8:  dd $32180800	; Tile 3
C28CEC:  dd $32190808	; Tile 4

; Animation script for aerial-view airship's shadow
C28CF0:  dw $8CF9    	; Show shadow
C28CF2:  db $01      	; Wait: 1
C28CF3:  dw $8D0A    	; Hide shadow
C28CF5:  db $01      	; Wait: 1
C28CF6:  dw $8D0A    	; Bogus...
C28CF8:  db $FF      	; Loop

; OAM for aerial-view airship's shadow
C28CF9:  db $04      	; Tiles: 4
C28CFA:  dd $320A0000	; Tile 1
C28CFE:  dd $320B0008	; Tile 2
C28D02:  dd $321A0800	; Tile 3
C28D06:  dd $321B0808	; Tile 4

; Blank sprite A
C28D0A:  db $00      	; Tiles: 0

; Animation script for water spray
C28D0B:  dw $8D1A    	; Frame 1
C28D0D:  db $06      	; Wait: 6
C28D0E:  dw $8D23    	; Frame 2
C28D10:  db $06      	; Wait: 6
C28D11:  dw $8D2C    	; Frame 3
C28D13:  db $06      	; Wait: 6
C28D14:  dw $8D35    	; Frame 4
C28D16:  db $06      	; Wait: 6
C28D17:  dw $8D0A    	; Hide
C28D19:  db $FE      	; Freeze

; OAM for water spray, frame 1
C28D1A:  db $02      	; Tiles: 2
C28D1B:  dd $3E400080	; Tile 1
C28D1F:  dd $3E420090	; Tile 2

; OAM for water spray, frame 2
C28D23:  db $02      	; Tiles: 2
C28D24:  dd $3E440080	; Tile 1
C28D28:  dd $3E460090	; Tile 2

; OAM for water spray, frame 3
C28D2C:  db $02      	; Tiles: 2
C28D2D:  dd $3E480080	; Tile 1
C28D31:  dd $3E4A0090	; Tile 2

; OAM for water spray, frame 4
C28D35:  db $02      	; Tiles: 2
C28D36:  dd $3E4C0080	; Tile 1
C28D3A:  dd $3E4E0090	; Tile 2

; Animation script for west airship rotor
C28D3E:  dw $8D4D    	; Frame 1
C28D40:  db $01      	; Wait: 1
C28D41:  dw $8D5E    	; Frame 2
C28D43:  db $01      	; Wait: 1
C28D44:  dw $8D6F    	; Frame 3
C28D46:  db $01      	; Wait: 1
C28D47:  dw $8D80    	; Frame 4
C28D49:  db $01      	; Wait: 1
C28D4A:  dw $8D80    	; Bogus...
C28D4C:  db $FF      	; Loop

; OAM for west airship rotor, frame 1
C28D4D:  db $04      	; Tiles: 4
C28D4E:  dd $30800080	; Tile 1
C28D52:  dd $30820090	; Tile 2
C28D56:  dd $30A01080	; Tile 3
C28D5A:  dd $30A21090	; Tile 4

; OAM for west airship rotor, frame 2
C28D5E:  db $04      	; Tiles: 4
C28D5F:  dd $30840080	; Tile 1
C28D63:  dd $30860090	; Tile 2
C28D67:  dd $30A41080	; Tile 3
C28D6B:  dd $30A61090	; Tile 4

; OAM for west airship rotor, frame 3
C28D6F:  db $04      	; Tiles: 4
C28D70:  dd $30880080	; Tile 1
C28D74:  dd $308A0090	; Tile 2
C28D78:  dd $30A81080	; Tile 3
C28D7C:  dd $30AA1090	; Tile 4

; OAM for west airship rotor, frame 4
C28D80:  db $04      	; Tiles: 4
C28D81:  dd $308C0080	; Tile 1
C28D85:  dd $308E0090	; Tile 2
C28D89:  dd $30AC1080	; Tile 3
C28D8D:  dd $30AE1090	; Tile 4

; Animation script for east airship rotor
C28D91:  dw $8DA0    	; Frame 1
C28D93:  db $01      	; Wait: 1
C28D94:  dw $8DB1    	; Frame 2
C28D96:  db $01      	; Wait: 1
C28D97:  dw $8DC2    	; Frame 3
C28D99:  db $01      	; Wait: 1
C28D9A:  dw $8DD3    	; Frame 4
C28D9C:  db $01      	; Wait: 1
C28D9D:  dw $8DD3    	; Bogus...
C28D9F:  db $FF      	; Loop

; OAM for east airship rotor, frame 1
C28DA0:  db $04      	; Tiles: 4
C28DA1:  dd $70800090	; Tile 1
C28DA5:  dd $70820080	; Tile 2
C28DA9:  dd $70A01090	; Tile 3
C28DAD:  dd $70A21080	; Tile 4

; OAM for east airship rotor, frame 2
C28DB1:  db $04      	; Tiles: 4
C28DB2:  dd $70840090	; Tile 1
C28DB6:  dd $70860080	; Tile 2
C28DBA:  dd $70A41090	; Tile 3
C28DBE:  dd $70A61080	; Tile 4

; OAM for east airship rotor, frame 3
C28DC2:  db $04      	; Tiles: 4
C28DC3:  dd $70880090	; Tile 1
C28DC7:  dd $708A0080	; Tile 2
C28DCB:  dd $70A81090	; Tile 3
C28DCF:  dd $70AA1080	; Tile 4

; OAM for east airship rotor, frame 4
C28DD3:  db $04      	; Tiles: 4
C28DD4:  dd $708C0090	; Tile 1
C28DD8:  dd $708E0080	; Tile 2
C28DDC:  dd $70AC1090	; Tile 3
C28DE0:  dd $70AE1080	; Tile 4

; Pointers and positions for "Terra Branford"
C28DE4:  dw C28E3B   	; Terra Branford
C28DE6:  db $40      	; X: 64
C28DE7:  dw C28E3E   	; Blank
C28DE9:  db $00      	; X: 0

; Pointers and positions for "Locke Cole"
C28DEA:  dw C28E41   	; Locke Cole
C28DEC:  db $4C      	; X: 76
C28DED:  dw C28E44   	; Blank
C28DEF:  db $8C      	; X: 140

; Pointers and positions for "Cyan Garamonde"
C28DF0:  dw C28E47   	; Cyan
C28DF2:  db $38      	; X: 56
C28DF3:  dw C28E4A   	; Garamonde
C28DF5:  db $68      	; X: 104

; Pointers and positions for "Shadow"
C28DF6:  dw C28E4D   	; Shadow
C28DF8:  db $60      	; X: 96
C28DF9:  dw C28E50   	; Blank
C28DFB:  db $00      	; X: 0

; Pointers and positions for "Edgar Roni Figaro"
C28DFC:  dw C28E53   	; Edgar Roni
C28DFE:  db $30      	; X: 48
C28DFF:  dw C28E56   	; Figaro
C28E01:  db $98      	; X: 152

; Pointers and positions for "Sabin Rene Figaro"
C28E02:  dw C28E59   	; Sabin Rene
C28E04:  db $2C      	; X: 44
C28E05:  dw C28E5C   	; Figaro
C28E07:  db $90      	; X: 144

; Pointers and positions for "Celes Chere"
C28E08:  dw C28E5F   	; Celes Chere
C28E0A:  db $48      	; X: 72
C28E0B:  dw C28E62   	; Blank
C28E0D:  db $00      	; X: 0

; Pointers and positions for "Strago Magus"
C28E0E:  dw C28E65   	; Strago Magus
C28E10:  db $48      	; X: 72
C28E11:  dw C28E68   	; Blank
C28E13:  db $00      	; X: 0

; Pointers and positions for "Relm Arrowny"
C28E14:  dw C28E6B   	; Relm Arrowny
C28E16:  db $48      	; X: 72
C28E17:  dw C28E6E   	; Blank
C28E19:  db $00      	; X: 0

; Pointers and positions for "Setzer Gabbiani"
C28E1A:  dw C28E71   	; Setzer
C28E1C:  db $38      	; X: 56
C28E1D:  dw C28E74   	; Gabbiani
C28E1F:  db $78      	; X: 120

; Pointers and positions for "Mog"
C28E20:  dw C28E77   	; Mog
C28E22:  db $6C      	; X: 108
C28E23:  dw C28E7A   	; Blank
C28E25:  db $00      	; X: 0

; Pointers and positions for "Gau"
C28E26:  dw C28E7D   	; Gau
C28E28:  db $6C      	; X: 108
C28E29:  dw C28E80   	; Blank
C28E2B:  db $00      	; X: 0

; Pointers and positions for "Gogo"
C28E2C:  dw C28E83   	; Gogo
C28E2E:  db $68      	; X: 104
C28E2F:  dw C28E86   	; Blank
C28E31:  db $00      	; X: 0

; Pointers and positions for "Umaro"
C28E32:  dw C28E89   	; Umaro
C28E34:  db $64      	; X: 100
C28E35:  dw C28E8C   	; Blank
C28E37:  db $00      	; X: 0

; Animation table for "as"
C28E38:  dw C28E8F   	; Frame 1
C28E3A:  db $FE      	; Freeze

; Animation tables for "Terra Branford"
C28E3B:  dw C28E98   	; Terra Branford
C28E3D:  db $FE      	; Freeze
C28E3E:  dw C28F5A   	; Blank
C28E40:  db $FE      	; Freeze

; Animation tables for "Locke Cole"
C28E41:  dw C28F09   	; Locke Cole
C28E43:  db $FE      	; Freeze
C28E44:  dw C28F5A   	; Blank
C28E46:  db $FE      	; Freeze

; Animation tables for "Cyan Garamonde"
C28E47:  dw C28F5B   	; Cyan
C28E49:  db $FE      	; Freeze
C28E4A:  dw C28F80   	; Garamonde
C28E4C:  db $FE      	; Freeze

; Animation tables for "Shadow"
C28E4D:  dw C28FCD   	; Shadow
C28E4F:  db $FE      	; Freeze
C28E50:  dw C28F5A   	; Blank
C28E52:  db $FE      	; Freeze

; Animation tables for "Edgar Roni Figaro"
C28E53:  dw C29002   	; Edgar Roni
C28E55:  db $FE      	; Freeze
C28E56:  dw C29053   	; Figaro
C28E58:  db $FE      	; Freeze

; Animation tables for "Sabin Rene Figaro"
C28E59:  dw C29088   	; Sabin Rene
C28E5B:  db $FE      	; Freeze
C28E5C:  dw C29053   	; Figaro
C28E5E:  db $FE      	; Freeze

; Animation tables for "Celes Chere"
C28E5F:  dw C290D9   	; Celes Chere
C28E61:  db $FE      	; Freeze
C28E62:  dw C28F5A   	; Blank
C28E64:  db $FE      	; Freeze

; Animation tables for "Strago Magus"
C28E65:  dw C29132   	; Strago Magus
C28E67:  db $FE      	; Freeze
C28E68:  dw C28F5A   	; Blank
C28E6A:  db $FE      	; Freeze

; Animation tables for "Relm Arrowny"
C28E6B:  dw C29193   	; Relm Arrowny
C28E6D:  db $FE      	; Freeze
C28E6E:  dw C28F5A   	; Blank
C28E70:  db $FE      	; Freeze

; Animation tables for "Setzer Gabbiani"
C28E71:  dw C291F4   	; Setzer
C28E73:  db $FE      	; Freeze
C28E74:  dw C29229   	; Gabbiani
C28E76:  db $FE      	; Freeze

; Animation tables for "Mog"
C28E77:  dw C2926E   	; Mog
C28E79:  db $FE      	; Freeze
C28E7A:  dw C28F5A   	; Blank
C28E7C:  db $FE      	; Freeze

; Animation tables for "Gau"
C28E7D:  dw C2928B   	; Gau
C28E7F:  db $FE      	; Freeze
C28E80:  dw C28F5A   	; Blank
C28E82:  db $FE      	; Freeze

; Animation tables for "Gogo"
C28E83:  dw C292A8   	; Gogo
C28E85:  db $FE      	; Freeze
C28E86:  dw C28F5A   	; Blank
C28E88:  db $FE      	; Freeze

; Animation tables for "Umaro"
C28E89:  dw C292CD   	; Umaro
C28E8B:  db $FE      	; Freeze
C28E8C:  dw C28F5A   	; Blank
C28E8E:  db $FE      	; Freeze

; OAM for "as"
C28E8F:  db $02      	; Tiles: 2
C28E90:  dd $332A0000	; "a" (X+0, Y+0, tile 298, pal 1, prio 3, 8x8)
C28E94:  dd $332B0008	; "s" (X+8, Y+0, tile 299, pal 1, prio 3, 8x8)

; OAM for "Terra Branford"
C28E98:  db $1C      	; Tiles: 28
C28E99:  dd $31760080	; "T" part A (X+0,   Y+0,  tile 374, pal 0, prio 3, 16x16)
C28E9D:  dd $312C1000	; "T" part B (X+0,   Y+16, tile 300, pal 0, prio 3, 8x8)
C28EA1:  dd $312D1008	; "T" part C (X+8,   Y+16, tile 301, pal 0, prio 3, 8x8)
C28EA5:  dd $31040810	; "e" part A (X+16,  Y+8,  tile 260, pal 0, prio 3, 8x8)
C28EA9:  dd $31141010	; "e" part B (X+16,  Y+16, tile 276, pal 0, prio 3, 8x8)
C28EAD:  dd $31210818	; "r" part A (X+24,  Y+8,  tile 289, pal 0, prio 3, 8x8)
C28EB1:  dd $31311018	; "r" part B (X+24,  Y+16, tile 305, pal 0, prio 3, 8x8)
C28EB5:  dd $31210820	; "r" part A (X+32,  Y+8,  tile 289, pal 0, prio 3, 8x8)
C28EB9:  dd $31311020	; "r" part B (X+32,  Y+16, tile 305, pal 0, prio 3, 8x8)
C28EBD:  dd $31000828	; "a" part A (X+40,  Y+8,  tile 256, pal 0, prio 3, 8x8)
C28EC1:  dd $31101028	; "a" part B (X+40,  Y+16, tile 272, pal 0, prio 3, 8x8)
C28EC5:  dd $314200B8	; "B" part A (X+56,  Y+0,  tile 322, pal 0, prio 3, 16x16)
C28EC9:  dd $31621038	; "B" part B (X+56,  Y+16, tile 354, pal 0, prio 3, 8x8)
C28ECD:  dd $31631040	; "B" part C (X+64,  Y+16, tile 355, pal 0, prio 3, 8x8)
C28ED1:  dd $31210848	; "r" part A (X+72,  Y+8,  tile 289, pal 0, prio 3, 8x8)
C28ED5:  dd $31311048	; "r" part B (X+72,  Y+16, tile 305, pal 0, prio 3, 8x8)
C28ED9:  dd $31000850	; "a" part A (X+80,  Y+8,  tile 256, pal 0, prio 3, 8x8)
C28EDD:  dd $31101050	; "a" part B (X+80,  Y+16, tile 272, pal 0, prio 3, 8x8)
C28EE1:  dd $310D0858	; "n" part A (X+88,  Y+8,  tile 269, pal 0, prio 3, 8x8)
C28EE5:  dd $311D1058	; "n" part B (X+88,  Y+16, tile 285, pal 0, prio 3, 8x8)
C28EE9:  dd $31050860	; "f" part A (X+96,  Y+8,  tile 261, pal 0, prio 3, 8x8)
C28EED:  dd $31151060	; "f" part B (X+96,  Y+16, tile 277, pal 0, prio 3, 8x8)
C28EF1:  dd $310E0868	; "o" part A (X+104, Y+8,  tile 270, pal 0, prio 3, 8x8)
C28EF5:  dd $311E1068	; "o" part B (X+104, Y+16, tile 286, pal 0, prio 3, 8x8)
C28EF9:  dd $31210870	; "r" part A (X+112, Y+8,  tile 289, pal 0, prio 3, 8x8)
C28EFD:  dd $31311070	; "r" part B (X+112, Y+16, tile 305, pal 0, prio 3, 8x8)
C28F01:  dd $31030878	; "d" part A (X+120, Y+8,  tile 259, pal 0, prio 3, 8x8)
C28F05:  dd $31131078	; "d" part B (X+120, Y+16, tile 275, pal 0, prio 3, 8x8)

; OAM for "Locke Cole"
C28F09:  db $14      	; Tiles: 20
C28F0A:  dd $314E0080	; "L" part A (X+0,  Y+0,  tile 334, pal 0, prio 3, 16x16)
C28F0E:  dd $316E1000	; "L" part B (X+0,  Y+16, tile 366, pal 0, prio 3, 8x8)
C28F12:  dd $316F1008	; "L" part C (X+8,  Y+16, tile 367, pal 0, prio 3, 8x8)
C28F16:  dd $310E0810	; "o" part A (X+16, Y+8,  tile 270, pal 0, prio 3, 8x8)
C28F1A:  dd $311E1010	; "o" part B (X+16, Y+16, tile 286, pal 0, prio 3, 8x8)
C28F1E:  dd $31020818	; "c" part A (X+24, Y+8,  tile 258, pal 0, prio 3, 8x8)
C28F22:  dd $31121018	; "c" part B (X+24, Y+16, tile 274, pal 0, prio 3, 8x8)
C28F26:  dd $310A0820	; "k" part A (X+32, Y+8,  tile 266, pal 0, prio 3, 8x8)
C28F2A:  dd $311A1020	; "k" part B (X+32, Y+16, tile 282, pal 0, prio 3, 8x8)
C28F2E:  dd $31040828	; "e" part A (X+40, Y+8,  tile 260, pal 0, prio 3, 8x8)
C28F32:  dd $31141028	; "e" part B (X+40, Y+16, tile 276, pal 0, prio 3, 8x8)
C28F36:  dd $314400B8	; "C" part A (X+56, Y+0,  tile 324, pal 0, prio 3, 16x16)
C28F3A:  dd $31641038	; "C" part B (X+56, Y+16, tile 356, pal 0, prio 3, 8x8)
C28F3E:  dd $31651040	; "C" part C (X+64, Y+16, tile 357, pal 0, prio 3, 8x8)
C28F42:  dd $310E0848	; "o" part A (X+72, Y+8,  tile 270, pal 0, prio 3, 8x8)
C28F46:  dd $311E1048	; "o" part B (X+72, Y+16, tile 286, pal 0, prio 3, 8x8)
C28F4A:  dd $310B0850	; "l" part A (X+80, Y+8,  tile 267, pal 0, prio 3, 8x8)
C28F4E:  dd $311B1050	; "l" part B (X+80, Y+16, tile 283, pal 0, prio 3, 8x8)
C28F52:  dd $31040858	; "e" part A (X+88, Y+8,  tile 260, pal 0, prio 3, 8x8)
C28F56:  dd $31141058	; "e" part B (X+88, Y+16, tile 276, pal 0, prio 3, 8x8)

; Blank sprite B
C28F5A:  db $00      	; Tiles: 0

; OAM for "Cyan"
C28F5B:  db $09      	; Tiles: 9
C28F5C:  dd $31440080	; "C" part A (X+0,  Y+0,  tile 324, pal 0, prio 3, 16x16)
C28F60:  dd $31641000	; "C" part B (X+0,  Y+16, tile 356, pal 0, prio 3, 8x8)
C28F64:  dd $31651008	; "C" part C (X+8,  Y+16, tile 357, pal 0, prio 3, 8x8)
C28F68:  dd $31280810	; "y" part A (X+16, Y+8,  tile 296, pal 0, prio 3, 8x8)
C28F6C:  dd $31381010	; "y" part B (X+16, Y+16, tile 312, pal 0, prio 3, 8x8)
C28F70:  dd $31000818	; "a" part A (X+24, Y+8,  tile 256, pal 0, prio 3, 8x8)
C28F74:  dd $31101018	; "a" part B (X+24, Y+16, tile 272, pal 0, prio 3, 8x8)
C28F78:  dd $310D0820	; "n" part A (X+32, Y+8,  tile 269, pal 0, prio 3, 8x8)
C28F7C:  dd $311D1020	; "n" part B (X+32, Y+16, tile 285, pal 0, prio 3, 8x8)

; OAM for "Garamonde"
C28F80:  db $13      	; Tiles: 19
C28F81:  dd $314C0080	; "G" part A (X+0,  Y+0,  tile 332, pal 0, prio 3, 16x16)
C28F85:  dd $316C1000	; "G" part B (X+0,  Y+16, tile 364, pal 0, prio 3, 8x8)
C28F89:  dd $316D1008	; "G" part C (X+8,  Y+16, tile 365, pal 0, prio 3, 8x8)
C28F8D:  dd $31000810	; "a" part A (X+16, Y+8,  tile 256, pal 0, prio 3, 8x8)
C28F91:  dd $31101010	; "a" part B (X+16, Y+16, tile 272, pal 0, prio 3, 8x8)
C28F95:  dd $31210818	; "r" part A (X+24, Y+8,  tile 289, pal 0, prio 3, 8x8)
C28F99:  dd $31311018	; "r" part B (X+24, Y+16, tile 305, pal 0, prio 3, 8x8)
C28F9D:  dd $31000820	; "a" part A (X+32, Y+8,  tile 256, pal 0, prio 3, 8x8)
C28FA1:  dd $31101020	; "a" part B (X+32, Y+16, tile 272, pal 0, prio 3, 8x8)
C28FA5:  dd $310C0828	; "m" part A (X+40, Y+8,  tile 268, pal 0, prio 3, 8x8)
C28FA9:  dd $311C1028	; "m" part B (X+40, Y+16, tile 284, pal 0, prio 3, 8x8)
C28FAD:  dd $310E0830	; "o" part A (X+48, Y+8,  tile 270, pal 0, prio 3, 8x8)
C28FB1:  dd $311E1030	; "o" part B (X+48, Y+16, tile 286, pal 0, prio 3, 8x8)
C28FB5:  dd $310D0838	; "n" part A (X+56, Y+8,  tile 269, pal 0, prio 3, 8x8)
C28FB9:  dd $311D1038	; "n" part B (X+56, Y+16, tile 285, pal 0, prio 3, 8x8)
C28FBD:  dd $31030840	; "d" part A (X+64, Y+8,  tile 259, pal 0, prio 3, 8x8)
C28FC1:  dd $31131040	; "d" part B (X+64, Y+16, tile 275, pal 0, prio 3, 8x8)
C28FC5:  dd $31040848	; "e" part A (X+72, Y+8,  tile 260, pal 0, prio 3, 8x8)
C28FC9:  dd $31141048	; "e" part B (X+72, Y+16, tile 276, pal 0, prio 3, 8x8)

; OAM for "Shadow"
C28FCD:  db $0D      	; Tiles: 13
C28FCE:  dd $31740080	; "S" part A (X+0,  Y+0,  tile 372, pal 0, prio 3, 16x16)
C28FD2:  dd $313E1000	; "S" part B (X+0,  Y+16, tile 318, pal 0, prio 3, 8x8)
C28FD6:  dd $313F1008	; "S" part C (X+8,  Y+16, tile 319, pal 0, prio 3, 8x8)
C28FDA:  dd $31070810	; "h" part A (X+16, Y+8,  tile 263, pal 0, prio 3, 8x8)
C28FDE:  dd $31171010	; "h" part B (X+16, Y+16, tile 279, pal 0, prio 3, 8x8)
C28FE2:  dd $31000818	; "a" part A (X+24, Y+8,  tile 256, pal 0, prio 3, 8x8)
C28FE6:  dd $31101018	; "a" part B (X+24, Y+16, tile 272, pal 0, prio 3, 8x8)
C28FEA:  dd $31030820	; "d" part A (X+32, Y+8,  tile 259, pal 0, prio 3, 8x8)
C28FEE:  dd $31131020	; "d" part B (X+32, Y+16, tile 275, pal 0, prio 3, 8x8)
C28FF2:  dd $310E0828	; "o" part A (X+40, Y+8,  tile 270, pal 0, prio 3, 8x8)
C28FF6:  dd $311E1028	; "o" part B (X+40, Y+16, tile 286, pal 0, prio 3, 8x8)
C28FFA:  dd $31260830	; "w" part A (X+48, Y+8,  tile 294, pal 0, prio 3, 8x8)
C28FFE:  dd $31361030	; "w" part B (X+48, Y+16, tile 310, pal 0, prio 3, 8x8)

; OAM for "Edgar Roni"
C29002:  db $14      	; Tiles: 20
C29003:  dd $31480080	; "E" part A (X+0,  Y+0,  tile 328, pal 0, prio 3, 16x16)
C29007:  dd $31681000	; "E" part B (X+0,  Y+16, tile 360, pal 0, prio 3, 8x8)
C2900B:  dd $31691008	; "E" part C (X+8,  Y+16, tile 361, pal 0, prio 3, 8x8)
C2900F:  dd $31030810	; "d" part A (X+16, Y+8,  tile 259, pal 0, prio 3, 8x8)
C29013:  dd $31131010	; "d" part B (X+16, Y+16, tile 275, pal 0, prio 3, 8x8)
C29017:  dd $31060818	; "g" part A (X+24, Y+8,  tile 262, pal 0, prio 3, 8x8)
C2901B:  dd $31161018	; "g" part B (X+24, Y+16, tile 278, pal 0, prio 3, 8x8)
C2901F:  dd $31000820	; "a" part A (X+32, Y+8,  tile 256, pal 0, prio 3, 8x8)
C29023:  dd $31101020	; "a" part B (X+32, Y+16, tile 272, pal 0, prio 3, 8x8)
C29027:  dd $31210828	; "r" part A (X+40, Y+8,  tile 289, pal 0, prio 3, 8x8)
C2902B:  dd $31311028	; "r" part B (X+40, Y+16, tile 305, pal 0, prio 3, 8x8)
C2902F:  dd $317200B8	; "R" part A (X+56, Y+0,  tile 370, pal 0, prio 3, 16x16)
C29033:  dd $313C1038	; "R" part B (X+56, Y+16, tile 316, pal 0, prio 3, 8x8)
C29037:  dd $313D1040	; "R" part C (X+64, Y+16, tile 317, pal 0, prio 3, 8x8)
C2903B:  dd $310E0848	; "o" part A (X+72, Y+8,  tile 270, pal 0, prio 3, 8x8)
C2903F:  dd $311E1048	; "o" part B (X+72, Y+16, tile 286, pal 0, prio 3, 8x8)
C29043:  dd $310D0850	; "n" part A (X+80, Y+8,  tile 269, pal 0, prio 3, 8x8)
C29047:  dd $311D1050	; "n" part B (X+80, Y+16, tile 285, pal 0, prio 3, 8x8)
C2904B:  dd $31080858	; "i" part A (X+88, Y+8,  tile 264, pal 0, prio 3, 8x8)
C2904F:  dd $31181058	; "i" part B (X+88, Y+16, tile 280, pal 0, prio 3, 8x8)

; OAM for "Figaro"
C29053:  db $0D      	; Tiles: 13
C29054:  dd $314A0080	; "F" part A (X+0,  Y+0,  tile 330, pal 0, prio 3, 16x16)
C29058:  dd $316A1000	; "F" part B (X+0,  Y+16, tile 362, pal 0, prio 3, 8x8)
C2905C:  dd $316B1008	; "F" part C (X+8,  Y+16, tile 363, pal 0, prio 3, 8x8)
C29060:  dd $31080810	; "i" part A (X+16, Y+8,  tile 264, pal 0, prio 3, 8x8)
C29064:  dd $31181010	; "i" part B (X+16, Y+16, tile 280, pal 0, prio 3, 8x8)
C29068:  dd $31060818	; "g" part A (X+24, Y+8,  tile 262, pal 0, prio 3, 8x8)
C2906C:  dd $31161018	; "g" part B (X+24, Y+16, tile 278, pal 0, prio 3, 8x8)
C29070:  dd $31000820	; "a" part A (X+32, Y+8,  tile 256, pal 0, prio 3, 8x8)
C29074:  dd $31101020	; "a" part B (X+32, Y+16, tile 272, pal 0, prio 3, 8x8)
C29078:  dd $31210828	; "r" part A (X+40, Y+8,  tile 289, pal 0, prio 3, 8x8)
C2907C:  dd $31311028	; "r" part B (X+40, Y+16, tile 305, pal 0, prio 3, 8x8)
C29080:  dd $310E0830	; "o" part A (X+48, Y+8,  tile 270, pal 0, prio 3, 8x8)
C29084:  dd $311E1030	; "o" part B (X+48, Y+16, tile 286, pal 0, prio 3, 8x8)

; OAM for "Sabin Rene"
C29088:  db $14      	; Tiles: 20
C29089:  dd $31740080	; "S" part A (X+0,  Y+0,  tile 372, pal 0, prio 3, 16x16)
C2908D:  dd $313E1000	; "S" part B (X+0,  Y+16, tile 318, pal 0, prio 3, 8x8)
C29091:  dd $313F1008	; "S" part C (X+8,  Y+16, tile 319, pal 0, prio 3, 8x8)
C29095:  dd $31000810	; "a" part A (X+16, Y+8,  tile 256, pal 0, prio 3, 8x8)
C29099:  dd $31101010	; "a" part B (X+16, Y+16, tile 272, pal 0, prio 3, 8x8)
C2909D:  dd $31010818	; "b" part A (X+24, Y+8,  tile 257, pal 0, prio 3, 8x8)
C290A1:  dd $31111018	; "b" part B (X+24, Y+16, tile 273, pal 0, prio 3, 8x8)
C290A5:  dd $31080820	; "i" part A (X+32, Y+8,  tile 264, pal 0, prio 3, 8x8)
C290A9:  dd $31181020	; "i" part B (X+32, Y+16, tile 280, pal 0, prio 3, 8x8)
C290AD:  dd $310D0828	; "n" part A (X+40, Y+8,  tile 269, pal 0, prio 3, 8x8)
C290B1:  dd $311D1028	; "n" part B (X+40, Y+16, tile 285, pal 0, prio 3, 8x8)
C290B5:  dd $317200B8	; "R" part A (X+56, Y+0,  tile 370, pal 0, prio 3, 16x16)
C290B9:  dd $313C1038	; "R" part B (X+56, Y+16, tile 316, pal 0, prio 3, 8x8)
C290BD:  dd $313D1040	; "R" part C (X+64, Y+16, tile 317, pal 0, prio 3, 8x8)
C290C1:  dd $31040848	; "e" part A (X+72, Y+8,  tile 260, pal 0, prio 3, 8x8)
C290C5:  dd $31141048	; "e" part B (X+72, Y+16, tile 276, pal 0, prio 3, 8x8)
C290C9:  dd $310D0850	; "n" part A (X+80, Y+8,  tile 269, pal 0, prio 3, 8x8)
C290CD:  dd $311D1050	; "n" part B (X+80, Y+16, tile 285, pal 0, prio 3, 8x8)
C290D1:  dd $31040858	; "e" part A (X+88, Y+8,  tile 260, pal 0, prio 3, 8x8)
C290D5:  dd $31141058	; "e" part B (X+88, Y+16, tile 276, pal 0, prio 3, 8x8)

; OAM for "Celes Chere"
C290D9:  db $16      	; Tiles: 22
C290DA:  dd $31440080	; "C" part A (X+0,  Y+0,  tile 324, pal 0, prio 3, 16x16)
C290DE:  dd $31641000	; "C" part B (X+0,  Y+16, tile 356, pal 0, prio 3, 8x8)
C290E2:  dd $31651008	; "C" part C (X+8,  Y+16, tile 357, pal 0, prio 3, 8x8)
C290E6:  dd $31040810	; "e" part A (X+16, Y+8,  tile 260, pal 0, prio 3, 8x8)
C290EA:  dd $31141010	; "e" part B (X+16, Y+16, tile 276, pal 0, prio 3, 8x8)
C290EE:  dd $310B0818	; "l" part A (X+24, Y+8,  tile 267, pal 0, prio 3, 8x8)
C290F2:  dd $311B1018	; "l" part B (X+24, Y+16, tile 283, pal 0, prio 3, 8x8)
C290F6:  dd $31040820	; "e" part A (X+32, Y+8,  tile 260, pal 0, prio 3, 8x8)
C290FA:  dd $31141020	; "e" part B (X+32, Y+16, tile 276, pal 0, prio 3, 8x8)
C290FE:  dd $31220828	; "s" part A (X+40, Y+8,  tile 290, pal 0, prio 3, 8x8)
C29102:  dd $31321028	; "s" part B (X+40, Y+16, tile 306, pal 0, prio 3, 8x8)
C29106:  dd $314400B8	; "C" part A (X+56, Y+0,  tile 324, pal 0, prio 3, 16x16)
C2910A:  dd $31641038	; "C" part B (X+56, Y+16, tile 356, pal 0, prio 3, 8x8)
C2910E:  dd $31651040	; "C" part C (X+64, Y+16, tile 357, pal 0, prio 3, 8x8)
C29112:  dd $31070848	; "h" part A (X+72, Y+8,  tile 263, pal 0, prio 3, 8x8)
C29116:  dd $31171048	; "h" part B (X+72, Y+16, tile 279, pal 0, prio 3, 8x8)
C2911A:  dd $31040850	; "e" part A (X+80, Y+8,  tile 260, pal 0, prio 3, 8x8)
C2911E:  dd $31141050	; "e" part B (X+80, Y+16, tile 276, pal 0, prio 3, 8x8)
C29122:  dd $31210858	; "r" part A (X+88, Y+8,  tile 289, pal 0, prio 3, 8x8)
C29126:  dd $31311058	; "r" part B (X+88, Y+16, tile 305, pal 0, prio 3, 8x8)
C2912A:  dd $31040860	; "e" part A (X+96, Y+8,  tile 260, pal 0, prio 3, 8x8)
C2912E:  dd $31141060	; "e" part B (X+96, Y+16, tile 276, pal 0, prio 3, 8x8)

; OAM for "Strago Magus"
C29132:  db $18      	; Tiles: 24
C29133:  dd $31740080	; "S" part A (X+0,   Y+0,  tile 372, pal 0, prio 3, 16x16)
C29137:  dd $313E1000	; "S" part B (X+0,   Y+16, tile 318, pal 0, prio 3, 8x8)
C2913B:  dd $313F1008	; "S" part C (X+8,   Y+16, tile 319, pal 0, prio 3, 8x8)
C2913F:  dd $31230810	; "t" part A (X+16,  Y+8,  tile 291, pal 0, prio 3, 8x8)
C29143:  dd $31331010	; "t" part B (X+16,  Y+16, tile 307, pal 0, prio 3, 8x8)
C29147:  dd $31210818	; "r" part A (X+24,  Y+8,  tile 289, pal 0, prio 3, 8x8)
C2914B:  dd $31311018	; "r" part B (X+24,  Y+16, tile 305, pal 0, prio 3, 8x8)
C2914F:  dd $31000820	; "a" part A (X+32,  Y+8,  tile 256, pal 0, prio 3, 8x8)
C29153:  dd $31101020	; "a" part B (X+32,  Y+16, tile 272, pal 0, prio 3, 8x8)
C29157:  dd $31060828	; "g" part A (X+40,  Y+8,  tile 262, pal 0, prio 3, 8x8)
C2915B:  dd $31161028	; "g" part B (X+40,  Y+16, tile 278, pal 0, prio 3, 8x8)
C2915F:  dd $310E0830	; "o" part A (X+48,  Y+8,  tile 270, pal 0, prio 3, 8x8)
C29163:  dd $311E1030	; "o" part B (X+48,  Y+16, tile 286, pal 0, prio 3, 8x8)
C29167:  dd $317000C0	; "M" part A (X+64,  Y+0,  tile 368, pal 0, prio 3, 16x16)
C2916B:  dd $313A1040	; "M" part B (X+64,  Y+16, tile 314, pal 0, prio 3, 8x8)
C2916F:  dd $313B1048	; "M" part C (X+72,  Y+16, tile 315, pal 0, prio 3, 8x8)
C29173:  dd $31000850	; "a" part A (X+80,  Y+8,  tile 256, pal 0, prio 3, 8x8)
C29177:  dd $31101050	; "a" part B (X+80,  Y+16, tile 272, pal 0, prio 3, 8x8)
C2917B:  dd $31060858	; "g" part A (X+88,  Y+8,  tile 262, pal 0, prio 3, 8x8)
C2917F:  dd $31161058	; "g" part B (X+88,  Y+16, tile 278, pal 0, prio 3, 8x8)
C29183:  dd $31240860	; "u" part A (X+96,  Y+8,  tile 292, pal 0, prio 3, 8x8)
C29187:  dd $31341060	; "u" part B (X+96,  Y+16, tile 308, pal 0, prio 3, 8x8)
C2918B:  dd $31220868	; "s" part A (X+104, Y+8,  tile 290, pal 0, prio 3, 8x8)
C2918F:  dd $31321068	; "s" part B (X+104, Y+16, tile 306, pal 0, prio 3, 8x8)

; OAM for "Relm Arrowny"
C29193:  db $18      	; Tiles: 24
C29194:  dd $31720080	; "R" part A (X+0,   Y+0,  tile 370, pal 0, prio 3, 16x16)
C29198:  dd $313C1000	; "R" part B (X+0,   Y+16, tile 316, pal 0, prio 3, 8x8)
C2919C:  dd $313D1008	; "R" part C (X+8,   Y+16, tile 317, pal 0, prio 3, 8x8)
C291A0:  dd $31040810	; "e" part A (X+16,  Y+8,  tile 260, pal 0, prio 3, 8x8)
C291A4:  dd $31141010	; "e" part B (X+16,  Y+16, tile 276, pal 0, prio 3, 8x8)
C291A8:  dd $310B0818	; "l" part A (X+24,  Y+8,  tile 267, pal 0, prio 3, 8x8)
C291AC:  dd $311B1018	; "l" part B (X+24,  Y+16, tile 283, pal 0, prio 3, 8x8)
C291B0:  dd $310C0820	; "m" part A (X+32,  Y+8,  tile 268, pal 0, prio 3, 8x8)
C291B4:  dd $311C1020	; "m" part B (X+32,  Y+16, tile 284, pal 0, prio 3, 8x8)
C291B8:  dd $314000B0	; "A" part A (X+48,  Y+0,  tile 260, pal 0, prio 3, 16x16)
C291BC:  dd $31601030	; "A" part B (X+48,  Y+16, tile 262, pal 0, prio 3, 8x8)
C291C0:  dd $31611038	; "A" part C (X+56,  Y+16, tile 263, pal 0, prio 3, 8x8)
C291C4:  dd $31210840	; "r" part A (X+64,  Y+8,  tile 289, pal 0, prio 3, 8x8)
C291C8:  dd $31311040	; "r" part B (X+64,  Y+16, tile 305, pal 0, prio 3, 8x8)
C291CC:  dd $31210848	; "r" part A (X+72,  Y+8,  tile 289, pal 0, prio 3, 8x8)
C291D0:  dd $31311048	; "r" part B (X+72,  Y+16, tile 305, pal 0, prio 3, 8x8)
C291D4:  dd $310E0850	; "o" part A (X+80,  Y+8,  tile 270, pal 0, prio 3, 8x8)
C291D8:  dd $311E1050	; "o" part B (X+80,  Y+16, tile 286, pal 0, prio 3, 8x8)
C291DC:  dd $31260858	; "w" part A (X+88,  Y+8,  tile 294, pal 0, prio 3, 8x8)
C291E0:  dd $31361058	; "w" part B (X+88,  Y+16, tile 310, pal 0, prio 3, 8x8)
C291E4:  dd $310D0860	; "n" part A (X+96,  Y+8,  tile 269, pal 0, prio 3, 8x8)
C291E8:  dd $311D1060	; "n" part B (X+96,  Y+16, tile 285, pal 0, prio 3, 8x8)
C291EC:  dd $31280868	; "y" part A (X+104, Y+8,  tile 296, pal 0, prio 3, 8x8)
C291F0:  dd $31381068	; "y" part B (X+104, Y+16, tile 312, pal 0, prio 3, 8x8)

; OAM for "Setzer"
C291F4:  db $0D      	; Tiles: 13
C291F5:  dd $31740080	; "S" part A (X+0,  Y+0,  tile 372, pal 0, prio 3, 16x16)
C291F9:  dd $313E1000	; "S" part B (X+0,  Y+16, tile 318, pal 0, prio 3, 8x8)
C291FD:  dd $313F1008	; "S" part C (X+8,  Y+16, tile 319, pal 0, prio 3, 8x8)
C29201:  dd $31040810	; "e" part A (X+16, Y+8,  tile 260, pal 0, prio 3, 8x8)
C29205:  dd $31141010	; "e" part B (X+16, Y+16, tile 276, pal 0, prio 3, 8x8)
C29209:  dd $31230818	; "t" part A (X+24, Y+8,  tile 291, pal 0, prio 3, 8x8)
C2920D:  dd $31331018	; "t" part B (X+24, Y+16, tile 307, pal 0, prio 3, 8x8)
C29211:  dd $31290820	; "z" part A (X+32, Y+8,  tile 297, pal 0, prio 3, 8x8)
C29215:  dd $31391020	; "z" part B (X+32, Y+16, tile 313, pal 0, prio 3, 8x8)
C29219:  dd $31040828	; "e" part A (X+40, Y+8,  tile 260, pal 0, prio 3, 8x8)
C2921D:  dd $31141028	; "e" part B (X+40, Y+16, tile 276, pal 0, prio 3, 8x8)
C29221:  dd $31210830	; "r" part A (X+48, Y+8,  tile 289, pal 0, prio 3, 8x8)
C29225:  dd $31311030	; "r" part B (X+48, Y+16, tile 305, pal 0, prio 3, 8x8)

; OAM for "Gabbiani"
C29229:  db $11      	; Tiles: 17
C2922A:  dd $314C0080	; "G" part A (X+0,  Y+0,  tile 332, pal 0, prio 3, 16x16)
C2922E:  dd $316C1000	; "G" part B (X+0,  Y+16, tile 364, pal 0, prio 3, 8x8)
C29232:  dd $316D1008	; "G" part C (X+8,  Y+16, tile 365, pal 0, prio 3, 8x8)
C29236:  dd $31000810	; "a" part A (X+16, Y+8,  tile 256, pal 0, prio 3, 8x8)
C2923A:  dd $31101010	; "a" part B (X+16, Y+16, tile 272, pal 0, prio 3, 8x8)
C2923E:  dd $31010818	; "b" part A (X+24, Y+8,  tile 257, pal 0, prio 3, 8x8)
C29242:  dd $31111018	; "b" part B (X+24, Y+16, tile 273, pal 0, prio 3, 8x8)
C29246:  dd $31010820	; "b" part A (X+32, Y+8,  tile 257, pal 0, prio 3, 8x8)
C2924A:  dd $31111020	; "b" part B (X+32, Y+16, tile 273, pal 0, prio 3, 8x8)
C2924E:  dd $31080828	; "i" part A (X+40, Y+8,  tile 264, pal 0, prio 3, 8x8)
C29252:  dd $31181028	; "i" part B (X+40, Y+16, tile 280, pal 0, prio 3, 8x8)
C29256:  dd $31000830	; "a" part A (X+48, Y+8,  tile 256, pal 0, prio 3, 8x8)
C2925A:  dd $31101030	; "a" part B (X+48, Y+16, tile 272, pal 0, prio 3, 8x8)
C2925E:  dd $310D0838	; "n" part A (X+56, Y+8,  tile 269, pal 0, prio 3, 8x8)
C29262:  dd $311D1038	; "n" part B (X+56, Y+16, tile 285, pal 0, prio 3, 8x8)
C29266:  dd $31080840	; "i" part A (X+64, Y+8,  tile 264, pal 0, prio 3, 8x8)
C2926A:  dd $31181040	; "i" part B (X+64, Y+16, tile 280, pal 0, prio 3, 8x8)

; OAM for "Mog"
C2926E:  db $07      	; Tiles: 7
C2926F:  dd $31700080	; "M" part A (X+0,  Y+0,  tile 368, pal 0, prio 3, 16x16)
C29273:  dd $313A1000	; "M" part B (X+0,  Y+16, tile 314, pal 0, prio 3, 8x8)
C29277:  dd $313B1008	; "M" part C (X+8,  Y+16, tile 315, pal 0, prio 3, 8x8)
C2927B:  dd $310E0810	; "o" part A (X+16, Y+8,  tile 270, pal 0, prio 3, 8x8)
C2927F:  dd $311E1010	; "o" part B (X+16, Y+16, tile 286, pal 0, prio 3, 8x8)
C29283:  dd $31060818	; "g" part A (X+24, Y+8,  tile 262, pal 0, prio 3, 8x8)
C29287:  dd $31161018	; "g" part B (X+24, Y16+, tile 278, pal 0, prio 3, 8x8)

; OAM for "Gau"
C2928B:  db $07      	; Tiles: 7
C2928C:  dd $314C0080	; "G" part A (X+0,  Y+0,  tile 332, pal 0, prio 3, 16x16)
C29290:  dd $316C1000	; "G" part B (X+0,  Y+16, tile 364, pal 0, prio 3, 8x8)
C29294:  dd $316D1008	; "G" part C (X+8,  Y+16, tile 365, pal 0, prio 3, 8x8)
C29298:  dd $31000810	; "a" part A (X+16, Y+8,  tile 256, pal 0, prio 3, 8x8)
C2929C:  dd $31101010	; "a" part B (X+16, Y+16, tile 272, pal 0, prio 3, 8x8)
C292A0:  dd $31240818	; "u" part A (X+24, Y+8,  tile 292, pal 0, prio 3, 8x8)
C292A4:  dd $31341018	; "u" part B (X+24, Y+16, tile 308, pal 0, prio 3, 8x8)

; OAM for "Gogo"
C292A8:  db $09      	; Tiles: 9
C292A9:  dd $314C0080	; "G" part A (X+0,  Y+0,  tile 332, pal 0, prio 3, 16x16)
C292AD:  dd $316C1000	; "G" part B (X+0,  Y+16, tile 364, pal 0, prio 3, 8x8)
C292B1:  dd $316D1008	; "G" part C (X+8,  Y+16, tile 365, pal 0, prio 3, 8x8)
C292B5:  dd $310E0810	; "o" part A (X+16, Y+8,  tile 270, pal 0, prio 3, 8x8)
C292B9:  dd $311E1010	; "o" part B (X+16, Y+16, tile 286, pal 0, prio 3, 8x8)
C292BD:  dd $31060818	; "g" part A (X+24, Y+8,  tile 262, pal 0, prio 3, 8x8)
C292C1:  dd $31161018	; "g" part B (X+24, Y+16, tile 278, pal 0, prio 3, 8x8)
C292C5:  dd $310E0820	; "o" part A (X+32, Y+8,  tile 270, pal 0, prio 3, 8x8)
C292C9:  dd $311E1020	; "o" part B (X+32, Y+16, tile 286, pal 0, prio 3, 8x8)

; OAM for "Umaro"
C292CD:  db $0B      	; Tiles: 11
C292CE:  dd $31780080	; "U" part A (X+0,  Y+0,  tile 376, pal 0, prio 3, 16x16)
C292D2:  dd $312E1000	; "U" part B (X+0,  Y+16, tile 302, pal 0, prio 3, 8x8)
C292D6:  dd $312F1008	; "U" part C (X+8,  Y+16, tile 303, pal 0, prio 3, 8x8)
C292DA:  dd $310C0810	; "m" part A (X+16, Y+8,  tile 268, pal 0, prio 3, 8x8)
C292DE:  dd $311C1010	; "m" part B (X+16, Y+16, tile 284, pal 0, prio 3, 8x8)
C292E2:  dd $31000818	; "a" part A (X+24, Y+8,  tile 256, pal 0, prio 3, 8x8)
C292E6:  dd $31101018	; "a" part B (X+24, Y+16, tile 272, pal 0, prio 3, 8x8)
C292EA:  dd $31210820	; "r" part A (X+32, Y+8,  tile 289, pal 0, prio 3, 8x8)
C292EE:  dd $31311020	; "r" part B (X+32, Y+16, tile 305, pal 0, prio 3, 8x8)
C292F2:  dd $310E0828	; "o" part A (X+40, Y+8,  tile 270, pal 0, prio 3, 8x8)
C292F6:  dd $311E1028	; "o" part B (X+40, Y+16, tile 286, pal 0, prio 3, 8x8)

; Animation script for playing card
C292FA:  dw $93F7    	; Frame 5
C292FC:  db $06      	; Wait: 6
C292FD:  dw $9482    	; Frame 8
C292FF:  db $06      	; Wait: 6
C29300:  dw $93C6    	; Frame 4
C29302:  db $06      	; Wait: 6
C29303:  dw $938D    	; Frame 3
C29305:  db $06      	; Wait: 6
C29306:  dw $9354    	; Frame 2
C29308:  db $06      	; Wait: 6
C29309:  dw $9327    	; Frame 1
C2930B:  db $06      	; Wait: 6
C2930C:  dw $9354    	; Frame 2
C2930E:  db $06      	; Wait: 6
C2930F:  dw $938D    	; Frame 3
C29311:  db $06      	; Wait: 6
C29312:  dw $93C6    	; Frame 4
C29314:  db $06      	; Wait: 6
C29315:  dw $9482    	; Frame 8
C29317:  db $06      	; Wait: 6
C29318:  dw $93F7    	; Frame 5
C2931A:  db $06      	; Wait: 6
C2931B:  dw $9420    	; Frame 6
C2931D:  db $06      	; Wait: 6
C2931E:  dw $9461    	; Frame 7
C29320:  db $0C      	; Wait: 12
C29321:  dw $9420    	; Frame 6
C29323:  db $06      	; Wait: 6
C29324:  dw $9420    	; Bogus...
C29326:  db $FF      	; Loop

; OAM for playing card, frame 1
C29327:  db $0B      	; Tiles: 11
C29328:  dd $34020010	; Tile 1
C2932C:  dd $34030098	; Tile 2
C29330:  dd $34110888	; Tile 3
C29334:  dd $34231098	; Tile 4
C29338:  dd $34150828	; Tile 5
C2933C:  dd $34301800	; Tile 6
C29340:  dd $34311808	; Tile 7
C29344:  dd $34321810	; Tile 8
C29348:  dd $34012008	; Tile 9
C2934C:  dd $34052010	; Tile 10
C29350:  dd $34062018	; Tile 11

; OAM for playing card, frame 2
C29354:  db $0E      	; Tiles: 14
C29355:  dd $34070010	; Tile 1
C29359:  dd $34160808	; Tile 2
C2935D:  dd $34170810	; Tile 3
C29361:  dd $34261088	; Tile 4
C29365:  dd $34351800	; Tile 5
C29369:  dd $34092008	; Tile 6
C2936D:  dd $340C2010	; Tile 7
C29371:  dd $F4072018	; Tile 8
C29375:  dd $F4161820	; Tile 9
C29379:  dd $F4171818	; Tile 10
C2937D:  dd $F4260898	; Tile 11
C29381:  dd $F4350828	; Tile 12
C29385:  dd $F4090020	; Tile 13
C29389:  dd $F40C0018	; Tile 14

; OAM for playing card, frame 3
C2938D:  db $0E      	; Tiles: 14
C2938E:  dd $34080018	; Tile 1
C29392:  dd $34180818	; Tile 2
C29396:  dd $34190820	; Tile 3
C2939A:  dd $34281018	; Tile 4
C2939E:  dd $34291020	; Tile 5
C293A2:  dd $34381818	; Tile 6
C293A6:  dd $34202018	; Tile 7
C293AA:  dd $F4082010	; Tile 8
C293AE:  dd $F4181810	; Tile 9
C293B2:  dd $F4191808	; Tile 10
C293B6:  dd $F4281010	; Tile 11
C293BA:  dd $F4291008	; Tile 12
C293BE:  dd $F4380810	; Tile 13
C293C2:  dd $F4200010	; Tile 14

; OAM for playing card, frame 4
C293C6:  db $0C      	; Tiles: 12
C293C7:  dd $340A0010	; Tile 1
C293CB:  dd $341A0810	; Tile 2
C293CF:  dd $342A1010	; Tile 3
C293D3:  dd $34391808	; Tile 4
C293D7:  dd $343A1810	; Tile 5
C293DB:  dd $34252010	; Tile 6
C293DF:  dd $F40A2018	; Tile 7
C293E3:  dd $F41A1818	; Tile 8
C293E7:  dd $F42A1018	; Tile 9
C293EB:  dd $F4390820	; Tile 10
C293EF:  dd $F43A0818	; Tile 11
C293F3:  dd $F4250018	; Tile 12

; OAM for playing card, frame 5
C293F7:  db $0A      	; Tiles: 10
C293F8:  dd $340B0018	; Tile 1
C293FC:  dd $341B0818	; Tile 2
C29400:  dd $342B1018	; Tile 3
C29404:  dd $343B1818	; Tile 4
C29408:  dd $341C2018	; Tile 5
C2940C:  dd $F40B2010	; Tile 6
C29410:  dd $F41B1810	; Tile 7
C29414:  dd $F42B1010	; Tile 8
C29418:  dd $F43B0810	; Tile 9
C2941C:  dd $F41C0010	; Tile 10

; OAM for playing card, frame 6
C29420:  db $10      	; Tiles: 16
C29421:  dd $340D0010	; Tile 1
C29425:  dd $341D0810	; Tile 2
C29429:  dd $342C1008	; Tile 3
C2942D:  dd $342D1010	; Tile 4
C29431:  dd $343C1808	; Tile 5
C29435:  dd $343D1810	; Tile 6
C29439:  dd $34402008	; Tile 7
C2943D:  dd $34412010	; Tile 8
C29441:  dd $F40D2018	; Tile 9
C29445:  dd $F41D1818	; Tile 10
C29449:  dd $F42C1020	; Tile 11
C2944D:  dd $F42D1018	; Tile 12
C29451:  dd $F43C0820	; Tile 13
C29455:  dd $F43D0818	; Tile 14
C29459:  dd $F4400020	; Tile 15
C2945D:  dd $F4410018	; Tile 16

; OAM for playing card, frame 7
C29461:  db $08      	; Tiles: 8
C29462:  dd $340E0098	; Tile 1
C29466:  dd $342E1098	; Tile 2
C2946A:  dd $34430828	; Tile 3
C2946E:  dd $34422018	; Tile 4
C29472:  dd $F40E1888	; Tile 5
C29476:  dd $F42E0888	; Tile 6
C2947A:  dd $F4431800	; Tile 7
C2947E:  dd $F4420010	; Tile 8

; OAM for playing card, frame 8
C29482:  db $05      	; Tiles: 5
C29483:  dd $34000012	; Tile 1
C29487:  dd $34100812	; Tile 2
C2948B:  dd $34101012	; Tile 3
C2948F:  dd $34101812	; Tile 4
C29493:  dd $34102012	; Tile 5

; Animation script for apple
C29497:  dw $94A9    	; Frame 1
C29499:  db $B4      	; Wait: 180
C2949A:  dw $94A9    	; Frame 1
C2949C:  db $B4      	; Wait: 180
C2949D:  dw $94A9    	; Frame 1
C2949F:  db $B4      	; Wait: 180
C294A0:  dw $94CA    	; Frame 2
C294A2:  db $10      	; Wait: 16
C294A3:  dw $94F7    	; ...
C294A5:  db $40      	; ...
C294A6:  dw $94F7    	; Frame 3
C294A8:  db $FE      	; Freeze

; OAM for apple, frame 1
C294A9:  db $08      	; Tiles: 8
C294AA:  dd $38000880	; Tile 1
C294AE:  dd $38020810	; Tile 2
C294B2:  dd $38121010	; Tile 3
C294B6:  dd $38131018	; Tile 4
C294BA:  dd $38041880	; Tile 5
C294BE:  dd $38061810	; Tile 6
C294C2:  dd $38162010	; Tile 7
C294C6:  dd $38031818	; Tile 8

; OAM for apple, frame 2
C294CA:  db $0B      	; Tiles: 11
C294CB:  dd $38000880	; Tile 1
C294CF:  dd $38070090	; Tile 2
C294D3:  dd $38121010	; Tile 3
C294D7:  dd $38041880	; Tile 4
C294DB:  dd $38061810	; Tile 5
C294DF:  dd $38162010	; Tile 6
C294E3:  dd $38031818	; Tile 7
C294E7:  dd $38090020	; Tile 8
C294EB:  dd $38190820	; Tile 9
C294EF:  dd $380A1018	; Tile 10
C294F3:  dd $380B1020	; Tile 11

; OAM for apple, frame 3
C294F7:  db $11      	; Tiles: 17
C294F8:  dd $38000800	; Tile 1
C294FC:  dd $38010808	; Tile 2
C29500:  dd $38101000	; Tile 3
C29504:  dd $38041880	; Tile 4
C29508:  dd $38061810	; Tile 5
C2950C:  dd $38162010	; Tile 6
C29510:  dd $38031818	; Tile 7
C29514:  dd $381A1008	; Tile 8
C29518:  dd $381B1010	; Tile 9
C2951C:  dd $380C0010	; Tile 10
C29520:  dd $380D0018	; Tile 11
C29524:  dd $380E0810	; Tile 12
C29528:  dd $380F0818	; Tile 13
C2952C:  dd $38090020	; Tile 14
C29530:  dd $38190820	; Tile 15
C29534:  dd $380A1018	; Tile 16
C29538:  dd $380B1020	; Tile 17


; ***************************************************
; Ending Cinematic Color Palettes (C2/953C - C2/9853)
; ***************************************************

; Palette for cloudy sky
C2953C:  dw $18C6,$664D,$6A6E,$6A90,$6AB1,$6ED2,$6EF3,$7315
C2954C:  dw $7336,$7337,$7758,$777A,$779B,$7BBC,$7BDD,$7FFF

; Palette for glints on table objects
C2955C:  dw $0000,$5F5F,$4D38,$2492,$188E,$0C68,$0C45,$0000
C2956C:  dw $0000,$0423,$0423,$0423,$0423,$0423,$0423,$0423

; Palette for Gogo's eye
C2957C:  dw $0000,$0C45,$0C68,$188E,$2492,$4D38,$5F5F,$0000
C2958C:  dw $0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000

; Palette for clear sky and non-sprite airships
C2959C:  dw $59EA,$7FFF,$5F7B,$46B6,$3211,$258D,$2129,$1CE6
C295AC:  dw $18A2,$375B,$0E34,$016D,$77BD,$66F7,$5E72,$59EA

; Palette (same as but overwritten by above)
C295BC:  dw $0000,$7FFF,$5F7B,$46B6,$3211,$258D,$2129,$1CE6
C295CC:  dw $18A2,$375B,$0E34,$016D,$77BD,$66F7,$5E72,$59EA

; Palette for ocean and non-sprite boat
C295DC:  dw $0000,$0864,$1991,$10EB,$0C87,$3653,$298E,$67FF
C295EC:  dw $169C,$6713,$664C,$4941,$30C1,$2482,$1C61,$1861

; Palette for dense clouds
C295FC:  dw $0000,$7BDE,$77BE,$77BD,$739C,$737C,$6F5A,$6B39
C2960C:  dw $66F7,$5E93,$5DAA,$5D46,$0000,$0000,$0000,$7FFF

; Palette for forests
C2961C:  dw $0000,$2E0F,$25CC,$25CB,$21AA,$2189,$1948,$1947
C2962C:  dw $10E5,$110C,$3A90,$3A6F,$364F,$324E,$322D,$2E0F

; Palette for lakes
C2963C:  dw $0000,$5E8F,$4941,$30C1,$2482,$1C61,$31D2,$296F
C2964C:  dw $18EA,$25CC,$21AA,$3A6F,$364F,$324E,$322D,$2E0F

; Palette for grasslands
C2965C:  dw $0000,$4699,$4257,$3E36,$3A15,$35F4,$31D2,$296F
C2966C:  dw $18EA,$25CC,$3A90,$3A6F,$364F,$324E,$322D,$2E0F

; Palette for katana, brush, book, etc.
C2967C:  dw $0000,$571C,$3A35,$2590,$150C,$08A8,$0466,$0000
C2968C:  dw $3800,$3800,$3800,$3800,$3800,$3800,$3800,$3800

; Palette for table skirt, helmets, etc.
C2969C:  dw $0000,$571C,$4698,$3614,$2DD2,$216F,$1D4E,$192D
C296AC:  dw $10EB,$0CC9,$08A8,$0887,$0866,$0445,$0423,$0000

; Unused palette (darker version of above?)
C296BC:  dw $0000,$571C,$571C,$3614,$3614,$216F,$216F,$192D
C296CC:  dw $10EB,$10EB,$0887,$0887,$0445,$0423,$0423,$0000

; Palette for table surface
C296DC:  dw $0000,$571C,$4698,$3614,$2DD2,$2590,$150C,$08A8
C296EC:  dw $3800,$3800,$3800,$3800,$3800,$3800,$3800,$3800

; Palette for cinematic overlay
C296FC:  dw $0000,$4A52,$3DEF,$2D6B,$2529,$18C6,$0863,$0020
C2970C:  dw $3800,$3800,$3800,$3800,$3800,$3800,$3800,$3800

; Unused palette (slightly extends table surface)
C2971C:  dw $0000,$571C,$4698,$3614,$2DD2,$2590,$2590,$150C
C2972C:  dw $150C,$08A8,$08A8,$08A8,$08A8,$08A8,$08A8,$08A8

; Palette for small credits (blue)
C2973C:  dw $0000,$18C7,$16FE,$16FE

; Palette for large credits (blue)
C29744:  dw $0000,$16FE,$225A,$18C7

; Palette for small credits (white)
C2974C:  dw $0000,$C460,$0000,$7FFF

; Palette for large credits and actor names (white)
C29754:  dw $0000,$7FFF,$56B4,$4C60,$0000,$7FFF,$4C60,$7FFF
C29764:  dw $0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000

; Palette for non-glint sprites in actor scenes
C29774:  dw $0000,$571C,$4698,$3614,$2DD2,$216F,$1D4E,$150C
C29784:  dw $10EB,$0CC9,$08A8,$0887,$0866,$0445,$0423,$0000

; Palette for most airship sprites
C29794:  dw $0000,$7FFF,$639C,$46B6,$3211,$218D,$1929,$1CE8
C297A4:  dw $1CC6,$18A4,$1082,$0000,$0000,$0000,$0422,$6293

; Palette for boat sprite and yellow birds
C297B4:  dw $0000,$0864,$1991,$10EB,$0C87,$3653,$298E,$67FF
C297C4:  dw $169C,$6713,$664C,$4941,$7C1F,$7C1F,$1C61,$7C1F

; Palette for rearview airship's gondola
C297D4:  dw $0000,$3631,$31EF,$298C,$1991,$192D,$14EA,$10A7
C297E4:  dw $0C85,$0864,$375B,$0E34,$016D,$7C1F,$7C1F,$0843

; Palette for rearview airship's balloon and rotors
C297F4:  dw $0000,$779C,$639B,$46B5,$3631,$31EF,$298C,$1D29
C29804:  dw $18E7,$14A6,$0C65,$0C44,$1991,$10EB,$0C87,$7C1F

; Palette for water spray
C29814:  dw $0000,$7FFF,$6718,$4E30,$3549,$1C61,$2926,$2926
C29824:  dw $2926,$2926,$2926,$2926,$2926,$2926,$2926,$2926

; Palette for white birds
C29834:  dw $0002,$0864,$1991,$10EB,$0C87,$7FFF,$6AF6,$460D
C29844:  dw $2D67,$6736,$4E4F,$3548,$14E4,$7C1F,$1C61,$7C1F


;*************************************************
; Ending Cinematic Sprite Data (C2/9854 - C2/A659)
;*************************************************

; Tile numbers for expanding 8x16 font tiles to 16x16 for end credits
C29854:  db $00     	; Upper half of "A"
C29855:  db $01     	; Upper half of "B"
C29856:  db $02     	; Upper half of "C"
C29857:  db $03     	; Upper half of "D"
C29858:  db $04     	; Upper half of "E"
C29859:  db $05     	; Upper half of "F"
C2985A:  db $06     	; Upper half of "G"
C2985B:  db $07     	; Upper half of "H"
C2985C:  db $10     	; Lower half of "A"
C2985D:  db $11     	; Lower half of "B"
C2985E:  db $12     	; Lower half of "C"
C2985F:  db $13     	; Lower half of "D"
C29860:  db $14     	; Lower half of "E"
C29861:  db $15     	; Lower half of "F"
C29862:  db $16     	; Lower half of "G"
C29863:  db $17     	; Lower half of "H"
C29864:  db $08     	; Upper half of "I"
C29865:  db $09     	; Upper half of "J"
C29866:  db $0A     	; Upper half of "K"
C29867:  db $0B     	; Upper half of "L"
C29868:  db $0C     	; Upper half of "M"
C29869:  db $0D     	; Upper half of "N"
C2986A:  db $0E     	; Upper half of "O"
C2986B:  db $0F     	; Upper half of "P"
C2986C:  db $18     	; Lower half of "I"
C2986D:  db $19     	; Lower half of "J"
C2986E:  db $1A     	; Lower half of "K"
C2986F:  db $1B     	; Lower half of "L"
C29870:  db $1C     	; Lower half of "M"
C29871:  db $1D     	; Lower half of "N"
C29872:  db $1E     	; Lower half of "O"
C29873:  db $1F     	; Lower half of "P"
C29874:  db $20     	; Upper half of "Q"
C29875:  db $21     	; Upper half of "R"
C29876:  db $22     	; Upper half of "S"
C29877:  db $23     	; Upper half of "T"
C29878:  db $24     	; Upper half of "U"
C29879:  db $25     	; Upper half of "V"
C2987A:  db $26     	; Upper half of "W"
C2987B:  db $27     	; Upper half of "X"
C2987C:  db $30     	; Lower half of "Q"
C2987D:  db $31     	; Lower half of "R"
C2987E:  db $32     	; Lower half of "S"
C2987F:  db $33     	; Lower half of "T"
C29880:  db $34     	; Lower half of "U"
C29881:  db $35     	; Lower half of "V"
C29882:  db $36     	; Lower half of "W"
C29883:  db $37     	; Lower half of "X"
C29884:  db $28     	; Upper half of "Y"
C29885:  db $29     	; Upper half of "Z"
C29886:  db $2A     	; "a" from "as"
C29887:  db $2B     	; "s" from "as"
C29888:  db $2C     	; For actor scenes
C29889:  db $2D     	; For actor scenes
C2988A:  db $2E     	; For actor scenes
C2988B:  db $2F     	; For actor scenes
C2988C:  db $38     	; Lower half of "Y"
C2988D:  db $39     	; Lower half of "Z"
C2988E:  db $3A     	; For actor scenes
C2988F:  db $3B     	; For actor scenes
C29890:  db $3C     	; For actor scenes
C29891:  db $3D     	; For actor scenes
C29892:  db $3E     	; For actor scenes
C29893:  db $3F     	; For actor scenes

; Animation table pointers and positions for end credits
C29894:  dw $9D89,$8860	; producer
C29898:  dw $9DCF,$9838	; HIRONOBU
C2989C:  dw $9E15,$9880	; SAKAGUCHI
C298A0:  dw $9D89,$8860	; director
C298A4:  dw $9F2D,$9840	; YOSHINORI
C298A8:  dw $9F73,$9890	; KITASE
C298AC:  dw $9FB9,$AC4C	; HIROYUKI
C298B0:  dw $9FFF,$AC94	; ITOU
C298B4:  dw $9DCF,$8844	; main
C298B8:  dw $9E15,$886C	; programmer
C298BC:  dw $A045,$9858	; KEN
C298C0:  dw $A08B,$9878	; NARITA
C298C4:  dw $A0D1,$AC48	; KIYOSHI
C298C8:  dw $A117,$AC88	; YOSHII
C298CC:  dw $9E5B,$8840	; graphic
C298D0:  dw $9EA1,$8880	; director
C298D4:  dw $A15D,$983C	; TETSUYA
C298D8:  dw $A1A3,$987C	; TAKAHASHI
C298DC:  dw $A1E9,$AC48	; KAZUKO
C298E0:  dw $A22F,$AC80	; SHIBUYA
C298E4:  dw $9E5B,$8840	; graphic
C298E8:  dw $9EA1,$8880	; director
C298EC:  dw $A275,$9850	; HIDEO
C298F0:  dw $A2BB,$9880	; MINABA
C298F4:  dw $A301,$AC48	; TETSUYA
C298F8:  dw $A347,$AC88	; NOMURA
C298FC:  dw $9EE7,$886C	; music
C29900:  dw $A38D,$984C	; NOBUO
C29904:  dw $A3D3,$987C	; UEMATSU
C29908:  dw $A5BD,$8850	; image
C2990C:  dw $A603,$8880	; design
C29910:  dw $A419,$9844	; YOSHITAKA
C29914:  dw $A45F,$9894	; AMANO
C29918:  dw $A649,$8848	; battle
C2991C:  dw $A68F,$8880	; planner
C29920:  dw $A4A5,$9844	; YASUYUKI
C29924:  dw $A4EB,$988C	; HASEBE
C29928:  dw $A531,$AC4C	; AKIYOSHI
C2992C:  dw $A577,$AC94	; OOTA
C29930:  dw $9EA1,$884C	; field
C29934:  dw $9DCF,$887C	; planner
C29938:  dw $9EE7,$983C	; YOSHIHIKO
C2993C:  dw $9F2D,$988C	; MAEKAWA
C29940:  dw $9F73,$AC58	; KEITA
C29944:  dw $9FB9,$AC88	; ETOH
C29948:  dw $9FFF,$C050	; SATORU
C2994C:  dw $A045,$C088	; TSUJI
C29950:  dw $9D89,$884C	; event
C29954:  dw $9DCF,$887C	; planner
C29958:  dw $A08B,$9848	; TSUKASA
C2995C:  dw $A0D1,$9888	; FUJITA
C29960:  dw $A117,$AC3C	; KEISUKE
C29964:  dw $A15D,$AC7C	; MATSUHARA
C29968:  dw $9E15,$883C	; effect
C2996C:  dw $9E5B,$8874	; programmer
C29970:  dw $A1A3,$9848	; HIROSHI
C29974:  dw $A1E9,$9888	; HARATA
C29978:  dw $A22F,$AC4C	; SATOSHI
C2997C:  dw $A275,$AC8C	; OGATA
C29980:  dw $A68F,$883C	; battle
C29984:  dw $9E5B,$8874	; programmer
C29988:  dw $A2BB,$983C	; AKIHIRO
C2998C:  dw $A301,$987C	; YAMAGUCHI
C29990:  dw $9D89,$8840	; sound
C29994:  dw $9DCF,$8870	; programmer
C29998:  dw $9FB9,$9854	; MINORU
C2999C:  dw $9FFF,$988C	; AKAO
C299A0:  dw $9E15,$8824	; effect
C299A4:  dw $9E5B,$885C	; graphic
C299A8:  dw $9EA1,$889C	; designer
C299AC:  dw $A045,$9840	; HIROKATSU
C299B0:  dw $A08B,$9890	; SASAKI
C299B4:  dw $9EE7,$8828	; field
C299B8:  dw $9E5B,$8858	; graphic
C299BC:  dw $9EA1,$8898	; designer
C299C0:  dw $A0D1,$9844	; TAKAHARU
C299C4:  dw $A117,$988C	; MATSUO
C299C8:  dw $A15D,$AC4C	; YUUSUKE
C299CC:  dw $A1A3,$AC8C	; NAORA
C299D0:  dw $A1E9,$C048	; NOBUYUKI
C299D4:  dw $A22F,$C090	; IKEDA
C299D8:  dw $9EE7,$8828	; field
C299DC:  dw $9E5B,$8858	; graphic
C299E0:  dw $9EA1,$8898	; designer
C299E4:  dw $A275,$984C	; TOMOE
C299E8:  dw $A2BB,$987C	; INAZAWA
C299EC:  dw $A301,$AC50	; KAORI
C299F0:  dw $A347,$AC80	; TANAKA
C299F4:  dw $A38D,$C03C	; TAKAMICHI
C299F8:  dw $A3D3,$C08C	; SHIBUYA
C299FC:  dw $9EE7,$8828	; field
C29A00:  dw $9E5B,$8858	; graphic
C29A04:  dw $9EA1,$8898	; designer
C29A08:  dw $A531,$9838	; SINITIROU
C29A0C:  dw $A45F,$9888	; HAMASAKA
C29A10:  dw $A4A5,$AC44	; AKIYOSHI
C29A14:  dw $A4EB,$AC8C	; MASUDA
C29A18:  dw $A419,$C040	; HIDETOSHI
C29A1C:  dw $A5BD,$C090	; KEZUKA
C29A20:  dw $9F2D,$881C	; monster
C29A24:  dw $9E5B,$885C	; graphic
C29A28:  dw $9EA1,$889C	; designer
C29A2C:  dw $A603,$9848	; HITOSHI
C29A30:  dw $A08B,$9888	; SASAKI
C29A34:  dw $9F73,$8824	; object
C29A38:  dw $9E5B,$885C	; graphic
C29A3C:  dw $9EA1,$889C	; designer
C29A40:  dw $A649,$9844	; KAZUHIRO
C29A44:  dw $A68F,$988C	; OHKAWA
C29A48:  dw $9D89,$8848	; sound
C29A4C:  dw $9DCF,$8878	; engineer
C29A50:  dw $9FB9,$984C	; EIJI
C29A54:  dw $9FFF,$9874	; NAKAMURA
C29A58:  dw $9D89,$8850	; sound
C29A5C:  dw $9E15,$8880	; effect
C29A60:  dw $A045,$984C	; KAZUMI
C29A64:  dw $A08B,$9884	; MITOME
C29A68:  dw $A0D1,$AC40	; YOSHITAKA
C29A6C:  dw $A117,$AC90	; HIROTA
C29A70:  dw $9D89,$8850	; sound
C29A74:  dw $9E15,$8880	; effect
C29A78:  dw $A15D,$9840	; YASUMASA
C29A7C:  dw $A1A3,$9888	; OKAMOTO
C29A80:  dw $A1E9,$AC54	; SHUN
C29A84:  dw $A22F,$AC7C	; OHKUBO
C29A88:  dw $9E5B,$8848	; remake
C29A8C:  dw $9EA1,$8880	; planner
C29A90:  dw $A275,$945C	; WEIMIN
C29A94:  dw $A2BB,$9494	; LI
C29A98:  dw $A301,$A860	; AIKO
C29A9C:  dw $A347,$A888	; ITO
C29AA0:  dw $A7ED,$BC58	; translator
C29AA4:  dw $A761,$C854	; TED
C29AA8:  dw $A7A7,$C874	; WOOLSEY
C29AAC:  dw $9EE7,$8844	; system
C29AB0:  dw $9DCF,$887C	; engineer
C29AB4:  dw $A38D,$983C	; MASAHIRO
C29AB8:  dw $A3D3,$9884	; NAKAJIMA
C29ABC:  dw $A419,$AC50	; MITSUO
C29AC0:  dw $A45F,$AC88	; OGURA
C29AC4:  dw $9EE7,$8844	; system
C29AC8:  dw $9DCF,$887C	; engineer
C29ACC:  dw $A4A5,$9840	; YASUNORI
C29AD0:  dw $A4EB,$9888	; ORIKASA
C29AD4:  dw $A531,$AC48	; YUTAKA
C29AD8:  dw $A577,$AC80	; OHDAIRA
C29ADC:  dw $9F2D,$8838	; executive
C29AE0:  dw $9F73,$8888	; producer
C29AE4:  dw $A649,$984C	; TETSUO
C29AE8:  dw $A68F,$9884	; MIZUNO
C29AEC:  dw $A6D5,$AC40	; HITOSHI
C29AF0:  dw $A71B,$AC80	; TAKEMURA
C29AF4:  dw $9D89,$4040	; test
C29AF8:  dw $9DCF,$4068	; coordinator
C29AFC:  dw $9F73,$5460	; s.kajitani
C29B00:  dw $9FB9,$6060	; r.kouda
C29B04:  dw $9FFF,$6C60	; k.inagi
C29B08:  dw $A045,$7860	; n.hanada
C29B0C:  dw $A08B,$8460	; h.masuda
C29B10:  dw $A0D1,$9060	; n.kanai
C29B14:  dw $A117,$9C60	; h.sakurai
C29B18:  dw $A15D,$A860	; h.suzuki
C29B1C:  dw $9E15,$403C	; special
C29B20:  dw $9E5B,$407C	; thanks
C29B24:  dw $9EA1,$40B4	; to
C29B28:  dw $A1A3,$5460	; m.miyamoto
C29B2C:  dw $A1E9,$6060	; k.torishima
C29B30:  dw $A22F,$6C60	; h.hashimoto
C29B34:  dw $A991,$8460	; k.adachi
C29B38:  dw $B139,$9060	; y.uenishi
C29B3C:  dw $B17F,$9C60	; y.ohkawa
C29B40:  dw $B1C5,$A860	; y.kuwahara
C29B44:  dw $A275,$5460	; y.hirata
C29B48:  dw $A2BB,$6060	; t.nomura
C29B4C:  dw $A301,$6C60	; k.sousui
C29B50:  dw $A347,$7860	; t.tsuruzono
C29B54:  dw $A38D,$8460	; y.ishida
C29B58:  dw $A3D3,$9060	; m.okamiya
C29B5C:  dw $A419,$9C60	; k.hirata
C29B60:  dw $B20B,$A860	; n.watanabe
C29B64:  dw $B251,$B460	; k.maeda
C29B68:  dw $B297,$5460	; k.tanikawa
C29B6C:  dw $B2DD,$6060	; j.saito
C29B70:  dw $B323,$6C60	; m.denno
C29B74:  dw $B369,$7860	; s.hidaki
C29B78:  dw $A45F,$8460	; k.oogo
C29B7C:  dw $A4A5,$9060	; h.suzuki
C29B80:  dw $B4C7,$A860	; y.matsumura
C29B84:  dw $B50D,$B460	; a.ueda
C29B88:  dw $A4EB,$5460	; h.yokota
C29B8C:  dw $A531,$6060	; k.yamashita
C29B90:  dw $A577,$6C60	; m.yumoto
C29B94:  dw $A5BD,$7860	; n.ishikawa
C29B98:  dw $A603,$8460	; h.kizuka
C29B9C:  dw $A649,$9060	; s.arai
C29BA0:  dw $A68F,$5460	; m.kouno
C29BA4:  dw $A6D5,$6060	; r.tsukakoshi
C29BA8:  dw $B021,$6C60	; k.kaneko
C29BAC:  dw $B067,$7860	; h.shimodaira
C29BB0:  dw $B0AD,$8460	; m.noumura
C29BB4:  dw $AE7D,$5460	; k.miyamoto
C29BB8:  dw $AEC3,$6060	; h.suzuki
C29BBC:  dw $AF09,$6C60	; a.kawazu
C29BC0:  dw $A9D7,$7860	; c.fujioka
C29BC4:  dw $AA1D,$8460	; h.kobayashi
C29BC8:  dw $AA63,$9060	; h.tanaka
C29BCC:  dw $AAEF,$9C60	; t.mikasa
C29BD0:  dw $AB35,$A860	; h.nishida
C29BD4:  dw $AB7B,$B460	; t.takechi
C29BD8:  dw $A7ED,$6C60	; t.morita
C29BDC:  dw $A833,$7860	; y.suemitsu
C29BE0:  dw $A879,$8460	; w.sato
C29BE4:  dw $A8BF,$9060	; h.nakamura
C29BE8:  dw $A905,$9C60	; s.aoyama
C29BEC:  dw $A94B,$A860	; h.nagahara
C29BF0:  dw $AFDB,$6C60	; m.kaneshige
C29BF4:  dw $B021,$7860	; h.noguchi
C29BF8:  dw $B067,$8460	; m.horie
C29BFC:  dw $A71B,$9060	; m.mori
C29C00:  dw $A761,$9C60	; t.ohno
C29C04:  dw $A7A7,$A860	; m.someno
C29C08:  dw $ABC1,$6C54	; rich silveira
C29C0C:  dw $AC07,$785C	; toshi horii
C29C10:  dw $AC4D,$8458	; j.yanagihara
C29C14:  dw $ADF1,$9060	; doug smith
C29C18:  dw $ACD9,$9C58	; james gillis
C29C1C:  dw $AD1F,$6C58	; chris budd
C29C20:  dw $AD65,$7854	; mike markey
C29C24:  dw $ADAB,$844C	; mirko freguia
C29C28:  dw $AC93,$9044	; nathan williams
C29C2C:  dw $AE37,$9C4C	; dalen abraham
C29C30:  dw $AE7D,$6C48	; rebecca coffman
C29C34:  dw $AEC3,$7850	; brian fehdrau
C29C38:  dw $AF09,$8458	; jeff petkau
C29C3C:  dw $AF4F,$9048	; george sinfield
C29C40:  dw $AF95,$9C58	; alan weiss

; Source and destination for large credits
C29C44:  dw $9FA1,$9DCF	; HIRONOBU
C29C48:  dw $9FAA,$9E15	; SAKAGUCHI
C29C4C:  dw $9FBD,$9F2D	; YOSHINORI
C29C50:  dw $9FC7,$9F73	; KITASE
C29C54:  dw $9FCE,$9FB9	; HIROYUKI
C29C58:  dw $9FD7,$9FFF	; ITOU
C29C5C:  dw $9FEC,$A045	; KEN
C29C60:  dw $9FF0,$A08B	; NARITA
C29C64:  dw $9FF7,$A0D1	; KIYOSHI
C29C68:  dw $9FFF,$A117	; YOSHII
C29C6C:  dw $A017,$A15D	; TETSUYA
C29C70:  dw $A01F,$A1A3	; TAKAHASHI
C29C74:  dw $A029,$A1E9	; KAZUKO
C29C78:  dw $A030,$A22F	; SHIBUYA
C29C7C:  dw $A038,$A275	; HIDEO
C29C80:  dw $A03E,$A2BB	; MINABA
C29C84:  dw $A017,$A301	; TETSUYA
C29C88:  dw $A045,$A347	; NOMURA
C29C8C:  dw $A052,$A38D	; NOBUO
C29C90:  dw $A058,$A3D3	; UEMATSU
C29C94:  dw $A06D,$A419	; YOSHITAKA
C29C98:  dw $A077,$A45F	; AMANO
C29C9C:  dw $A08C,$A4A5	; YASUYUKI
C29CA0:  dw $A095,$A4EB	; HASEBE
C29CA4:  dw $A09C,$A531	; AKIYOSHI
C29CA8:  dw $A0A5,$A577	; OOTA
C29CAC:  dw $A0B0,$9EE7	; YOSHIHIKO
C29CB0:  dw $A0BA,$9F2D	; MAEKAWA
C29CB4:  dw $A0C2,$9F73	; KEITA
C29CB8:  dw $A0C8,$9FB9	; ETOH
C29CBC:  dw $A0CD,$9FFF	; SATORU
C29CC0:  dw $A0D4,$A045	; TSUJI
C29CC4:  dw $A0E0,$A08B	; TSUKASA
C29CC8:  dw $A0E8,$A0D1	; FUJITA
C29CCC:  dw $A0EF,$A117	; KEISUKE
C29CD0:  dw $A0F7,$A15D	; MATSUHARA
C29CD4:  dw $A108,$A1A3	; HIROSHI
C29CD8:  dw $A110,$A1E9	; HARATA
C29CDC:  dw $A117,$A22F	; SATOCHI
C29CE0:  dw $A11F,$A275	; OGATA
C29CE4:  dw $A125,$A2BB	; AKIHIRO
C29CE8:  dw $A12D,$A301	; YAMAGOSHI
C29CEC:  dw $A13D,$9FB9	; MINORU
C29CF0:  dw $A144,$9FFF	; AKAO
C29CF4:  dw $A152,$A045	; HIROKATSU
C29CF8:  dw $A15C,$A08B	; SASAKI
C29CFC:  dw $A163,$A0D1	; TAKAHARU
C29D00:  dw $A16C,$A117	; MATSUO
C29D04:  dw $A173,$A15D	; YUUSUKE
C29D08:  dw $A17B,$A1A3	; NAORA
C29D0C:  dw $A181,$A1E9	; NOBUYUKI
C29D10:  dw $A18A,$A22F	; IKEDA
C29D14:  dw $A190,$A275	; TOMOE
C29D18:  dw $A196,$A2BB	; INAZAWA
C29D1C:  dw $A19E,$A301	; KAORI
C29D20:  dw $A1A4,$A347	; TANAKA
C29D24:  dw $A1AB,$A38D	; TAKAMICHI
C29D28:  dw $A1B5,$A3D3	; SHIBUYA
C29D2C:  dw $A1BD,$A531	; SINITIROU
C29D30:  dw $A1C7,$A45F	; HAMASAKA
C29D34:  dw $A1D0,$A4A5	; AKIYOSHI
C29D38:  dw $A1D9,$A4EB	; MASUDA
C29D3C:  dw $A1E0,$A419	; HIDETOSHI
C29D40:  dw $A1EA,$A5BD	; KEZUKA
C29D44:  dw $A1F9,$A603	; HITOSHI
C29D48:  dw $A208,$A649	; KAZUHIRO
C29D4C:  dw $A211,$A68F	; OHKAWA
C29D50:  dw $A221,$9FB9	; EIJI
C29D54:  dw $A226,$9FFF	; NAKAMURA
C29D58:  dw $A22F,$A045	; KAZUMI
C29D5C:  dw $A236,$A08B	; MITOME
C29D60:  dw $A23D,$A0D1	; YOSHITAKA
C29D64:  dw $A247,$A117	; HIROTA
C29D68:  dw $A24E,$A15D	; YASUMASA
C29D6C:  dw $A257,$A1A3	; OKAMOTO
C29D70:  dw $A25F,$A1E9	; SHUN
C29D74:  dw $A264,$A22F	; OHKUBO
C29D78:  dw $A272,$A275	; WEIMIN
C29D7C:  dw $A279,$A2BB	; LI
C29D80:  dw $A27C,$A301	; AIKO
C29D84:  dw $A281,$A347	; ITO
C29D88:  dw $A285,$A761	; TED
C29D8C:  dw $A289,$A7A7	; WOOLSEY
C29D90:  dw $A298,$A38D	; MASAHIRO
C29D94:  dw $A2A1,$A3D3	; NAKAJIMA
C29D98:  dw $A2AA,$A419	; MITSUO
C29D9C:  dw $A2B1,$A45F	; OGURA
C29DA0:  dw $A2B7,$A4A5	; YASUNORI
C29DA4:  dw $A2C0,$A4EB	; ORIKASA
C29DA8:  dw $A2C8,$A531	; YUTAKA
C29DAC:  dw $A2CF,$A577	; OHDAIRA
C29DB0:  dw $A2E1,$A649	; TETSUO
C29DB4:  dw $A2E8,$A68F	; MIZUNO
C29DB8:  dw $A2EF,$A6D5	; HITOSHI
C29DBC:  dw $A2F7,$A71B	; TAKEMURA

; Source and destination for small credits
C29DC0:  dw $9F98,$9D89	; producer
C29DC4:  dw $9FB4,$9D89	; director
C29DC8:  dw $9FDC,$9DCF	; main
C29DCC:  dw $9FE1,$9E15	; programmer
C29DD0:  dw $A006,$9E5B	; graphic
C29DD4:  dw $A00E,$9EA1	; director
C29DD8:  dw $A04C,$9EE7	; music
C29DDC:  dw $A060,$A5BD	; image
C29DE0:  dw $A066,$A603	; design
C29DE4:  dw $A07D,$A649	; battle
C29DE8:  dw $A084,$A68F	; planner
C29DEC:  dw $A0AA,$9EA1	; field
C29DF0:  dw $A0DA,$9D89	; event
C29DF4:  dw $A084,$9DCF	; planner
C29DF8:  dw $A101,$9E15	; effect
C29DFC:  dw $9FE1,$9E5B	; programmer
C29E00:  dw $A07D,$A68F	; battle
C29E04:  dw $A137,$9D89	; sound
C29E08:  dw $9FE1,$9DCF	; programmer
C29E0C:  dw $A101,$9E15	; effect
C29E10:  dw $A006,$9E5B	; graphic
C29E14:  dw $A149,$9EA1	; designer
C29E18:  dw $A0AA,$9EE7	; field
C29E1C:  dw $A1F1,$9F2D	; monster
C29E20:  dw $A201,$9F73	; object
C29E24:  dw $A137,$9D89	; sound
C29E28:  dw $A218,$9DCF	; engineer
C29E2C:  dw $A101,$9E15	; effect
C29E30:  dw $A26B,$9E5B	; remake
C29E34:  dw $A084,$9EA1	; planner
C29E38:  dw $A291,$9EE7	; system
C29E3C:  dw $A2D7,$9F2D	; executive
C29E40:  dw $9F98,$9F73	; producer
C29E44:  dw $A64F,$A7ED	; translator
C29E48:  dw $A300,$9D89	; test
C29E4C:  dw $A305,$9DCF	; coordinator
C29E50:  dw $A359,$9E15	; special
C29E54:  dw $A361,$9E5B	; thanks
C29E58:  dw $A368,$9EA1	; to
C29E5C:  dw $A311,$9F73	; s.kajitani
C29E60:  dw $A31C,$9FB9	; r.kouda
C29E64:  dw $A324,$9FFF	; k.inagi
C29E68:  dw $A32C,$A045	; n.hanada
C29E6C:  dw $A335,$A08B	; h.masuda
C29E70:  dw $A33E,$A0D1	; n.kanai
C29E74:  dw $A346,$A117	; h.sakurai
C29E78:  dw $A350,$A15D	; h.suzuki
C29E7C:  dw $A36B,$A1A3	; m.miyamoto
C29E80:  dw $A376,$A1E9	; k.torishima
C29E84:  dw $A382,$A22F	; h.hashimoto
C29E88:  dw $A38E,$A275	; y.hirata
C29E8C:  dw $A397,$A2BB	; t.nomura
C29E90:  dw $A3A0,$A301	; k.sousui
C29E94:  dw $A3A9,$A347	; t.tsuruzono
C29E98:  dw $A3B5,$A38D	; y.ishida
C29E9C:  dw $A3BE,$A3D3	; m.okamiya
C29EA0:  dw $A3C8,$A419	; k.hirata
C29EA4:  dw $A408,$A45F	; k.oogo
C29EA8:  dw $A40F,$A4A5	; h.suzuki
C29EAC:  dw $A418,$A4EB	; h.yokota
C29EB0:  dw $A421,$A531	; k.yamashita
C29EB4:  dw $A42D,$A577	; m.yumoto
C29EB8:  dw $A436,$A5BD	; n.ishikawa
C29EBC:  dw $A441,$A603	; h.kizuka
C29EC0:  dw $A44A,$A649	; s.arai
C29EC4:  dw $A451,$A68F	; m.kouno
C29EC8:  dw $A459,$A6D5	; r.tsukakoshi
C29ECC:  dw $A51C,$AE7D	; k.miyamoto
C29ED0:  dw $A527,$AEC3	; h.suzuki
C29ED4:  dw $A530,$AF09	; a.kawazu
C29ED8:  dw $A539,$A9D7	; c.fujioka
C29EDC:  dw $A543,$AA1D	; h.kobayashi
C29EE0:  dw $A54F,$AA63	; h.tanaka
C29EE4:  dw $A558,$AAEF	; t.mikasa
C29EE8:  dw $A561,$AB35	; h.nishida
C29EEC:  dw $A56B,$AB7B	; t.takechi
C29EF0:  dw $A4F5,$A991	; k.adachi
C29EF4:  dw $A466,$B021	; k.kaneko
C29EF8:  dw $A46F,$B067	; h.shimodaira
C29EFC:  dw $A47C,$B0AD	; m.noumura
C29F00:  dw $A4FE,$B139	; y.uenishi
C29F04:  dw $A508,$B17F	; y.ohkawa
C29F08:  dw $A511,$B1C5	; y.kuwahara
C29F0C:  dw $A3D1,$B20B	; n.watanabe
C29F10:  dw $A3DC,$B251	; k.maeda
C29F14:  dw $A3E4,$B297	; k.tanikawa
C29F18:  dw $A3EF,$B2DD	; j.saito
C29F1C:  dw $A3F7,$B323	; m.denno
C29F20:  dw $A3FF,$B369	; s.hidaki
C29F24:  dw $A63C,$B4C7	; y.matsumura
C29F28:  dw $A648,$B50D	; a.ueda
C29F2C:  dw $A4A4,$A71B	; m.mori
C29F30:  dw $A4AB,$A761	; t.ohno
C29F34:  dw $A4B2,$A7A7	; m.someno
C29F38:  dw $A486,$AFDB	; m.kaneshige
C29F3C:  dw $A492,$B021	; h.noguchi
C29F40:  dw $A49C,$B067	; m.horie
C29F44:  dw $A4BB,$A7ED	; t.morita
C29F48:  dw $A4C4,$A833	; y.suemitsu
C29F4C:  dw $A4CF,$A879	; w.sato
C29F50:  dw $A4D6,$A8BF	; h.nakamura
C29F54:  dw $A4E1,$A905	; s.aoyama
C29F58:  dw $A4EA,$A94B	; h.nagahara
C29F5C:  dw $A575,$ABC1	; rich silveira
C29F60:  dw $A583,$AC07	; toshi horii
C29F64:  dw $A58F,$AC4D	; j.yanagihara
C29F68:  dw $A59C,$AC93	; nathan williams
C29F6C:  dw $A5AC,$ACD9	; james gillis
C29F70:  dw $A5B9,$AD1F	; chris budd
C29F74:  dw $A5C4,$AD65	; mike markey
C29F78:  dw $A5D0,$ADAB	; mirko freguia
C29F7C:  dw $A5DE,$ADF1	; doug smith
C29F80:  dw $A5E9,$AE37	; dalen abraham
C29F84:  dw $A5F7,$AE7D	; rebecca coffman
C29F88:  dw $A607,$AEC3	; brian fehdrau
C29F8C:  dw $A615,$AF09	; jeff petkau
C29F90:  dw $A621,$AF4F	; george sinfield
C29F94:  dw $A631,$AF95	; alan weiss

; Source bank is C2. Destination bank is 7E. Destination area starts with
; the animation script. The first word is a pose pointer, which points to
; the fourth byte. Following that is the pose timer, which is set to
; infinite. The last part holds the tile count and OAM for that single pose.


; Text for end credits
table ff3us_C2_credits.tbl,rtl
C29F98:  db "producer",$00
C29FA1:  db "HIRONOBU",$00
C29FAA:  db "SAKAGUCHI",$00
C29FB4:  db "director",$00
C29FBD:  db "YOSHINORI",$00
C29FC7:  db "KITASE",$00
C29FCE:  db "HIROYUKI",$00
C29FD7:  db "ITOU",$00
C29FDC:  db "main",$00
C29FE1:  db "programmer",$00
C29FEC:  db "KEN",$00
C29FF0:  db "NARITA",$00
C29FF7:  db "KIYOSHI",$00
C29FFF:  db "YOSHII",$00
C2A006:  db "graphic",$00
C2A00E:  db "director",$00
C2A017:  db "TETSUYA",$00
C2A01F:  db "TAKAHASHI",$00
C2A029:  db "KAZUKO",$00
C2A030:  db "SHIBUYA",$00
C2A038:  db "HIDEO",$00
C2A03E:  db "MINABA",$00
C2A045:  db "NOMURA",$00
C2A04C:  db "music",$00
C2A052:  db "NOBUO",$00
C2A058:  db "UEMATSU",$00
C2A060:  db "image",$00
C2A066:  db "design",$00
C2A06D:  db "YOSHITAKA",$00
C2A077:  db "AMANO",$00
C2A07D:  db "battle",$00
C2A084:  db "planner",$00
C2A08C:  db "YASUYUKI",$00
C2A095:  db "HASEBE",$00
C2A09C:  db "AKIYOSHI",$00
C2A0A5:  db "OOTA",$00
C2A0AA:  db "field",$00
C2A0B0:  db "YOSHIHIKO",$00
C2A0BA:  db "MAEKAWA",$00
C2A0C2:  db "KEITA",$00
C2A0C8:  db "ETOH",$00
C2A0CD:  db "SATORU",$00
C2A0D4:  db "TSUJI",$00
C2A0DA:  db "event",$00
C2A0E0:  db "TSUKASA",$00
C2A0E8:  db "FUJITA",$00
C2A0EF:  db "KEISUKE",$00
C2A0F7:  db "MATSUHARA",$00
C2A101:  db "effect",$00
C2A108:  db "HIROSHI",$00
C2A110:  db "HARATA",$00
C2A117:  db "SATOSHI",$00
C2A11F:  db "OGATA",$00
C2A125:  db "AKIHIRO",$00
C2A12D:  db "YAMAGUCHI",$00
C2A137:  db "sound",$00
C2A13D:  db "MINORU",$00
C2A144:  db "AKAO",$00
C2A149:  db "designer",$00
C2A152:  db "HIROKATSU",$00
C2A15C:  db "SASAKI",$00
C2A163:  db "TAKAHARU",$00
C2A16C:  db "MATSUO",$00
C2A173:  db "YUUSUKE",$00
C2A17B:  db "NAORA",$00
C2A181:  db "NOBUYUKI",$00
C2A18A:  db "IKEDA",$00
C2A190:  db "TOMOE",$00
C2A196:  db "INAZAWA",$00
C2A19E:  db "KAORI",$00
C2A1A4:  db "TANAKA",$00
C2A1AB:  db "TAKAMICHI",$00
C2A1B5:  db "SHIBUYA",$00
C2A1BD:  db "SINITIROU",$00
C2A1C7:  db "HAMASAKA",$00
C2A1D0:  db "AKIYOSHI",$00
C2A1D9:  db "MASUDA",$00
C2A1E0:  db "HIDETOSHI",$00
C2A1EA:  db "KEZUKA",$00
C2A1F1:  db "monster",$00
C2A1F9:  db "HITOSHI",$00
C2A201:  db "object",$00
C2A208:  db "KAZUHIRO",$00
C2A211:  db "OHKAWA",$00
C2A218:  db "engineer",$00
C2A221:  db "EIJI",$00
C2A226:  db "NAKAMURA",$00
C2A22F:  db "KAZUMI",$00
C2A236:  db "MITOME",$00
C2A23D:  db "YOSHITAKA",$00
C2A247:  db "HIROTA",$00
C2A24E:  db "YASUMASA",$00
C2A257:  db "OKAMOTO",$00
C2A25F:  db "SHUN",$00
C2A264:  db "OHKUBO",$00
C2A26B:  db "remake",$00
C2A272:  db "WEIMIN",$00
C2A279:  db "LI",$00
C2A27C:  db "AIKO",$00
C2A281:  db "ITO",$00
C2A285:  db "TED",$00
C2A289:  db "WOOLSEY",$00
C2A291:  db "system",$00
C2A298:  db "MASAHIRO",$00
C2A2A1:  db "NAKAJIMA",$00
C2A2AA:  db "MITSUO",$00
C2A2B1:  db "OGURA",$00
C2A2B7:  db "YASUNORI",$00
C2A2C0:  db "ORIKASA",$00
C2A2C8:  db "YUTAKA",$00
C2A2CF:  db "OHDAIRA",$00
C2A2D7:  db "executive",$00
C2A2E1:  db "TETSUO",$00
C2A2E8:  db "MIZUNO",$00
C2A2EF:  db "HITOSHI",$00
C2A2F7:  db "TAKEMURA",$00
C2A300:  db "test",$00
C2A305:  db "coordinator",$00
C2A311:  db "s.kajitani",$00
C2A31C:  db "r.kouda",$00
C2A324:  db "k.inagi",$00
C2A32C:  db "n.hanada",$00
C2A335:  db "h.masuda",$00
C2A33E:  db "n.kanai",$00
C2A346:  db "h.sakurai",$00
C2A350:  db "h.suzuki",$00
C2A359:  db "special",$00
C2A361:  db "thanks",$00
C2A368:  db "to",$00
C2A36B:  db "m.miyamoto",$00
C2A376:  db "k.torishima",$00
C2A382:  db "h.hashimoto",$00
C2A38E:  db "y.hirata",$00
C2A397:  db "t.nomura",$00
C2A3A0:  db "k.sousui",$00
C2A3A9:  db "t.tsuruzono",$00
C2A3B5:  db "y.ishida",$00
C2A3BE:  db "m.okamiya",$00
C2A3C8:  db "k.hirata",$00
C2A3D1:  db "n.watanabe",$00
C2A3DC:  db "k.maeda",$00
C2A3E4:  db "k.tanikawa",$00
C2A3EF:  db "j.saito",$00
C2A3F7:  db "m.denno",$00
C2A3FF:  db "s.hidaki",$00
C2A408:  db "k.oogo",$00
C2A40F:  db "h.suzuki",$00
C2A418:  db "h.yokota",$00
C2A421:  db "k.yamashita",$00
C2A42D:  db "m.yumoto",$00
C2A436:  db "n.ishikawa",$00
C2A441:  db "h.kizuka",$00
C2A44A:  db "s.arai",$00
C2A451:  db "m.kouno",$00
C2A459:  db "r.tsukakoshi",$00
C2A466:  db "k.kaneko",$00
C2A46F:  db "h.shimodaira",$00
C2A47C:  db "m.noumura",$00
C2A486:  db "m.kaneshige",$00
C2A492:  db "h.noguchi",$00
C2A49C:  db "m.horie",$00
C2A4A4:  db "m.mori",$00
C2A4AB:  db "t.ohno",$00
C2A4B2:  db "m.someno",$00
C2A4BB:  db "t.morita",$00
C2A4C4:  db "y.suemitsu",$00
C2A4CF:  db "w.sato",$00
C2A4D6:  db "h.nakamura",$00
C2A4E1:  db "s.aoyama",$00
C2A4EA:  db "h.nagahara",$00
C2A4F5:  db "k.adachi",$00
C2A4FE:  db "y.uenishi",$00
C2A508:  db "y.ohkawa",$00
C2A511:  db "y.kuwahara",$00
C2A51C:  db "k.miyamoto",$00
C2A527:  db "h.suzuki",$00
C2A530:  db "a.kawazu",$00
C2A539:  db "c.fujioka",$00
C2A543:  db "h.kobayashi",$00
C2A54F:  db "h.tanaka",$00
C2A558:  db "t.mikasa",$00
C2A561:  db "h.nishida",$00
C2A56B:  db "t.takechi",$00
C2A575:  db "rich silveira",$00
C2A583:  db "toshi horii",$00
C2A58F:  db "j.yanagihara",$00
C2A59C:  db "nathan williams",$00
C2A5AC:  db "james gillis",$00
C2A5B9:  db "chris budd",$00
C2A5C4:  db "mike markey",$00
C2A5D0:  db "mirko freguia",$00
C2A5DE:  db "doug smith",$00
C2A5E9:  db "dalen abraham",$00
C2A5F7:  db "rebecca coffman",$00
C2A607:  db "brian fehdrau",$00
C2A615:  db "jeff petkau",$00
C2A621:  db "george sinfield",$00
C2A631:  db "alan weiss",$00
C2A63C:  db "y.matsumura",$00
C2A648:  db "a.ueda",$00
C2A64F:  db "translator",$00

; Unused Space (422 bytes)(C2/A65A - C2/A7FF)
C2A65A:  dd $FFFFFFFF
C2A65E:  dd $FFFFFFFF
C2A662:  dd $FFFFFFFF
C2A666:  dd $FFFFFFFF
C2A66A:  dd $FFFFFFFF
C2A66E:  dd $FFFFFFFF
C2A672:  dd $FFFFFFFF
C2A676:  dd $FFFFFFFF
C2A67A:  dd $FFFFFFFF
C2A67E:  dd $FFFFFFFF
C2A682:  dd $FFFFFFFF
C2A686:  dd $FFFFFFFF
C2A68A:  dd $FFFFFFFF
C2A68E:  dd $FFFFFFFF
C2A692:  dd $FFFFFFFF
C2A696:  dd $FFFFFFFF
C2A69A:  dd $FFFFFFFF
C2A69E:  dd $FFFFFFFF
C2A6A2:  dd $FFFFFFFF
C2A6A6:  dd $FFFFFFFF
C2A6AA:  dd $FFFFFFFF
C2A6AE:  dd $FFFFFFFF
C2A6B2:  dd $FFFFFFFF
C2A6B6:  dd $FFFFFFFF
C2A6BA:  dd $FFFFFFFF
C2A6BE:  dd $FFFFFFFF
C2A6C2:  dd $FFFFFFFF
C2A6C6:  dd $FFFFFFFF
C2A6CA:  dd $FFFFFFFF
C2A6CE:  dd $FFFFFFFF
C2A6D2:  dd $FFFFFFFF
C2A6D6:  dd $FFFFFFFF
C2A6DA:  dd $FFFFFFFF
C2A6DE:  dd $FFFFFFFF
C2A6E2:  dd $FFFFFFFF
C2A6E6:  dd $FFFFFFFF
C2A6EA:  dd $FFFFFFFF
C2A6EE:  dd $FFFFFFFF
C2A6F2:  dd $FFFFFFFF
C2A6F6:  dd $FFFFFFFF
C2A6FA:  dd $FFFFFFFF
C2A6FE:  dd $FFFFFFFF
C2A702:  dd $FFFFFFFF
C2A706:  dd $FFFFFFFF
C2A70A:  dd $FFFFFFFF
C2A70E:  dd $FFFFFFFF
C2A712:  dd $FFFFFFFF
C2A716:  dd $FFFFFFFF
C2A71A:  dd $FFFFFFFF
C2A71E:  dd $FFFFFFFF
C2A722:  dd $FFFFFFFF
C2A726:  dd $FFFFFFFF
C2A72A:  dd $FFFFFFFF
C2A72E:  dd $FFFFFFFF
C2A732:  dd $FFFFFFFF
C2A736:  dd $FFFFFFFF
C2A73A:  dd $FFFFFFFF
C2A73E:  dd $FFFFFFFF
C2A742:  dd $FFFFFFFF
C2A746:  dd $FFFFFFFF
C2A74A:  dd $FFFFFFFF
C2A74E:  dd $FFFFFFFF
C2A752:  dd $FFFFFFFF
C2A756:  dd $FFFFFFFF
C2A75A:  dd $FFFFFFFF
C2A75E:  dd $FFFFFFFF
C2A762:  dd $FFFFFFFF
C2A766:  dd $FFFFFFFF
C2A76A:  dd $FFFFFFFF
C2A76E:  dd $FFFFFFFF
C2A772:  dd $FFFFFFFF
C2A776:  dd $FFFFFFFF
C2A77A:  dd $FFFFFFFF
C2A77E:  dd $FFFFFFFF
C2A782:  dd $FFFFFFFF
C2A786:  dd $FFFFFFFF
C2A78A:  dd $FFFFFFFF
C2A78E:  dd $FFFFFFFF
C2A792:  dd $FFFFFFFF
C2A796:  dd $FFFFFFFF
C2A79A:  dd $FFFFFFFF
C2A79E:  dd $FFFFFFFF
C2A7A2:  dd $FFFFFFFF
C2A7A6:  dd $FFFFFFFF
C2A7AA:  dd $FFFFFFFF
C2A7AE:  dd $FFFFFFFF
C2A7B2:  dd $FFFFFFFF
C2A7B6:  dd $FFFFFFFF
C2A7BA:  dd $FFFFFFFF
C2A7BE:  dd $FFFFFFFF
C2A7C2:  dd $FFFFFFFF
C2A7C6:  dd $FFFFFFFF
C2A7CA:  dd $FFFFFFFF
C2A7CE:  dd $FFFFFFFF
C2A7D2:  dd $FFFFFFFF
C2A7D6:  dd $FFFFFFFF
C2A7DA:  dd $FFFFFFFF
C2A7DE:  dd $FFFFFFFF
C2A7E2:  dd $FFFFFFFF
C2A7E6:  dd $FFFFFFFF
C2A7EA:  dd $FFFFFFFF
C2A7EE:  dd $FFFFFFFF
C2A7F2:  dd $FFFFFFFF
C2A7F6:  dd $FFFFFFFF
C2A7FA:  dd $FFFFFFFF
C2A7FE:  dw $FFFF


; ******************************************************
; Battle Graphics Program (continued)(C2/A800 - C2/FAA3)
; ******************************************************

; Slot Reel 1 conversion data - get a slot value based on the reel's current position
; Note the game scrolls backwards from the starting 7 symbol, so we begin
; With C2/A800, then work our way up from the bottom at C2/A81E, and repeat.
C2A800:  dw $0000    	; 7
C2A802:  dw $0004    	; Chocobo
C2A804:  dw $0005    	; Diamond
C2A806:  dw $0003    	; Ship
C2A808:  dw $0004    	; Chocobo
C2A80A:  dw $0005    	; Diamond
C2A80C:  dw $0002    	; Bar
C2A80E:  dw $0005    	; Diamond
C2A810:  dw $0001    	; Dragon
C2A812:  dw $0004    	; Chocobo
C2A814:  dw $0005    	; Diamond
C2A816:  dw $0003    	; Ship
C2A818:  dw $0005    	; Diamond
C2A81A:  dw $0002    	; Bar
C2A81C:  dw $0003    	; Ship
C2A81E:  dw $0001    	; Dragon

; Slot Reel 2 conversion data - get a slot value based on the reel's current position
; Note the game scrolls backwards from the starting 7 symbol, so we begin
; With C2/A820, then work our way up from the bottom at C2/A83E, and repeat.
C2A820:  dw $0000    	; 7
C2A822:  dw $0004    	; Chocobo
C2A824:  dw $0001    	; Dragon
C2A826:  dw $0005    	; Diamond
C2A828:  dw $0003    	; Ship
C2A82A:  dw $0004    	; Chocobo
C2A82C:  dw $0001    	; Dragon
C2A82E:  dw $0005    	; Diamond
C2A830:  dw $0004    	; Chocobo
C2A832:  dw $0003    	; Ship
C2A834:  dw $0002    	; Bar
C2A836:  dw $0005    	; Diamond
C2A838:  dw $0004    	; Chocobo
C2A83A:  dw $0003    	; Ship
C2A83C:  dw $0002    	; Bar
C2A83E:  dw $0005    	; Diamond

; Slot Reel 3 conversion data - get a slot value based on the reel's current position
; Note the game scrolls backwards from the starting 7 symbol, so we begin
; With C2/A840, then work our way up from the bottom at C2/A85E, and repeat.
C2A840:  dw $0000    	; 7
C2A842:  dw $0001    	; Dragon
C2A844:  dw $0003    	; Ship
C2A846:  dw $0004    	; Chocobo
C2A848:  dw $0002    	; Bar
C2A84A:  dw $0005    	; Diamond
C2A84C:  dw $0004    	; Chocobo
C2A84E:  dw $0003    	; Ship
C2A850:  dw $0001    	; Dragon
C2A852:  dw $0005    	; Diamond
C2A854:  dw $0004    	; Chocobo
C2A856:  dw $0003    	; Ship
C2A858:  dw $0002    	; Bar
C2A85A:  dw $0005    	; Diamond
C2A85C:  dw $0004    	; Chocobo
C2A85E:  dw $0005    	; Diamond

; Data?
C2A860:  dw $2121
C2A862:  dw $2121
C2A864:  dw $2121
C2A866:  dw $2121

C2A868:  dw $2525
C2A86A:  dw $2525
C2A86C:  dw $2525
C2A86E:  db $25

; Amount to shift character's horizontal position at a time when
; using Row command - if new row is back row.  Note that this
; adjustment is done six times in succession.
                        ; Encounter formation
C2A86F:  db $02      	; Front
C2A870:  db $02
C2A871:  db $02
C2A872:  db $02

C2A873:  db $FE      	; Back
C2A874:  db $FE
C2A875:  db $FE
C2A876:  db $FE

C2A877:  db $00      	; Pincer
C2A878:  db $00
C2A879:  db $00
C2A87A:  db $00

C2A87B:  db $02      	; Side
C2A87C:  db $02
C2A87D:  db $FE
C2A87E:  db $FE

; Amount to shift character's horizontal position at a time when
; using Row command - if new row is front row.  Note that this
; adjustment is done six times in succession.
                  ; Encounter formation
C2A87F:  db $FE      	; Front
C2A880:  db $FE
C2A881:  db $FE
C2A882:  db $FE

C2A883:  db $02      	; Back
C2A884:  db $02
C2A885:  db $02
C2A886:  db $02

C2A887:  db $00      	; Pincer
C2A888:  db $00
C2A889:  db $00
C2A88A:  db $00

C2A88B:  db $FE      	; Side
C2A88C:  db $FE
C2A88D:  db $02
C2A88E:  db $02

; This function sets up DMA channel 7. Called from C1/0BDD.
C2A88F:  LDA $9A
C2A891:  BEQ C2A8D1     ; +62
C2A893:  LDA $0E
C2A895:  AND #$07
C2A897:  TAX
C2A898:  LDA C2E4E3,X
C2A89C:  STA $004374    ; 7th DMA channel source bank
C2A8A0:  TXA
C2A8A1:  ASL
C2A8A2:  TAX
C2A8A3:  REP #$20       ; 16-bit A
C2A8A5:  LDA C2E4C3,X
C2A8A9:  STA $002116    ; Video address
C2A8AD:  LDA C2E4D3,X
C2A8B1:  STA $004372    ; 7th DMA channel source offset
C2A8B5:  LDA #$0800     ; 2,048
C2A8B8:  STA $004375    ; 7th DMA channel source size
C2A8BC:  TDC
C2A8BD:  SEP #$20       ; 8-bit A
C2A8BF:  LDA #$01       ; 1
C2A8C1:  STA $004370    ; 7th DMA channel control
C2A8C5:  LDA #$18       ; 24
C2A8C7:  STA $004371    ; 7th DMA channel destination
C2A8CB:  LDA #$80       ; -128
C2A8CD:  STA $00420B    ; Enable 7th DMA channel
C2A8D1:  RTL

; This is NOT free space. It is data.
C2A8D2:  db $FF
C2A8D3:  db $FF
C2A8D4:  db $FF
C2A8D5:  db $FF
C2A8D6:  db $FF
C2A8D7:  db $FF
C2A8D8:  db $FF
C2A8D9:  db $FF
C2A8DA:  db $FF
C2A8DB:  db $FF
C2A8DC:  db $FF
C2A8DD:  db $FF
C2A8DE:  db $FF
C2A8DF:  db $FF
C2A8E0:  db $FF
C2A8E1:  db $FF
C2A8E2:  db $7F
C2A8E3:  db $FF
C2A8E4:  db $FB
C2A8E5:  db $FF
C2A8E6:  db $EF
C2A8E7:  db $FF
C2A8E8:  db $DF
C2A8E9:  db $FF
C2A8EA:  db $FD
C2A8EB:  db $FF
C2A8EC:  db $F7
C2A8ED:  db $FF
C2A8EE:  db $FE
C2A8EF:  db $FF
C2A8F0:  db $BF
C2A8F1:  db $FF
C2A8F2:  db $FF
C2A8F3:  db $FD
C2A8F4:  db $FF
C2A8F5:  db $EF
C2A8F6:  db $FF
C2A8F7:  db $F7
C2A8F8:  db $FF
C2A8F9:  db $BF
C2A8FA:  db $FF
C2A8FB:  db $FE
C2A8FC:  db $FF
C2A8FD:  db $7F
C2A8FE:  db $FF
C2A8FF:  db $DF
C2A900:  db $FF
C2A901:  db $FB
C2A902:  db $7F
C2A903:  db $FF
C2A904:  db $FB
C2A905:  db $FF
C2A906:  db $EF
C2A907:  db $FF
C2A908:  db $DF
C2A909:  db $FF
C2A90A:  db $FD
C2A90B:  db $FF
C2A90C:  db $F7
C2A90D:  db $FF
C2A90E:  db $FE
C2A90F:  db $FF
C2A910:  db $BF
C2A911:  db $FF
C2A912:  db $FF
C2A913:  db $FD
C2A914:  db $FF
C2A915:  db $EF
C2A916:  db $FF
C2A917:  db $F7
C2A918:  db $FF
C2A919:  db $BF
C2A91A:  db $FF
C2A91B:  db $FE
C2A91C:  db $FF
C2A91D:  db $7F
C2A91E:  db $FF
C2A91F:  db $DF
C2A920:  db $FF
C2A921:  db $FB
C2A922:  db $7F
C2A923:  db $FF
C2A924:  db $FB
C2A925:  db $FF
C2A926:  db $EF
C2A927:  db $FF
C2A928:  db $DF
C2A929:  db $FF
C2A92A:  db $FD
C2A92B:  db $FF
C2A92C:  db $F7
C2A92D:  db $FF
C2A92E:  db $FE
C2A92F:  db $FF
C2A930:  db $BF
C2A931:  db $FF
C2A932:  db $FF
C2A933:  db $FD
C2A934:  db $FF
C2A935:  db $EF
C2A936:  db $FF
C2A937:  db $F7
C2A938:  db $FF
C2A939:  db $BF
C2A93A:  db $FF
C2A93B:  db $FE
C2A93C:  db $FF
C2A93D:  db $7F
C2A93E:  db $FF
C2A93F:  db $DF
C2A940:  db $FF
C2A941:  db $FB

; Called from C2/AA42 and C2/AA53.
C2A942:  LDX $ECEC
C2A945:  CPX #$000C     ; 12
C2A948:  BCC C2A960     ; Just want to point out that there's a closer RTS...
C2A94A:  DEC $ECEE
C2A94D:  BNE C2A955     ; +6
C2A94F:  LDA #$04       ; 4
C2A951:  STA $ECEE
C2A954:  RTS

C2A955:  REP #$20       ; 16-bit A
C2A957:  DEC $64B6      ; Decrease battle info window X-offset
C2A95A:  INC $80CF      ; Increase enemy's Y-coordinate - not sure whether this means moving it up or down
C2A95D:  TDC
C2A95E:  SEP #$20       ; 8-bit A
C2A960:  RTS

; Call C1/022A a certain number of times.
C2A961:  PHA
C2A962:  JSL C10226
C2A966:  PLA
C2A967:  DEC
C2A968:  BNE C2A961     ; -9
C2A96A:  RTS

; Called from C1/91D7.
C2A96B:  INC $9A
C2A96D:  INC $628B
C2A970:  LDX #$FFFF     ; -1
C2A973:  STX $4001
C2A976:  STX $4003
C2A979:  LDA #$01       ; 1
C2A97B:  STA $ECEE
C2A97E:  INC $7B0C
C2A981:  LDA #$16       ; 22
C2A983:  STA $898D      ; Something about which layers to show
C2A986:  TDC            ; A = 0
C2A987:  TAX            ; X = 0
C2A988:  LDA $7F00,X    ; Copy palette 8 to palette 3
C2A98B:  STA $7E60,X
C2A98E:  INX
C2A98F:  CPX #$0020     ; 32
C2A992:  BNE C2A988     ; -12
C2A994:  TDC            ; A = 0
C2A995:  TAX            ; X = 0
C2A996:  PHB
C2A997:  LDA #$7F
C2A999:  PHA
C2A99A:  PLB            ; Data bank register now points to bank $7F
C2A99B:  REP #$20       ; 16-bit A
C2A99D:  STZ $C400,X
C2A9A0:  INX
C2A9A1:  INX
C2A9A2:  CPX #$1000     ; 4,096
C2A9A5:  BNE C2A99D     ; -10
C2A9A7:  TDC            ; A = 0
C2A9A8:  TAX            ; X = 0
C2A9A9:  LDA #$2C00     ; 11,264
C2A9AC:  STA $12
C2A9AE:  LDA #$0010     ; 16
C2A9B1:  STA $10
C2A9B3:  LDA $12
C2A9B5:  STA $C400,X
C2A9B8:  INX
C2A9B9:  INX
C2A9BA:  INC
C2A9BB:  DEC $10
C2A9BD:  BNE C2A9B5     ; -10
C2A9BF:  STA $12
C2A9C1:  TXA
C2A9C2:  CLC
C2A9C3:  ADC #$0020     ; 32
C2A9C6:  TAX
C2A9C7:  CPX #$0400     ; 1,024
C2A9CA:  BNE C2A9AE     ; -30
C2A9CC:  LDA #$FFF0     ; -16
C2A9CF:  STA $7E64B4    ; Battle info window X-offset
C2A9D3:  STA $7E7B16
C2A9D7:  STA $7E64B6    ; Battle info window Y-offset
C2A9DB:  STA $7E7B18
C2A9DF:  TDC
C2A9E0:  STA $7E7B1D
C2A9E4:  STA $7E7B1F
C2A9E8:  SEP #$20       ; 8-bit A
C2A9EA:  PLB
C2A9EB:  LDX #$1000     ; 4,096
C2A9EE:  STX $10
C2A9F0:  LDX #$C400     ; -15,360
C2A9F3:  LDY #$4800     ; 18,432
C2A9F6:  LDA #$7F
C2A9F8:  JSL C11989
C2A9FC:  LDA $896F
C2A9FF:  AND #$AF
C2AA01:  STA $896F      ; TRB would've worked...
C2AA04:  LDA #$4A       ; 74
C2AA06:  STA $8971
C2AA09:  TDC            ; A = 0
C2AA0A:  TAX            ; X = 0
C2AA0B:  STX $ECEC
C2AA0E:  PHB
C2AA0F:  LDA #$7F
C2AA11:  PHA
C2AA12:  PLB
C2AA13:  REP #$20       ; 16-bit A
C2AA15:  STZ $C400,X
C2AA18:  INX
C2AA19:  INX
C2AA1A:  CPX #$2000     ; 8,192
C2AA1D:  BNE C2AA15     ; -10
C2AA1F:  TDC
C2AA20:  SEP #$20       ; 8-bit A
C2AA22:  PLB
C2AA23:  TDC            ; A = 0
C2AA24:  TAX            ; X = 0
C2AA25:  STA $ECBC,X
C2AA28:  STZ $ECCC,X
C2AA2B:  CLC
C2AA2C:  ADC #$04       ; 4
C2AA2E:  INX
C2AA2F:  CPX #$0010     ; 16
C2AA32:  BNE C2AA25     ; -15
C2AA34:  LDA #$08       ; 8
C2AA36:  JSR $A961      ; Call C1/022A 8 times
C2AA39:  LDA #$17       ; 23
C2AA3B:  STA $898D
C2AA3E:  JSL C10226
C2AA42:  JSR C2A942
C2AA45:  JSR C2AAF8
C2AA48:  JSL C10226
C2AA4C:  JSR C2AAF8
C2AA4F:  JSL C10226
C2AA53:  JSR C2A942
C2AA56:  JSR C2AAF8
C2AA59:  JSL C10226
C2AA5D:  JSR C2AAF8
C2AA60:  LDX #$CC3F     ; -13,249
C2AA63:  STX $10
C2AA65:  LDX #$E200     ; -7,680
C2AA68:  STX $12
C2AA6A:  LDA #$7F       ; 127
C2AA6C:  STA $14
C2AA6E:  TDC            ; A = 0
C2AA6F:  TAX            ; X = 0
C2AA70:  LDA $ECBC,X
C2AA73:  BEQ C2AA7A     ; +5
C2AA75:  DEC $ECBC,X
C2AA78:  BRA C2AA9B     ; +33
C2AA7A:  LDA $ECCC,X
C2AA7D:  CMP #$18       ; 24
C2AA7F:  BCS C2AA9B     ; +26
C2AA81:  ASL
C2AA82:  PHX
C2AA83:  TAX
C2AA84:  TDC            ; A = 0
C2AA85:  TAY            ; Y = 0
C2AA86:  LDA C2A8D2,X
C2AA8A:  STA $ECDC,Y
C2AA8D:  INX
C2AA8E:  INY
C2AA8F:  CPY #$0010     ; 16
C2AA92:  BNE C2AA86     ; -14
C2AA94:  PLX
C2AA95:  JSR C2AB5A
C2AA98:  INC $ECCC,X
C2AA9B:  REP #$20       ; 16-bit A
C2AA9D:  LDA $10
C2AA9F:  SEC
C2AAA0:  SBC #$0200     ; 512
C2AAA3:  STA $10
C2AAA5:  LDA $12
C2AAA7:  SEC
C2AAA8:  SBC #$0200     ; 512
C2AAAB:  STA $12
C2AAAD:  TDC
C2AAAE:  SEP #$20       ; 8-bit A
C2AAB0:  INX
C2AAB1:  CPX #$0010     ; 16
C2AAB4:  BNE C2AA70     ; -70
C2AAB6:  LDX $ECEC
C2AAB9:  INX
C2AABA:  STX $ECEC
C2AABD:  CPX #$004A     ; 74
C2AAC0:  BNE C2AADB     ; +25
C2AAC2:  PHX
C2AAC3:  INC $E9ED
C2AAC6:  LDA #$82       ; -126
C2AAC8:  STA $1300      ; Instrument set for the current song
C2AACB:  LDA #$C0       ; -64
C2AACD:  STA $1301      ; Play song #$C0
C2AAD0:  STZ $1302      ; Set volume to 0
C2AAD3:  JSL $C50004
C2AAD7:  STZ $E9ED      ; Mute variable
C2AADA:  PLX
C2AADB:  CPX #$005A     ; 90
C2AADE:  BEQ C2AAE3     ; +3
C2AAE0:  JMP C2AA3E

C2AAE3:  LDA #$80       ; -128
C2AAE5:  JSR $A961      ; Call C1/022A 128 times
C2AAE8:  LDA $E9F9      ; Screen brightness
C2AAEB:  BEQ C2AAF7     ; If 0, return
C2AAED:  LDA #$10       ; 16
C2AAEF:  JSR $A961      ; Call C1/022A 16 times
C2AAF2:  DEC $E9F9      ; Fade out/dim?
C2AAF5:  BNE C2AAED     ; -10
C2AAF7:  RTL

; Called from C2/AA45, C2/AA4C, C2/AA56 and C2/AA5D.
C2AAF8:  PHB
C2AAF9:  LDA #$7F
C2AAFB:  PHA
C2AAFC:  PLB            ; Data bank register now points to bank $7F
C2AAFD:  REP #$20       ; 16-bit A
C2AAFF:  TDC            ; A = 0
C2AB00:  TAX            ; X = 0
C2AB01:  STZ $18
C2AB03:  LDA #$E200
C2AB06:  CLC
C2AB07:  ADC $18
C2AB09:  STA $10
C2AB0B:  LDA #$E00E
C2AB0E:  CLC
C2AB0F:  ADC $18
C2AB11:  STA $14
C2AB13:  LDA #$0010     ; 16
C2AB16:  STA $16
C2AB18:  LDA $10
C2AB1A:  INC
C2AB1B:  INC
C2AB1C:  STA $12
C2AB1E:  LDY #$001C     ; 28
C2AB21:  LDA ($10),Y    ; ($E21C = $E21E, $E21A = $E21C etc.)
C2AB23:  STA ($12),Y
C2AB25:  DEY
C2AB26:  DEY
C2AB27:  BPL C2AB21     ; -8
C2AB29:  LDA ($14)      ; ($E200 = $E00E)
C2AB2B:  STA ($10)
C2AB2D:  LDY #$0010     ; 16
C2AB30:  LDA ($14),Y    ; ($E210 = $E01E)
C2AB32:  STA ($10),Y
C2AB34:  LDA $10
C2AB36:  SEC
C2AB37:  SBC #$0200     ; 512
C2AB3A:  STA $10
C2AB3C:  LDA $14
C2AB3E:  SEC
C2AB3F:  SBC #$0200     ; 512
C2AB42:  STA $14
C2AB44:  DEC $16
C2AB46:  BNE C2AB18     ; Shift back 512 bytes and repeat, 16 times in total
C2AB48:  LDA $18
C2AB4A:  CLC
C2AB4B:  ADC #$0020     ; 32
C2AB4E:  STA $18
C2AB50:  CMP #$0200     ; 512
C2AB53:  BNE C2AB03     ; Repeat the whole thing 16 times, but shift forward 32 bytes each time
C2AB55:  TDC
C2AB56:  SEP #$20       ; 8-bit A
C2AB58:  PLB
C2AB59:  RTS

; Called from C2/AA95.
C2AB5A:  PHX
C2AB5B:  TDC            ; A = 0
C2AB5C:  TAX            ; X = 0
C2AB5D:  TAY            ; Y = 0
C2AB5E:  REP #$20       ; 16-bit A
C2AB60:  LDA $ECDC,X
C2AB63:  EOR #$FFFF
C2AB66:  STA $1A
C2AB68:  LDA ($10),Y
C2AB6A:  AND $1A
C2AB6C:  ORA [$12],Y
C2AB6E:  STA [$12],Y
C2AB70:  LDA ($10),Y
C2AB72:  AND $ECDC,X
C2AB75:  STA ($10),Y
C2AB77:  INX
C2AB78:  INX
C2AB79:  TXA
C2AB7A:  AND #$000F
C2AB7D:  TAX
C2AB7E:  INY
C2AB7F:  INY
C2AB80:  CPY #$0200     ; 512
C2AB83:  BNE C2AB60     ; -37
C2AB85:  TDC
C2AB86:  SEP #$20       ; 8-bit A
C2AB88:  PLX
C2AB89:  RTS

; A few of the instructions used here are used multiple times throughout this section. It would be more efficient to make a separate function out of them.
C2AB8A:  PHB
C2AB8B:  TDC            ; A = 0
C2AB8C:  PHA
C2AB8D:  PLB            ; Data bank register now points to bank $00
C2AB8E:  LDA #$7E
C2AB90:  STA $4374      ; 7th DMA channel source bank
C2AB93:  LDX #$6AB7     ; 27,319
C2AB96:  STX $2116      ; Video address
C2AB99:  LDY #$000E     ; 14
C2AB9C:  STY $4375      ; 7th DMA channel size
C2AB9F:  LDX #$5D15     ; 23,829
C2ABA2:  STX $4372      ; 7th DMA channel source offset
C2ABA5:  LDA #$80       ; -128
C2ABA7:  STA $420B      ; Enable DMA channel 7
C2ABAA:  LDX #$6AF7     ; 27,383
C2ABAD:  STX $2116      ; Video address
C2ABB0:  STY $4375      ; 7th DMA channel size
C2ABB3:  LDX #$5D23     ; 23,843
C2ABB6:  STX $4372      ; 7th DMA channel source offset
C2ABB9:  STA $420B      ; Disable all DMA channels
C2ABBC:  LDA $7E7B81
C2ABC0:  BNE C2ABC5     ; +3
C2ABC2:  JMP C2AC4A

; This function seems to be calling the decompressed graphics data repeatedly. This might be the function that displays the cutscenes in the game.
C2ABC5:  REP #$20       ; 16-bit A
C2ABC7:  LDA #$7A24     ; 31,268
C2ABCA:  STA $2116      ; Video address
C2ABCD:  LDA $7E5DD9
C2ABD1:  STA $2118      ; Video data
C2ABD4:  LDA $7E5DDB
C2ABD8:  STA $2118      ; Repeatedly load a new word and store in video data
C2ABDB:  LDA $7E5DDD
C2ABDF:  STA $2118
C2ABE2:  LDA $7E5DDF
C2ABE6:  STA $2118
C2ABE9:  LDA $7E5DE1
C2ABED:  STA $2118
C2ABF0:  LDA $7E5DE3
C2ABF4:  STA $2118
C2ABF7:  LDA $7E5DE5
C2ABFB:  STA $2118
C2ABFE:  LDA $7E5DE7
C2AC02:  STA $2118
C2AC05:  LDA #$7A64     ; 31,332
C2AC08:  STA $2116      ; Video address
C2AC0B:  LDA $7E7A73
C2AC0F:  STA $2118
C2AC12:  LDA $7E7A75
C2AC16:  STA $2118
C2AC19:  LDA $7E7A77
C2AC1D:  STA $2118
C2AC20:  LDA $7E7A79
C2AC24:  STA $2118
C2AC27:  LDA $7E7A7B
C2AC2B:  STA $2118
C2AC2E:  LDA $7E7A7D
C2AC32:  STA $2118
C2AC35:  LDA $7E7A7F
C2AC39:  STA $2118
C2AC3C:  LDA $7E7A81
C2AC40:  STA $2118
C2AC43:  TDC
C2AC44:  SEP #$20
C2AC46:  STA $7E7B81
C2AC4A:  LDA #$01       ; 1
C2AC4C:  STA $4370      ; 7th DMA channel control
C2AC4F:  LDA #$18       ; 24
C2AC51:  STA $4371      ; 7th DMA channel transfer destination
C2AC54:  LDA #$7E       ; 126
C2AC56:  STA $4374      ; 7th DMA channel source offset high byte
C2AC59:  LDY #$000C     ; 12
C2AC5C:  LDA $7E629B
C2AC60:  BEQ C2AC6E     ; +12
C2AC62:  TDC
C2AC63:  STA $7E629B
C2AC67:  LDA $98
C2AC69:  LSR
C2AC6A:  AND #$03
C2AC6C:  BRA C2AC75     ; +7
C2AC6E:  LDA $7E7B9A
C2AC72:  DEC
C2AC73:  AND #$03
C2AC75:  ASL
C2AC76:  TAX
C2AC77:  LDA #$80       ; -128
C2AC79:  JMP (C2AC7C,X)

; Pointers.
C2AC7C:  dw C2AC84
C2AC7E:  dw C2ACBD
C2AC80:  dw C2ACF6
C2AC82:  dw C2AD2F

; These four methods are all about setting up the 7th DMA channel for some purpose.
C2AC84:  LDX #$7839     ; 30,777
C2AC87:  STX $2116
C2AC8A:  LDX #$5C51     ; 23,633
C2AC8D:  STX $4372
C2AC90:  STY $4375
C2AC93:  STA $420B
C2AC96:  LDX #$7939     ; 31,033
C2AC99:  STX $2116
C2AC9C:  LDX #$5C51     ; 23,633
C2AC9F:  STX $4372
C2ACA2:  STY $4375
C2ACA5:  STA $420B
C2ACA8:  LDX #$7A39     ; 31,289
C2ACAB:  STX $2116
C2ACAE:  LDX #$5C51     ; 23,633
C2ACB1:  STX $4372
C2ACB4:  STY $4375
C2ACB7:  STA $420B
C2ACBA:  JMP C2AD65

C2ACBD:  LDX #$7879     ; 30,841
C2ACC0:  STX $2116
C2ACC3:  LDX #$5C69     ; 23,657
C2ACC6:  STX $4372
C2ACC9:  STY $4375
C2ACCC:  STA $420B
C2ACCF:  LDX #$7979     ; 31,097
C2ACD2:  STX $2116
C2ACD5:  LDX #$5C69     ; 23,657
C2ACD8:  STX $4372
C2ACDB:  STY $4375
C2ACDE:  STA $420B
C2ACE1:  LDX #$7A79     ; 31,353
C2ACE4:  STX $2116
C2ACE7:  LDX #$5C69     ; 23,657
C2ACEA:  STX $4372
C2ACED:  STY $4375
C2ACF0:  STA $420B
C2ACF3:  JMP C2AD65     ; BRA would've worked...

C2ACF6:  LDX #$78B9     ; 30,905
C2ACF9:  STX $2116
C2ACFC:  LDX #$5C81     ; 23,681
C2ACFF:  STX $4372
C2AD02:  STY $4375
C2AD05:  STA $420B
C2AD08:  LDX #$79B9     ; 31,161
C2AD0B:  STX $2116
C2AD0E:  LDX #$5C81     ; 23,681
C2AD11:  STX $4372
C2AD14:  STY $4375
C2AD17:  STA $420B
C2AD1A:  LDX #$7AB9     ; 31,417
C2AD1D:  STX $2116
C2AD20:  LDX #$5C81     ; 23,681
C2AD23:  STX $4372
C2AD26:  STY $4375
C2AD29:  STA $420B
C2AD2C:  JMP C2AD65     ; BRA would've worked...

C2AD2F:  LDX #$78F9
C2AD32:  STX $2116
C2AD35:  LDX #$5C99
C2AD38:  STX $4372
C2AD3B:  STY $4375
C2AD3E:  STA $420B
C2AD41:  LDX #$79F9
C2AD44:  STX $2116
C2AD47:  LDX #$5C99
C2AD4A:  STX $4372
C2AD4D:  STY $4375
C2AD50:  STA $420B
C2AD53:  LDX #$7AF9
C2AD56:  STX $2116
C2AD59:  LDX #$5C99
C2AD5C:  STX $4372
C2AD5F:  STY $4375
C2AD62:  STA $420B
C2AD65:  PLB
C2AD66:  SEP #$10       ; 8-bit X & Y
C2AD68:  LDA $7B9C
C2AD6B:  BEQ C2ADB6     ; +73
C2AD6D:  STZ $7B9C
C2AD70:  LDA $7B9D
C2AD73:  CMP #$FF       ; -1
C2AD75:  BEQ C2ADB6     ; +63
C2AD77:  ASL
C2AD78:  TAX
C2AD79:  REP #$20       ; 16-bit A
C2AD7B:  LDA C2ADD9,X
C2AD7F:  TAY
C2AD80:  TXA
C2AD81:  ASL
C2AD82:  ASL
C2AD83:  TAX
C2AD84:  LDA #$0003     ; 3
C2AD87:  STA $36
C2AD89:  LDA C2ADB9,X
C2AD8D:  STA $002116
C2AD91:  LDA $5C0D,Y
C2AD94:  STA $002118
C2AD98:  LDA $5C0F,Y
C2AD9B:  STA $002118
C2AD9F:  LDA $5C11,Y
C2ADA2:  STA $002118
C2ADA6:  LDA $5C13,Y
C2ADA9:  STA $002118
C2ADAD:  INX
C2ADAE:  INX
C2ADAF:  DEC $36
C2ADB1:  BNE C2AD89     ; -42
C2ADB3:  TDC
C2ADB4:  SEP #$20       ; 8-bit A
C2ADB6:  REP #$10       ; 16-bit X & Y
C2ADB8:  RTL

C2ADB9:  dw $7835
C2ADBB:  dw $7935
C2ADBD:  dw $7A35
C2ADBF:  dw $0000
C2ADC1:  dw $7875
C2ADC3:  dw $7975
C2ADC5:  dw $7A75
C2ADC7:  dw $0000
C2ADC9:  dw $78B5
C2ADCB:  dw $79B5
C2ADCD:  dw $7AB5
C2ADCF:  dw $0000
C2ADD1:  dw $78F5
C2ADD3:  dw $79F5
C2ADD5:  dw $7AF5
C2ADD7:  dw $0000

C2ADD9:  dw $0000
C2ADDB:  dw $0010
C2ADDD:  dw $0020
C2ADDF:  dw $0030

; Status names displayed when selecting a target
;C2ADE1:  96A8AEA79DFFFFFFFFFF  ; ("Wound")
;C2ADEB:  8F9EADABA29FB2FFFFFF  ; ("Petrify")
;C2ADF5:  88A6A9FFFFFFFFFFFFFF  ; ("Imp")
;C2ADFF:  82A59E9AABFFFFFFFFFF  ; ("Clear")
;C2AE09:  FFFFFFFFFFFFFFFFFFFF  ; (" ")(Magitek)
;C2AE13:  8FA8A2ACA8A7FFFFFFFF  ; ("Poison")
;C2AE1D:  99A8A69BA29EFFFFFFFF  ; ("Zombie")
;C2AE27:  839AABA4FFFFFFFFFFFF  ; ("Dark")
;C2AE31:  8FACB29CA19EFFFFFFFF  ; ("Psyche")(wtf?)
;C2AE3B:  929EA2B3AEAB9EFFFFFF  ; ("Seizure")
;C2AE45:  8CAE9D9DA59E9DFFFFFF  ; ("Muddled")
;C2AE4F:  819EABAC9EABA4FFFFFF  ; ("Berserk")
;C2AE59:  8CAEAD9EFFFFFFFFFFFF  ; ("Mute")
;C2AE63:  88A69AA09EFFFFFFFFFF  ; ("Image")
;C2AE6D:  8D9E9AABFE859AAD9AA5  ; ("Near Fatal")
;C2AE77:  82A8A79D9EA6A79E9DFF  ; ("Condemned")
;C2AE81:  919E9FA59E9CADFFFFFF  ; ("Reflect")
;C2AE8B:  929A9F9EFFFFFFFFFFFF  ; ("Safe")
;C2AE95:  92A19EA5A5FFFFFFFFFF  ; ("Shell")
;C2AE9F:  92ADA8A9FFFFFFFFFFFF  ; ("Stop")
;C2AEA9:  879AACAD9EFFFFFFFFFF  ; ("Haste")
;C2AEB3:  92A5A8B0FFFFFFFFFFFF  ; ("Slow")
;C2AEBD:  919EA09EA7FFFFFFFFFF  ; ("Regen")
;C2AEC7:  FFFFFFFFFFFFFFFFFFFF  ; (" ")(Dance)
;C2AED1:  85A5A89AADFFFFFFFFFF  ; ("Float")
;C2AEDB:  FFFFFFFFFFFFFFFFFFFF  ; (" ")(Interceptor)
;C2AEE5:  FFFFFFFFFFFFFFFFFFFF  ; (" ")(Hide)
;C2AEEF:  FFFFFFFFFFFFFFFFFFFF  ; (" ")(Control)
;C2AEF9:  FFFFFFFFFFFFFFFFFFFF  ; (" ")(Morph)
;C2AF03:  8BA29F9EFEB7FFFFFFFF  ; ("Life3")
;C2AF0D:  FFFFFFFFFFFFFFFFFFFF  ; (" ")(Freeze)
;C2AF17:  FFFFFFFFFFFFFFFFFFFF  ; (" ")(If nothing else prevails)

; Status names displayed when selecting a target
table ff3us_C2_statuses.tbl,rtl
C2ADE1:  db "Wound_____"
C2ADEB:  db "Petrify___"
C2ADF5:  db "Imp_______"
C2ADFF:  db "Clear_____"
C2AE09:  db "__________"  ; Magitek
C2AE13:  db "Poison____"
C2AE1D:  db "Zombie____"
C2AE27:  db "Dark______"
C2AE31:  db "Psyche____"  ; Sleep
C2AE3B:  db "Seizure___"
C2AE45:  db "Muddled___"
C2AE4F:  db "Berserk___"
C2AE59:  db "Mute______"
C2AE63:  db "Image_____"
C2AE6D:  db "Near Fatal"
C2AE77:  db "Condemned_"
C2AE81:  db "Reflect___"
C2AE8B:  db "Safe______"
C2AE95:  db "Shell_____"
C2AE9F:  db "Stop______"
C2AEA9:  db "Haste_____"
C2AEB3:  db "Slow______"
C2AEBD:  db "Regen_____"
C2AEC7:  db "__________"  ; Dance
C2AED1:  db "Float_____"
C2AEDB:  db "__________"  ; Interceptor
C2AEE5:  db "__________"  ; Hide
C2AEEF:  db "__________"  ; Control
C2AEF9:  db "__________"  ; Morph
C2AF03:  db "Life 3____"
C2AF0D:  db "__________"  ; Freeze
C2AF17:  db "__________"  ; If nothing else prevails

; Note that the highest-listed status takes precedence. Life 3, for instance,
; Is never listed while Shadow is under the protection of Interceptor.

; Animation script command 80 85.
C2AF21:  LDY $5B        ; Script pointer
C2AF23:  INY
C2AF24:  STY $5B
C2AF26:  LDA [$5B]
C2AF28:  BEQ C2AF4B     ; +33
C2AF2A:  CMP #$01       ; 1
C2AF2C:  BEQ C2AF35     ; +7
C2AF2E:  JSR C2BBE6
C2AF31:  AND #$07
C2AF33:  BNE C2AF4A     ; +21
C2AF35:  REP #$20       ; 16-bit A
C2AF37:  TDC            ; A = 0
C2AF38:  TAX            ; X = 0
C2AF39:  LDA C2E2E8,X
C2AF3D:  STA $7EA0,X    ; Palettes 5-7
C2AF40:  INX
C2AF41:  INX
C2AF42:  CPX #$0060     ; 96
C2AF45:  BNE C2AF39     ; -14
C2AF47:  TDC
C2AF48:  SEP #$20       ; 8-bit A
C2AF4A:  RTL

C2AF4B:  REP #$20       ; 16-bit A
C2AF4D:  TDC            ; A = 0
C2AF4E:  TAX            ; X = 0
C2AF4F:  LDA C2E288,X
C2AF53:  STA $7EA0,X    ; Palettes 5-7
C2AF56:  INX
C2AF57:  INX
C2AF58:  CPX #$0060     ; 96
C2AF5B:  BNE C2AF4F     ; -14
C2AF5D:  TDC
C2AF5E:  SEP #$20       ; 8-bit A
C2AF60:  RTL

; Animation script command 80 83.
C2AF61:  TDC            ; A = 0
C2AF62:  TAX            ; X = 0
C2AF63:  STZ $8057,X
C2AF66:  INX
C2AF67:  CPX #$000C     ; 12
C2AF6A:  BNE C2AF63     ; -9
C2AF6C:  LDX $7AF6      ; Base index of animation data in memory
C2AF6F:  LDA $6A39,X    ; Target's ID
C2AF72:  BPL C2AF96     ; Exit if target is a party member
C2AF74:  AND #$0F
C2AF76:  SEC
C2AF77:  SBC #$04       ; 4
C2AF79:  ASL
C2AF7A:  TAX
C2AF7B:  REP #$20       ; 16-bit A
C2AF7D:  LDA #$FFF8     ; -8
C2AF80:  STA $8057,X
C2AF83:  LDA $80CF,X    ; Enemy's Y-position
C2AF86:  STA $ECB4
C2AF89:  SEC
C2AF8A:  SBC #$0100     ; 256
C2AF8D:  STA $80CF,X    ; Adjust by 256... units... pixels?
C2AF90:  STX $ECB6
C2AF93:  TDC
C2AF94:  SEP #$20       ; 8-bit A
C2AF96:  RTL

C2AF97:  dd $80200802
C2AF9B:  dd $C0300C03
C2AF9F:  dd $40100401

; Called from C1/3B0B.
C2AFA3:  TDC            ; A = 0
C2AFA4:  TAY            ; Y = 0
C2AFA5:  STZ $10
C2AFA7:  LDA $10
C2AFA9:  LSR
C2AFAA:  LSR
C2AFAB:  STA $A17F,Y
C2AFAE:  STA $A180,Y
C2AFB1:  STA $A181,Y
C2AFB4:  STA $A182,Y
C2AFB7:  LDA $10
C2AFB9:  AND #$03
C2AFBB:  TAX
C2AFBC:  LDA C2AF97,X
C2AFC0:  STA $A37F,Y
C2AFC3:  STA $A380,Y
C2AFC6:  STA $A381,Y
C2AFC9:  STA $A382,Y
C2AFCC:  LDA C2AF9B,X
C2AFD0:  STA $A57F,Y
C2AFD3:  STA $A580,Y
C2AFD6:  STA $A581,Y
C2AFD9:  STA $A582,Y
C2AFDC:  LDA C2AF9F,X
C2AFE0:  STA $A77F,Y
C2AFE3:  STA $A780,Y
C2AFE6:  STA $A781,Y
C2AFE9:  STA $A782,Y
C2AFEC:  INC $10
C2AFEE:  INY
C2AFEF:  INY
C2AFF0:  INY
C2AFF1:  INY
C2AFF2:  CPY #$0200     ; 512
C2AFF5:  BNE C2AFA7     ; -80
C2AFF7:  RTL

; Animation script command 80 72.
C2AFF8:  LDX $5B        ; Script pointer
C2AFFA:  INX
C2AFFB:  STX $5B
C2AFFD:  LDX $7AF6      ; Base index of animation data in memory
C2B000:  LDA $6F88,X
C2B003:  BPL C2B006     ; +1
C2B005:  RTL

C2B006:  LDA [$5B]
C2B008:  REP #$20       ; 16-bit A
C2B00A:  STA $22
C2B00C:  LDA $5B
C2B00E:  CLC
C2B00F:  ADC $22
C2B011:  STA $5B
C2B013:  TDC
C2B014:  SEP #$20       ; 8-bit A
C2B016:  RTL

; Script animation command 80 74.
C2B017:  LDX $7AF6      ; Base index of animation data in memory
C2B01A:  LDA $6A39,X    ; Target's ID
C2B01D:  BMI C2B025     ; Branch if target is an enemy
C2B01F:  TAY
C2B020:  LDA $61AE,Y    ; Will the party member casting this spell please step forward?
C2B023:  BEQ C2B038     ; No? OK, then we'll just branch
C2B025:  LDY #$0001     ; 1
C2B028:  LDA [$5B],Y
C2B02A:  REP #$20       ; 16-bit A
C2B02C:  STA $22
C2B02E:  LDA $5B
C2B030:  CLC
C2B031:  ADC $22
C2B033:  STA $5B
C2B035:  TDC
C2B036:  SEP #$20       ; 8-bit A
C2B038:  LDX $5B        ; Increment script pointer
C2B03A:  INX
C2B03B:  STX $5B
C2B03D:  RTL

; Animation script command 80 7D.
C2B03E:  LDX $5B        ; Increment script pointer
C2B040:  INX
C2B041:  STX $5B
C2B043:  LDX $7AF6      ; Base index of animation data in memory
C2B046:  LDA $EC10
C2B049:  BNE C2B04C     ; +1
C2B04B:  RTL

C2B04C:  LDA [$5B]
C2B04E:  REP #$20       ; 16-bit A
C2B050:  STA $22
C2B052:  LDA $5B
C2B054:  CLC
C2B055:  ADC $22        ; Why not ADC $5B, hold the LDA?
C2B057:  STA $5B
C2B059:  TDC
C2B05A:  SEP #$20       ; 8-bit A
C2B05C:  RTL

; Data called from C1/9418.
C2B05D:  dw $318C
C2B05F:  dw $0401
C2B061:  dw $7C1F
C2B063:  dw $741D
C2B065:  dw $6419
C2B067:  dw $5C17
C2B069:  dw $5415
C2B06B:  dw $4C13
C2B06D:  dw $4411
C2B06F:  dw $3C0F
C2B071:  dw $340D
C2B073:  dw $2C0B
C2B075:  dw $2409
C2B077:  dw $1C07
C2B079:  dw $1405
C2B07B:  dw $0C03

; Palette information used with block animations, such as shields or Zephyr Cape.
C2B07D:  db $00,$00,$00,$00,$1A,$00,$13,$00,$0D,$00,$FE,$7F,$80,$03,$C0,$01
C2B08D:  db $00,$00,$00,$00,$FE,$7F,$3A,$37,$95,$22,$8B,$1D,$F2,$28,$6E,$18
C2B09D:  db $00,$00,$00,$00,$FE,$7F,$37,$67,$71,$4A,$89,$29,$F8,$2E,$8F,$09
C2B0AD:  db $AD,$35,$63,$0C,$FF,$6F,$08,$21,$F8,$31,$26,$29,$C6,$18,$72,$01

; Don't know why we'd need this data table when we could just INC-ASL... Also, I don't even know where this is called from.
C2B0BD:  dw $0402
C2B0BF:  dw $0806
C2B0C1:  dw $0C0A
C2B0C3:  dw $100E

; This data is called from C2/B1D9.
C2B0C5:  dw $0000
C2B0C7:  dw $FFFF
C2B0C9:  dw $FFFE
C2B0CB:  dw $FFFD

; Pointers called from C2/B27E.
C2B0CD:  dw C2B13D
C2B0CF:  dw C2B13D
C2B0D1:  dw C2B13D
C2B0D3:  dw C2B13D
C2B0D5:  dw C2B13D
C2B0D7:  dw C2B13D
C2B0D9:  dw C2B13D
C2B0DB:  dw C2B1AD
C2B0DD:  dw C2B13D
C2B0DF:  dw C2B13D
C2B0E1:  dw C2B13D
C2B0E3:  dw C2B13D
C2B0E5:  dw C2B13D
C2B0E7:  dw C2B218
C2B0E9:  dw C2B13D
C2B0EB:  dw C2B1B8
C2B0ED:  dw C2B13D
C2B0EF:  dw C2B13D
C2B0F1:  dw C2B13D
C2B0F3:  dw C2B13D
C2B0F5:  dw C2B13D
C2B0F7:  dw C2B13D
C2B0F9:  dw C2B13D
C2B0FB:  dw C2B13D
C2B0FD:  dw C2B13D
C2B0FF:  dw C2B13D
C2B101:  dw C2B13D
C2B103:  dw C2B13D
C2B105:  dw C2B13D
C2B107:  dw C2B13D
C2B109:  dw C2B13D
C2B10B:  dw C2B1E1
C2B10D:  dw C2B13D
C2B10F:  dw C2B1B8
C2B111:  dw C2B13D
C2B113:  dw C2B13D
C2B115:  dw C2B13D
C2B117:  dw C2B13D
C2B119:  dw C2B13D
C2B11B:  dw C2B13D
C2B11D:  dw C2B13D
C2B11F:  dw C2B13D
C2B121:  dw C2B13D
C2B123:  dw C2B13D
C2B125:  dw C2B1C3
C2B127:  dw C2B13D
C2B129:  dw C2B170
C2B12B:  dw C2B13D
C2B12D:  dw C2B13D
C2B12F:  dw C2B13D
C2B131:  dw C2B13D
C2B133:  dw C2B13D
C2B135:  dw C2B13D
C2B137:  dw C2B13D
C2B139:  dw C2B14E
C2B13B:  dw C2B13D

C2B13D:  RTL

; This data is called from C2/B159.
C2B13E:  dw $0001
C2B140:  dw $0002
C2B142:  dw $0001
C2B144:  dw $0000
C2B146:  dw $0001
C2B148:  dw $0002
C2B14A:  dw $0001
C2B14C:  dw $0002

C2B14E:  LDA $9A
C2B150:  BEQ C2B16F     ; +29
C2B152:  LDA $0E
C2B154:  AND #$0007
C2B157:  ASL
C2B158:  TAX
C2B159:  LDA C2B13E,X   ; 0, 1 or 2
C2B15D:  PHA
C2B15E:  CLC
C2B15F:  ADC #$FFF0     ; Why not SBC?
C2B162:  STA $7E64B4    ; Battle info window X-offset
C2B166:  PLA
C2B167:  CLC
C2B168:  ADC #$0010     ; 16
C2B16B:  STA $80C3      ; Enemy's X-position
C2B16E:  TDC
C2B16F:  RTL

C2B170:  TDC            ; A = 0
C2B171:  TAX            ; X = 0
C2B172:  LDA $EC13,X
C2B175:  STA $EC71,X
C2B178:  STA $EC81,X
C2B17B:  LDA $EC53,X
C2B17E:  STA $EC91,X
C2B181:  STA $ECA1,X
C2B184:  INX
C2B185:  INX
C2B186:  CPX #$0010     ; 16
C2B189:  BNE C2B172     ; -25
C2B18B:  LDA $0E
C2B18D:  LSR
C2B18E:  LSR
C2B18F:  LSR
C2B190:  AND #$0007
C2B193:  ASL
C2B194:  TAX
C2B195:  TDC            ; A = 0
C2B196:  TAY            ; Y = 0
C2B197:  LDA $EC71,X
C2B19A:  STA $EC13,Y
C2B19D:  LDA $EC91,X
C2B1A0:  STA $EC53,Y
C2B1A3:  INY
C2B1A4:  INY
C2B1A5:  INX
C2B1A6:  INX
C2B1A7:  CPY #$0010     ; 16
C2B1AA:  BNE C2B197     ; -21
C2B1AC:  RTL

C2B1AD:  LDA $64B2      ; Background Y-shift
C2B1B0:  CLC
C2B1B1:  ADC #$0006     ; 6
C2B1B4:  STA $64B2
C2B1B7:  RTL

C2B1B8:  LDA $64B0      ; Background X-shift
C2B1BB:  SEC
C2B1BC:  SBC #$0004     ; 4
C2B1BF:  STA $64B0
C2B1C2:  RTL

C2B1C3:  LDA $64B0      ; Background X-shift
C2B1C6:  SEC
C2B1C7:  SBC #$0008     ; 8
C2B1CA:  STA $64B0
C2B1CD:  SEP #$20       ; 8-bit A
C2B1CF:  JSR C2BBE6
C2B1D2:  REP #$20       ; 16-bit A
C2B1D4:  AND #$0003
C2B1D7:  ASL
C2B1D8:  TAX
C2B1D9:  LDA C2B0C5,X   ; 0, -1, -2 or -3
C2B1DD:  STA $64B2      ; Background Y-shift
C2B1E0:  RTL

C2B1E1:  TDC            ; A = 0
C2B1E2:  TAX            ; X = 0
C2B1E3:  LDA $EC13,X
C2B1E6:  STA $EC71,X
C2B1E9:  STA $EC81,X
C2B1EC:  INX
C2B1ED:  INX
C2B1EE:  CPX #$0010     ; 16
C2B1F1:  BNE C2B1E3     ; -16
C2B1F3:  LDA $64B2      ; Background Y-shift
C2B1F6:  CLC
C2B1F7:  ADC #$0006     ; 6
C2B1FA:  STA $64B2      ; You know, there's a function that does exactly this not far from here...
C2B1FD:  LDA $0E
C2B1FF:  LSR
C2B200:  LSR
C2B201:  AND #$0007
C2B204:  ASL
C2B205:  TAX
C2B206:  TDC            ; A = 0
C2B207:  TAY            ; Y = 0
C2B208:  LDA $EC71,X
C2B20B:  STA $EC13,Y
C2B20E:  INY
C2B20F:  INY
C2B210:  INX
C2B211:  INX
C2B212:  CPY #$0010     ; 16
C2B215:  BNE C2B208     ; -15
C2B217:  RTL

C2B218:  TDC            ; A = 0
C2B219:  TAX            ; X = 0
C2B21A:  LDA $EC13,X
C2B21D:  STA $EC71,X
C2B220:  STA $EC79,X
C2B223:  LDA $EC1B,X
C2B226:  STA $EC81,X
C2B229:  STA $EC89,X
C2B22C:  INX
C2B22D:  INX
C2B22E:  CPX #$0008     ; 8
C2B231:  BNE C2B21A     ; -25
C2B233:  LDA $0E
C2B235:  LSR
C2B236:  LSR
C2B237:  LSR
C2B238:  AND #$0003
C2B23B:  EOR #$0003
C2B23E:  ASL
C2B23F:  TAX
C2B240:  TDC            ; A = 0
C2B241:  TAY            ; Y = 0
C2B242:  LDA $EC71,X
C2B245:  STA $EC13,Y
C2B248:  LDA $EC81,X
C2B24B:  STA $EC1B,Y
C2B24E:  INY
C2B24F:  INY
C2B250:  INX
C2B251:  INX
C2B252:  CPY #$0008     ; 16
C2B255:  BNE C2B242     ; -21
C2B257:  RTL

C2B258:  SEP #$10       ; 8-bit X & Y
C2B25A:  TDC            ; A = 0
C2B25B:  TAX            ; X = 0
C2B25C:  LDA $7EA0,X    ; Palette 5
C2B25F:  STA $EC11,X
C2B262:  LDA $7EC0,X    ; Palette 6
C2B265:  STA $EC31,X
C2B268:  LDA $7EE0,X    ; Palette 7
C2B26B:  STA $EC51,X
C2B26E:  INX
C2B26F:  INX
C2B270:  CPX #$20       ; 32
C2B272:  BNE C2B25C     ; -24
C2B274:  REP #$10       ; 16-bit X & Y
C2B276:  LDA $ECB8      ; Battle background ID
C2B279:  AND #$003F
C2B27C:  ASL
C2B27D:  TAX
C2B27E:  JMP (C2B0CD,X)

; Animation script command 80 7C.
C2B281:  LDX $7AF6      ; Base index of animation data in memory
C2B284:  LDA $6A38,X    ; Switch caster's ID with target's ID
C2B287:  PHA
C2B288:  LDA $6A39,X
C2B28B:  STA $6A38,X
C2B28E:  PLA
C2B28F:  STA $6A39,X
C2B292:  REP #$20       ; 16-bit A
C2B294:  LDA $6F7E,X    ; Spell animation's next X-coordinate?
C2B297:  PHA
C2B298:  LDA $6F80,X    ; Spell animation's next Y-coordinate?
C2B29B:  PHA
C2B29C:  LDA $6F82,X    ; Spell animation's original X-coordinate
C2B29F:  STA $6F7E,X
C2B2A2:  LDA $6F84,X    ; Spell animation's original Y-coordinate
C2B2A5:  STA $6F80,X
C2B2A8:  PLA
C2B2A9:  STA $6F84,X
C2B2AC:  PLA
C2B2AD:  STA $6F82,X
C2B2B0:  TDC
C2B2B1:  SEP #$20       ; 8-bit A
C2B2B3:  RTL

; Animation script command 80 7B.
C2B2B4:  TDC            ; A = 0
C2B2B5:  TAX            ; X = 0
C2B2B6:  TAY            ; Y = 0
C2B2B7:  STZ $61C0,X    ; Character's animation ID
C2B2BA:  LDA $61BE,X
C2B2BD:  EOR #$40
C2B2BF:  STA $61BE,X    ; X-flip sprite
C2B2C2:  LDA $7B10,Y
C2B2C5:  EOR #$01
C2B2C7:  STA $7B10,Y    ; Reverse direction faced by character's sprite
C2B2CA:  INY
C2B2CB:  TXA
C2B2CC:  CLC
C2B2CD:  ADC #$20       ; 32
C2B2CF:  TAX
C2B2D0:  CMP #$80       ; 128
C2B2D2:  BNE C2B2B7     ; Loop for all party members
C2B2D4:  RTL

; Animation script command 80 79.
C2B2D5:  TDC            ; A = 0
C2B2D6:  TAX            ; X = 0
C2B2D7:  REP #$20       ; 16-bit A
C2B2D9:  LDA $61C9,X    ; Character's X-coordinate
C2B2DC:  SEC
C2B2DD:  SBC #$0004     ; Move left 4 pixels?
C2B2E0:  STA $61C9,X
C2B2E3:  TDC
C2B2E4:  SEP #$20       ; 8-bit A
C2B2E6:  LDA $2EBD,X    ; Status effect on character
C2B2E9:  AND #$C0
C2B2EB:  BNE C2B2F2     ; Branch if not Wounded or Petrified
C2B2ED:  LDA #$04       ; 4
C2B2EF:  STA $61C0,X    ; Character's animation ID
C2B2F2:  REP #$20       ; 16-bit A
C2B2F4:  TXA
C2B2F5:  CLC
C2B2F6:  ADC #$0020     ; 32
C2B2F9:  TAX
C2B2FA:  CPX #$0080     ; 128
C2B2FD:  BNE C2B2D9     ; Loop for all party members
C2B2FF:  TDC
C2B300:  SEP #$20       ; 8-bit A
C2B302:  RTL

; Animation script command 80 7A.
C2B303:  TDC            ; A = 0
C2B304:  TAX            ; X = 0
C2B305:  REP #$20       ; 16-bit A
C2B307:  LDA $61C9,X    ; Character's X-coordinate
C2B30A:  CLC
C2B30B:  ADC #$0004     ; Move right 4 pixels?
C2B30E:  STA $61C9,X
C2B311:  TDC
C2B312:  SEP #$20       ; 8-bit A
C2B314:  LDA $2EBD,X    ; Status effect on character
C2B317:  AND #$C0       ; Stone? Death?
C2B319:  BNE C2B320     ; If either...
C2B31B:  LDA #$03       ; 3
C2B31D:  STA $61C0,X    ; ...set animation ID to 3
C2B320:  REP #$20       ; 16-bit A
C2B322:  TXA
C2B323:  CLC
C2B324:  ADC #$0020     ; 32
C2B327:  TAX
C2B328:  CPX #$0080     ; 128
C2B32B:  BNE C2B307     ; Loop for all party members
C2B32D:  TDC
C2B32E:  SEP #$20       ; 8-bit A
C2B330:  RTL

; Animation script command 80 77.
C2B331:  JSR C2C29F
C2B334:  LDX $7AF6      ; Base index of animation data in memory
C2B337:  LDA $6A39,X    ; Target's ID
C2B33A:  ASL
C2B33B:  TAX
C2B33C:  REP #$20       ; 16-bit A
C2B33E:  LDA $61B7,Y
C2B341:  STA $6256,X
C2B344:  LDA $61B9,Y
C2B347:  STA $625E,X
C2B34A:  LDX $7AF6
C2B34D:  LDA $6F7E,X
C2B350:  STA $61B7,Y
C2B353:  LDA $6F80,X
C2B356:  SEC
C2B357:  SBC #$0030     ; 48
C2B35A:  STA $61B9,Y
C2B35D:  TDC
C2B35E:  SEP #$20       ; 8-bit A
C2B360:  RTL

; Animation script command 80 78.
C2B361:  JSR C2C29F
C2B364:  LDX $7AF6      ; Base index of animation data in memory
C2B367:  LDA $6A39,X    ; Target's ID
C2B36A:  ASL
C2B36B:  TAX
C2B36C:  REP #$20       ; 16-bit A
C2B36E:  LDA $6256,X
C2B371:  STA $61B7,Y
C2B374:  TDC
C2B375:  STA $61C5,Y    ; Character's X-offset
C2B378:  STA $61D4,Y
C2B37B:  LDA $625E,X
C2B37E:  STA $61B9,Y
C2B381:  TDC
C2B382:  STA $61C7,Y    ; Character's Y-offset
C2B385:  STA $61D2,Y    ; Character's Y-coordinate
C2B388:  TDC            ; A = 0 already...
C2B389:  SEP #$20       ; 8-bit A
C2B38B:  RTL

; Animation script command 80 76.
C2B38C:  LDX $7AF6      ; Animation ID
C2B38F:  LDY #$0001     ; 1
C2B392:  LDA [$5B],Y
C2B394:  STA $10
C2B396:  BMI C2B39C     ; +4
C2B398:  STZ $11
C2B39A:  BRA C2B3A0     ; +4
C2B39C:  LDA #$FF       ; -1
C2B39E:  STA $11
C2B3A0:  REP #$20       ; 16-bit A
C2B3A2:  INC $5B
C2B3A4:  LDA $74D9,X
C2B3A7:  CLC
C2B3A8:  ADC $10
C2B3AA:  STA $74D9,X
C2B3AD:  STA $10
C2B3AF:  STZ $12
C2B3B1:  STZ $16
C2B3B3:  LDA #$0040     ; 64
C2B3B6:  STA $18
C2B3B8:  LDA $6F87,X    ; Animation direction
C2B3BB:  AND #$00FF
C2B3BE:  BEQ C2B3EF     ; Continue if direction is right, branch if left
C2B3C0:  LDA $6F80,X
C2B3C3:  AND #$00FF
C2B3C6:  ASL
C2B3C7:  ASL
C2B3C8:  TAX
C2B3C9:  LDA $12
C2B3CB:  CLC
C2B3CC:  ADC $10
C2B3CE:  STA $12
C2B3D0:  LDA $13
C2B3D2:  AND #$00FF
C2B3D5:  STA $13
C2B3D7:  LDA $16
C2B3D9:  SEC
C2B3DA:  SBC $13
C2B3DC:  STA $16
C2B3DE:  STZ $13
C2B3E0:  STA $43F5,X    ; BG1 HDMA scroll window X-offset
C2B3E3:  DEX #4
C2B3E7:  DEC $18
C2B3E9:  BNE C2B3C9     ; -34
C2B3EB:  TDC
C2B3EC:  SEP #$20       ; 8-bit A
C2B3EE:  RTL

C2B3EF:  LDA $6F80,X
C2B3F2:  AND #$00FF
C2B3F5:  ASL
C2B3F6:  ASL
C2B3F7:  TAX
C2B3F8:  LDA $12
C2B3FA:  CLC
C2B3FB:  ADC $10
C2B3FD:  STA $12
C2B3FF:  LDA $13
C2B401:  AND #$00FF
C2B404:  CLC
C2B405:  ADC $16
C2B407:  STA $16
C2B409:  STZ $13
C2B40B:  STA $43F5,X    ; BG1 HDMA scroll window X-offset
C2B40E:  DEX #4
C2B412:  DEC $18
C2B414:  BNE C2B3F8     ; -30
C2B416:  TDC
C2B417:  SEP #$20       ; 8-bit A
C2B419:  RTL

C2B41A:  TDC            ; A = 0
C2B41B:  TAX            ; X = 0
C2B41C:  STX $2F50
C2B41F:  LDX #$0003     ; 3
C2B422:  LDA $7B10,X    ; Direction faced by character
C2B425:  LSR A
C2B426:  ROL $2F50      ; This byte holds all of which party members are facing right
C2B429:  DEX
C2B42A:  BPL C2B422     ; Loop for all 4 party members
C2B42C:  TDC            ; A = 0
C2B42D:  TAX            ; X = 0
C2B42E:  LDX #$000A     ; 10
C2B431:  LDA $80F3,X
C2B434:  EOR $617E,X
C2B437:  EOR #$01       ; Get opposite of direction enemy is facing
C2B439:  LSR A
C2B43A:  ROL $2F51      ; This byte holds all of which enemies are facing right
C2B43D:  DEX
C2B43E:  DEX
C2B43F:  BPL C2B431     ; Loop for all 6 enemies
C2B441:  RTL

C2B442:  LDX $18
C2B444:  REP #$20       ; 16-bit A
C2B446:  LDA $7E00,X    ; Palette 0 data
C2B449:  STA $10
C2B44B:  LSR
C2B44C:  LSR
C2B44D:  LSR
C2B44E:  LSR
C2B44F:  LSR
C2B450:  STA $12
C2B452:  LSR
C2B453:  LSR
C2B454:  LSR
C2B455:  LSR
C2B456:  LSR
C2B457:  AND #$001F
C2B45A:  STA $14
C2B45C:  LDA $10
C2B45E:  AND #$001F
C2B461:  CLC
C2B462:  ADC $14
C2B464:  STA $14
C2B466:  LDA $12
C2B468:  AND #$001F
C2B46B:  CLC
C2B46C:  ADC $14
C2B46E:  STA $004204
C2B472:  SEP #$20       ; 8-bit A
C2B474:  LDA #$03       ; 3
C2B476:  STA $004206
C2B47A:  TDC
C2B47B:  REP #$20       ; 16-bit A
C2B47D:  NOP
C2B47E:  NOP
C2B47F:  NOP
C2B480:  NOP
C2B481:  NOP
C2B482:  NOP
C2B483:  LDA $004214
C2B487:  STA $10
C2B489:  ASL #4
C2B48D:  ASL
C2B48E:  ORA $10
C2B490:  STA $7E00,X
C2B493:  INX
C2B494:  INX
C2B495:  CPX $1A
C2B497:  BNE C2B446     ; -83
C2B499:  TDC
C2B49A:  SEP #$20       ; 8-bit A
C2B49C:  RTL

; 8-bit data.
C2B49D:  db $01
C2B49E:  db $02
C2B49F:  db $03
C2B4A0:  db $04
C2B4A1:  db $05
C2B4A2:  db $06

; Return a value based on our 3 slot results: 0 for 7-7-Bar, 7 when we don't
; have three matching symbols [Lagomorph], or Symbol value + 1 when we have
; a matching triplet

C2B4A3:  LDA $36        ; get slot 1 [aka reel 1] symbol
C2B4A5:  CMP $37        ; compare to slot 2 symbol
C2B4A7:  BNE C2B4AF     ; branch if they don't match
C2B4A9:  CMP $38        ; if they do, compare to slot 3 symbol
C2B4AB:  BNE C2B4AF     ; branch if that is different
C2B4AD:  INC            ; if they're all the same, just return
                        ; the symbol value + 1
C2B4AE:  RTL

C2B4AF:  ORA $37
C2B4B1:  BNE C2B4BB     ; branch if slot 1 or 2 isn't "7"
C2B4B3:  LDA $38        ; only reach here if Slot 1 and 2 are both "7"
C2B4B5:  CMP #$02
C2B4B7:  BNE C2B4BB     ; branch if slot 3 isn't "Bar"
C2B4B9:  TDC            ; if it is, return 0
C2B4BA:  RTL

C2B4BB:  LDA #$07       ; return 7 for Lagomorph?
C2B4BD:  RTL

; 16-bit data called from C1/B89A and C1/B8BA.
C2B4BE:  dw $0F7A
C2B4C0:  dw $0FC0
C2B4C2:  dw $0FCE
C2B4C4:  dw $0FDC
C2B4C6:  dw $0FEA
C2B4C8:  dw $0FF8
C2B4CA:  dw $1006
C2B4CC:  dw $071C
C2B4CE:  dw $1030
C2B4D0:  dw $103E
C2B4D2:  dw $104C
C2B4D4:  dw $105A
C2B4D6:  dw $14C8
C2B4D8:  dw $14D6
C2B4DA:  dw $151C
C2B4DC:  dw $152A
C2B4DE:  dw $1538
C2B4E0:  dw $06F2
C2B4E2:  dw $070E
C2B4E4:  dw $0DE4
C2B4E6:  dw $1110
C2B4E8:  dw $111E
C2B4EA:  dw $112C
C2B4EC:  dw $113A
C2B4EE:  dw $1148
C2B4F0:  dw $1156
C2B4F2:  dw $1164
C2B4F4:  dw $1172
C2B4F6:  dw $1180
C2B4F8:  dw $118E
C2B4FA:  dw $119C
C2B4FC:  dw $11AA
C2B4FE:  dw $11B8
C2B500:  dw $11C6
C2B502:  dw $11D4
C2B504:  dw $11E2
C2B506:  dw $1030
C2B508:  dw $1068
C2B50A:  dw $1076
C2B50C:  dw $1084
C2B50E:  dw $0FB2
C2B510:  dw $1092
C2B512:  dw $0E00
C2B514:  dw $0F42
C2B516:  dw $10A0
C2B518:  dw $10AE
C2B51A:  dw $10BC
C2B51C:  dw $10CA
C2B51E:  dw $10D8
C2B520:  dw $10E6
C2B522:  dw $10F4
C2B524:  dw $1102
C2B526:  dw $0F34
C2B528:  dw $0F26
C2B52A:  dw $0F18
C2B52C:  dw $0F0A
C2B52E:  dw $14BA
C2B530:  dw $1618

C2B532:  REP #$20       ; 16-bit A
C2B534:  LDA $2001,X    ; Enemy sprite ID
C2B537:  TAX
C2B538:  TDC
C2B539:  SEP #$20       ; 8-bit A
C2B53B:  CPX #$0106     ; Is it GhostTrain?
C2B53E:  BEQ C2B541     ; If not, exit
C2B540:  RTL

C2B541:  LDX #$012C     ; 300
C2B544:  STX $26
C2B546:  LDA $E70003,X
C2B54A:  ASL
C2B54B:  TAX
C2B54C:  LDA $E71848,X
C2B550:  STA $F3
C2B552:  LDA $E71849,X
C2B556:  STA $F4
C2B558:  LDA #$E7       ; -25
C2B55A:  STA $F5
C2B55C:  LDA #$00       ; 0
C2B55E:  STA $F6
C2B560:  LDA #$C4       ; -60
C2B562:  STA $F7
C2B564:  LDA #$7F       ; 127
C2B566:  STA $F8
C2B568:  JSL C2FF6D
C2B56C:  LDX $26
C2B56E:  LDA $E70000,X
C2B572:  AND #$7F
C2B574:  STA $22
C2B576:  ASL
C2B577:  CLC
C2B578:  ADC $22
C2B57A:  TAX
C2B57B:  LDA $E71650,X
C2B57F:  STA $F3
C2B581:  LDA $E71651,X
C2B585:  STA $F4
C2B587:  LDA $E71652,X
C2B58B:  STA $F5
C2B58D:  LDX $26
C2B58F:  LDA $E70002,X
C2B593:  AND #$7F
C2B595:  STA $22
C2B597:  ASL
C2B598:  CLC
C2B599:  ADC $22
C2B59B:  TAX
C2B59C:  LDA $E71650,X
C2B5A0:  STA $F6
C2B5A2:  LDA $E71651,X
C2B5A6:  STA $F7
C2B5A8:  LDA $E71652,X
C2B5AC:  STA $F8
C2B5AE:  REP #$20       ; 16-bit A
C2B5B0:  STZ $10
C2B5B2:  TDC
C2B5B3:  TAX
C2B5B4:  LDA $7FC400,X
C2B5B8:  AND #$01FF
C2B5BB:  CMP #$0100
C2B5BE:  BCC C2B5E4     ; +36
C2B5C0:  AND #$00FF
C2B5C3:  SEC
C2B5C4:  SBC #$0080     ; 128
C2B5C7:  ASL
C2B5C8:  ASL
C2B5C9:  ASL
C2B5CA:  ASL
C2B5CB:  ASL
C2B5CC:  TAY
C2B5CD:  PHX
C2B5CE:  LDA #$0010     ; 16
C2B5D1:  STA $12
C2B5D3:  LDX $10
C2B5D5:  LDA [$F6],Y
C2B5D7:  STA $AE3F,X
C2B5DA:  INY
C2B5DB:  INY
C2B5DC:  INX
C2B5DD:  INX
C2B5DE:  DEC $12
C2B5E0:  BNE C2B5D5     ; -13
C2B5E2:  BRA C2B5FF     ; +27
C2B5E4:  ASL
C2B5E5:  ASL
C2B5E6:  ASL
C2B5E7:  ASL
C2B5E8:  ASL
C2B5E9:  TAY
C2B5EA:  PHX
C2B5EB:  LDA #$0010     ; 16
C2B5EE:  STA $12
C2B5F0:  LDX $10
C2B5F2:  LDA [$F3],Y
C2B5F4:  STA $AE3F,X
C2B5F7:  INY
C2B5F8:  INY
C2B5F9:  INX
C2B5FA:  INX
C2B5FB:  DEC $12
C2B5FD:  BNE C2B5F2     ; -13
C2B5FF:  STX $10
C2B601:  PLX
C2B602:  INX
C2B603:  INX
C2B604:  CPX #$0200     ; 512
C2B607:  BNE C2B5B4     ; -85
C2B609:  TDC
C2B60A:  SEP #$20       ; 8-bit A
C2B60C:  RTL

C2B60D:  LDX #$0280     ; 640
C2B610:  STX $10
C2B612:  LDX #$890F     ; -30,449
C2B615:  STX $14
C2B617:  JSR C2B62D
C2B61A:  JSR C2B641
C2B61D:  LDX $10
C2B61F:  INX
C2B620:  STX $10
C2B622:  LDX $14
C2B624:  INX
C2B625:  STX $14
C2B627:  CPX #$8913     ; -30,445
C2B62A:  BNE C2B617     ; -21
C2B62C:  RTL

C2B62D:  TDC            ; A = 0
C2B62E:  TAY            ; Y = 0
C2B62F:  CLC
C2B630:  ADC ($14),Y
C2B632:  INY #4
C2B636:  CPY #$0060     ; 96
C2B639:  BNE C2B62F     ; -12
C2B63B:  EOR #$FF
C2B63D:  INC
C2B63E:  STA ($10),Y
C2B640:  RTS

C2B641:  LDY #$0000     ; 0
C2B644:  LDA ($14),Y
C2B646:  STA ($10),Y
C2B648:  INY #4
C2B64C:  CPY #$0060     ; 96
C2B64F:  BNE C2B644     ; -13
C2B651:  RTS

C2B652:  LDA $2EC6
C2B655:  STA $896B
C2B658:  LDA $2EE6
C2B65B:  STA $896C
C2B65E:  LDA $2F06
C2B661:  STA $896D
C2B664:  LDA $2F26
C2B667:  STA $896E
C2B66A:  LDX #$0280
C2B66D:  STX $10
C2B66F:  LDX #$890F
C2B672:  STX $14
C2B674:  JSR C2B6DE
C2B677:  BCC C2B67C
C2B679:  JSR C2B6C6
C2B67C:  LDX $10
C2B67E:  INX
C2B67F:  STX $10
C2B681:  LDX $14
C2B683:  INX
C2B684:  STX $14
C2B686:  CPX #$8913
C2B689:  BNE C2B674
C2B68B:  TDC
C2B68C:  TAX
C2B68D:  LDA $896B,x
C2B690:  JSR C2B69A
C2B693:  INX
C2B694:  CPX #$0004
C2B697:  BNE C2B68D
C2B699:  RTL

C2B69A:  PHX
C2B69B:  STA $18
C2B69D:  TDC            ; A = 0
C2B69E:  TAY            ; Y = 0
C2B69F:  LDA $02DC,Y
C2B6A2:  CMP $18
C2B6A4:  BEQ C2B6AE     ; +8
C2B6A6:  INY
C2B6A7:  CPY #$0004     ; 4
C2B6AA:  BNE C2B69F     ; -13
C2B6AC:  BRA C2B6C4     ; +22

C2B6AE:  LDA #$17       ; 23
C2B6B0:  STA $1A
C2B6B2:  LDA $0280,Y
C2B6B5:  STA $890F,X
C2B6B8:  INY #4
C2B6BC:  INX #4
C2B6C0:  DEC $1A
C2B6C2:  BNE C2B6B2     ; -18
C2B6C4:  PLX
C2B6C5:  RTS

C2B6C6:  TDC            ; A = 0
C2B6C7:  TAY            ; Y = 0
C2B6C8:  STA ($10),Y
C2B6CA:  INY #4
C2B6CE:  CPY #$005C     ; 92
C2B6D1:  BNE C2B6C8     ; -11
C2B6D3:  LDA #$FF       ; -1
C2B6D5:  STA ($10),Y
C2B6D7:  INY #4
C2B6DB:  STA ($10),Y
C2B6DD:  RTS

C2B6DE:  TDC            ; A = 0
C2B6DF:  TAY            ; Y = 0
C2B6E0:  CLC
C2B6E1:  ADC ($10),Y
C2B6E3:  INY #4
C2B6E7:  CPY #$0060     ; 96
C2B6EA:  BNE C2B6E0     ; -12
C2B6EC:  EOR #$FF
C2B6EE:  INC
C2B6EF:  CMP ($10),Y
C2B6F1:  BEQ C2B6F5     ; +2
C2B6F3:  SEC
C2B6F4:  RTS

C2B6F5:  CLC
C2B6F6:  RTS

; Called from C1/0F17.
C2B6F7:  REP #$20       ; 16-bit A
C2B6F9:  TDC            ; A = 0
C2B6FA:  TAX            ; X = 0
C2B6FB:  LDA #$2000     ; 8,192
C2B6FE:  STA $5FAD,X
C2B701:  INX
C2B702:  INX
C2B703:  CPX #$0080     ; 128
C2B706:  BNE C2B6FE     ; -10
C2B708:  TDC            ; A = 0
C2B709:  TAX            ; X = 0
C2B70A:  STA $43F5,X    ; BG1 HDMA scroll window X-offset
C2B70D:  STA $4775,X
C2B710:  STA $4AF5,X    ; Battle info text X-shift
C2B713:  INX
C2B714:  INX
C2B715:  CPX #$0380     ; 896
C2B718:  BNE C2B70A     ; -16
C2B71A:  LDX #$025C     ; 604
C2B71D:  LDA #$FFA9     ; -87
C2B720:  STA $12
C2B722:  LDA #$FF66     ; -154
C2B725:  STA $14
C2B727:  LDA $12
C2B729:  STA $4777,X
C2B72C:  LDA $14
C2B72E:  STA $4AF7,X    ; Battle info text Y-shift
C2B731:  DEC $12
C2B733:  DEC $14
C2B735:  INX #4
C2B739:  CPX #$0380     ; 896
C2B73C:  BNE C2B727     ; -23
C2B73E:  LDX #$027C     ; 636
C2B741:  LDA #$0064     ; 100
C2B744:  STA $10
C2B746:  LDA #$000C     ; 12
C2B749:  STA $12
C2B74B:  LDA $10
C2B74D:  STA $4AF7,X
C2B750:  DEC $12
C2B752:  BNE C2B761     ; +13
C2B754:  LDA #$000C     ; 12
C2B757:  STA $12
C2B759:  LDA $10
C2B75B:  CLC
C2B75C:  ADC #$0004     ; 4
C2B75F:  STA $10
C2B761:  INX #4
C2B765:  CPX #$033C     ; 828
C2B768:  BNE C2B74B     ; -31
C2B76A:  LDX #$025C     ; 604
C2B76D:  LDA #$0068     ; 104
C2B770:  STA $4777,X
C2B773:  INX #4
C2B777:  CPX #$035C     ; 860
C2B77A:  BNE C2B770     ; -12
C2B77C:  TDC            ; A = 0
C2B77D:  TAX            ; X = 0
C2B77E:  LDA $4D51,X
C2B781:  STA $4E75,X
C2B784:  STA $4F75,X
C2B787:  STA $5095,X
C2B78A:  INX
C2B78B:  INX
C2B78C:  CPX #$0100     ; 256
C2B78F:  BNE C2B77E     ; -19
C2B791:  LDA $4D51,X
C2B794:  STA $4F75,X
C2B797:  STA $5095,X
C2B79A:  INX
C2B79B:  INX
C2B79C:  CPX #$0120     ; 288
C2B79F:  BNE C2B791     ; -16
C2B7A1:  LDA $4D51,X
C2B7A4:  STA $5095,X
C2B7A7:  INX
C2B7A8:  INX
C2B7A9:  CPX #$0140     ; 320
C2B7AC:  BNE C2B7A1     ; -13
C2B7AE:  TDC            ; A = 0
C2B7AF:  TAX            ; X = 0
C2B7B0:  LDA $4D73,X
C2B7B3:  CLC
C2B7B4:  ADC #$0040     ; 64
C2B7B7:  STA $4E97,X
C2B7BA:  CLC
C2B7BB:  ADC #$0040     ; 64
C2B7BE:  STA $4F97,X
C2B7C1:  SEC
C2B7C2:  SBC #$0008     ; 8
C2B7C5:  STA $50B7,X
C2B7C8:  INX #4
C2B7CC:  CPX #$00C0     ; 192
C2B7CF:  BNE C2B7B0     ; -33
C2B7D1:  TDC            ; A = 0
C2B7D2:  TAX            ; X = 0
C2B7D3:  LDA $4D53,X
C2B7D6:  SEC
C2B7D7:  SBC #$0008     ; 8
C2B7DA:  STA $5097,X
C2B7DD:  LDA $4E33,X
C2B7E0:  SEC
C2B7E1:  SBC #$0008     ; 8
C2B7E4:  STA $5177,X
C2B7E7:  INX #4
C2B7EB:  CPX #$0020     ; 32
C2B7EE:  BNE C2B7D3     ; -29
C2B7F0:  TDC            ; A = 0
C2B7F1:  TAX            ; X = 0
C2B7F2:  STZ $53D5,X
C2B7F5:  LDA #$013C     ; 316
C2B7F8:  STA $53D7,X
C2B7FB:  INX #4
C2B7FF:  CPX #$00A0     ; 160
C2B802:  BNE C2B7F2     ; -18
C2B804:  TDC            ; A = 0
C2B805:  TAX            ; X = 0
C2B806:  LDA #$0018     ; 24
C2B809:  STA $12
C2B80B:  LDA #$00DC     ; 220
C2B80E:  STA $10
C2B810:  LDA #$0100     ; 256
C2B813:  STA $5475,X
C2B816:  LDA $10
C2B818:  STA $5477,X
C2B81B:  DEC $12
C2B81D:  BNE C2B827     ; +8
C2B81F:  LDA $10
C2B821:  CLC
C2B822:  ADC #$0004     ; 4
C2B825:  STA $10
C2B827:  INX #4
C2B82B:  CPX #$00C0
C2B82E:  BNE C2B810     ; -32
C2B830:  TDC            ; A = 0
C2B831:  TAX            ; X = 0
C2B832:  LDA #$0060     ; 96
C2B835:  STA $10
C2B837:  LDA #$0014     ; 20
C2B83A:  STA $12
C2B83C:  LDA #$0100     ; 256
C2B83F:  STA $51D5,X
C2B842:  LDA $10
C2B844:  STA $51D7,X
C2B847:  DEC $12
C2B849:  BNE C2B858     ; +13
C2B84B:  LDA #$000C     ; 12
C2B84E:  STA $12
C2B850:  LDA $10
C2B852:  CLC
C2B853:  ADC #$0004     ; 4
C2B856:  STA $10
C2B858:  INX #4
C2B85C:  CPX #$00E0     ; 224
C2B85F:  BNE C2B83C     ; -37
C2B861:  TDC
C2B862:  STA $51D5,X
C2B865:  STA $51D7,X
C2B868:  INX
C2B869:  INX
C2B86A:  CPX #$0100     ; 256
C2B86D:  BNE C2B862     ; -13
C2B86F:  TDC            ; A = 0 already...
C2B870:  TAX            ; X = 0
C2B871:  LDA #$0060     ; 96
C2B874:  STA $10
C2B876:  LDA #$000C     ; 12
C2B879:  STA $12
C2B87B:  LDA #$0100     ; 256
C2B87E:  STA $4305,X
C2B881:  LDA $10
C2B883:  STA $4307,X
C2B886:  DEC $12
C2B888:  BNE C2B897     ; +13
C2B88A:  LDA #$000C     ; 12
C2B88D:  STA $12
C2B88F:  LDA $10
C2B891:  CLC
C2B892:  ADC #$0004     ; 4
C2B895:  STA $10
C2B897:  INX #4
C2B89B:  CPX #$00F0     ; 240
C2B89E:  BNE C2B87B     ; -37
C2B8A0:  TDC
C2B8A1:  SEP #$20       ; 8-bit A
C2B8A3:  RTL

C2B8A4:  LDA $E9F6
C2B8A7:  BEQ C2B8F0     ; +71
C2B8A9:  LDA $E9F9      ; Battle screen brightness
C2B8AC:  AND #$0F
C2B8AE:  CMP #$0F       ; 15
C2B8B0:  BEQ C2B8B6     ; +4
C2B8B2:  INC
C2B8B3:  STA $E9F9
C2B8B6:  SEP #$10       ; 8-bit X & Y
C2B8B8:  LDA $E9F7
C2B8BB:  ASL
C2B8BC:  TAY
C2B8BD:  LDA $E9F8
C2B8C0:  ASL
C2B8C1:  TAX
C2B8C2:  LDA #$E0       ; -32
C2B8C4:  STA $EA31,Y
C2B8C7:  STA $EA33,Y
C2B8CA:  STA $EACB,X
C2B8CD:  STA $EACD,X
C2B8D0:  CMP #$FF
C2B8D2:  BEQ C2B8D5     ; +1
C2B8D4:  INC
C2B8D5:  INX #4
C2B8D9:  DEY #4
C2B8DD:  BNE C2B8C4     ; -27
C2B8DF:  INC $E9F8
C2B8E2:  INC $E9F8
C2B8E5:  DEC $E9F7
C2B8E8:  DEC $E9F7
C2B8EB:  BNE C2B8F0     ; +3
C2B8ED:  STZ $E9F6
C2B8F0:  REP #$10       ; 16-bit X & Y
C2B8F2:  RTL

; Division Function: divide 16-bit Variable $2C by 16-bit $2E.
; Put Quotient in 16-bit $30, and Remainder in 16-bit $32.
C2B8F3:  PHX
C2B8F4:  REP #$20       ; Set 16-bit Accumulator
C2B8F6:  STZ $30        ; Zero the quotient
C2B8F8:  STZ $32        ; Zero the remainder
C2B8FA:  LDA $2C        ; Load dividend
C2B8FC:  BEQ C2B91E     ; Branch if zero
C2B8FE:  LDA $2E        ; Load divisor
C2B900:  BEQ C2B91E     ; Branch if zero
C2B902:  LDX #$0010
C2B905:  ROL $2C
C2B906:  ROL $32
C2B909:  LDA $32
C2B90B:  SEC
C2B90C:  SBC $2E
C2B90E:  STA $32
C2B910:  BCS C2B919
C2B912:  LDA $32
C2B914:  ADC $2E
C2B916:  STA $32
C2B918:  CLC
C2B919:  ROL $30
C2B91B:  DEX
C2B91C:  BNE C2B905     ; Iterate 16 times, as there are 16 bits
                                       ; In dividend
C2B91E:  LDA #$0000     ; TDC would work here
C2B921:  SEP #$20       ; Set 8-bit Accumulator
C2B923:  PLX
C2B924:  RTS

; Called from Bank C1, once each frame
C2B925:  LDA $ECEF
C2B928:  AND #$40
C2B92A:  BNE C2B92D     ; Proceed to C2/B92D if in a timed event?
C2B92C:  RTL            ; Otherwise, exit

C2B92D:  LDA $628F
C2B930:  BEQ C2B936     ; Branch if first time C2/B92D executed this battle, or if
                                       ; A frame delay variable reached zero on the prior call.
C2B932:  DEC $628F      ; Otherwise, decrement frame delay variable, and skip
                                       ; Running C2/B936 for now.
C2B935:  RTL

; Breaks a timer into minutes and seconds and prepares it for display.
; Is called in battles on escape from Floating Continent, for instance.
C2B936:  LDA #$3C       ; Should be #$3B.  see next instruction.
C2B938:  STA $628F      ; Try to make wait 60 frames until next display update.
                                       ; The problem is, due to the way C2/B92D works, this
                                       ; Will wait 61 frames.  thus, the visual timer will lag
                                       ; 1 to 59 frames behind the real timer.  and after 61
                                       ; Real seconds into a timed battle [possibly sooner], the
                                       ; Visual timer will decrement by 2 seconds on one tick.
C2B93B:  LDA $001189    ; Bottom byte of timer.  the FC timer starts at
                                       ; 5460h, and counts down each frame.
C2B93F:  STA $2C
C2B941:  LDA $00118A    ; Top byte of timer
C2B945:  STA $2D
C2B947:  LDX #$003C
C2B94A:  STX $2E        ; We're going to divide by 60
C2B94C:  JSR $B8F3      ; Divide 16-bit Variable $2C by 16-bit $2E.  Put
                                       ; Quotient in 16-bit $30, and Remainder in 16-bit $32.
C2B94F:  LDX $30
C2B951:  STX $2C        ; Put quotient into variable $2C
C2B953:  LDX #$003C
C2B956:  STX $2E        ; We'll be dividing by 60 again
C2B958:  JSR $B8F3      ; Divide 16-bit Variable $2C by 16-bit $2E.  Put
                                       ; Quotient in 16-bit $30, and Remainder in 16-bit $32.
C2B95B:  TDC
C2B95C:  TAX            ; Zero X, which we'll use as a temporary tens digit.
C2B95D:  LDA $30        ; We divided by 60 twice, so this variable is our Minutes,
                                       ; And variable $32 our Seconds.
C2B95F:  SEC
C2B960:  SBC #$0A       ; Subtract 10 from Minutes
C2B962:  BCC C2B967     ; If the Minutes had been < 10, branch
C2B964:  INX            ; Minutes were >=10, so increment our tens digit.
C2B965:  BRA C2B95F     ; Loop and do it again, until we finally get Minutes < 10
                                       ; [iow, single-digit Minutes].
C2B967:  CLC
C2B968:  ADC #$BE       ; Add BEh to ones digit of our Minutes
C2B96A:  STA $6292      ; Save it
C2B96D:  TXA            ; Put tens digit in A
C2B96E:  BNE C2B974     ; Branch if tens digit is nonzero
C2B970:  LDA #$FF
C2B972:  BRA C2B977     ; Branch and store null where tens digit of Minutes
                                       ; Would appear.
C2B974:  CLC
C2B975:  ADC #$B4       ; Add B4h to tens digit of our Minutes
C2B977:  STA $6290      ; Save it
C2B97A:  TDC
C2B97B:  TAX            ; Zero X, which we'll use as a temporary tens digit.
C2B97C:  LDA $32        ; Get our Seconds
C2B97E:  SEC
C2B97F:  SBC #$0A       ; Subtract 10 from Seconds
C2B981:  BCC C2B986     ; If the Seconds had been < 10, branch
C2B983:  INX            ; Seconds were >=10, so increment our tens digit.
C2B984:  BRA C2B97E     ; Loop and do it again, until we finally get Seconds < 10
                                       ; [iow, single-digit Seconds].
C2B986:  CLC
C2B987:  ADC #$BE       ; Add BEh to ones digit of our Seconds
C2B989:  STA $6298      ; Save it
C2B98C:  TXA            ; Put tens digit in A
C2B98D:  CLC
C2B98E:  ADC #$B4       ; Add B4h to tens digit of our Seconds
C2B991:  STA $6296      ; Save it.  note that we're not bothering to check for
                                       ; A zero tens digit of Seconds, as blanking the digit
                                       ; Would make no sense given we're displaying Minutes
                                       ; Directly to the left of it.
C2B993:  LDA #$C1
C2B996:  STA $6294
C2B998:  RTL

C2B999:  LDX $7AF6
C2B99C:  LDA $74D3,X
C2B99F:  REP #$20
C2B9A1:  ASL
C2B9A2:  ASL
C2B9A3:  STA $10
C2B9A5:  LDA $6A30,X
C2B9A8:  AND #$00FF
C2B9AB:  ASL
C2B9AC:  ASL
C2B9AD:  ASL
C2B9AE:  STA $12
C2B9B0:  LDA $6A3C,X
C2B9B3:  CLC
C2B9B4:  ADC $12
C2B9B6:  SEC
C2B9B7:  SBC $10
C2B9B9:  STA $6A3C,X
C2B9BC:  TDC
C2B9BD:  SEP #$20
C2B9BF:  RTL

C2B9C0:  LDX $7AF6
C2B9C3:  LDA $74D3,X
C2B9C6:  REP #$20
C2B9C8:  ASL
C2B9C9:  ASL
C2B9CA:  STA $10
C2B9CC:  LDA $6A30,X
C2B9CF:  AND #$00FF
C2B9D2:  ASL
C2B9D3:  ASL
C2B9D4:  ASL
C2B9D5:  STA $12
C2B9D7:  LDA $6A3C,X
C2B9DA:  CLC
C2B9DB:  ADC $10
C2B9DD:  SEC
C2B9DE:  SBC $12
C2B9E0:  STA $6A3C,X
C2B9E3:  TDC
C2B9E4:  SEP #$20
C2B9E6:  RTL

; Picture a 4x4 grid of 32x32-pixel monster subsprites with 16
; Possible positions on it:
;
; 00 01 02 03
; 04 05 06 07
; 08 09 0A 0B
; 0C 0D 0E 0F
;
; The structures below are for each of those 16 positions, and
; The positions are used by the monster formation molds.)
;
; 1st byte: horizontal grid position * 32 ?
; 2nd byte: vertical grid position * 32 ?
; 3rd byte: position's offset in terms of 8x8-pixel tile units
; 4th byte: always 01 ??)

; Position 00
C2B9E7:  dw $0000
C2B9E9:  dw $0100

; Position 01
C2B9EB:  dw $0020
C2B9ED:  dw $0104

; Position 02
C2B9EF:  dw $0040
C2B9F1:  dw $0108

; Position 03
C2B9F3:  dw $0060
C2B9F5:  dw $010C

; Position 04
C2B9F7:  dw $2000
C2B9F9:  dw $0140

; Position 05
C2B9FB:  dw $2020
C2B9FD:  dw $0144

; Position 06
C2B9FF:  dw $2040
C2BA01:  dw $0148

; Position 07
C2BA03:  dw $2060
C2BA05:  dw $014C

; Position 08
C2BA07:  dw $4000
C2BA09:  dw $0180

; Position 09
C2BA0B:  dw $4020
C2BA0D:  dw $0184

; Position 0A
C2BA0F:  dw $4040
C2BA11:  dw $0188

; Position 0B
C2BA13:  dw $4060
C2BA15:  dw $018C

; Position 0C
C2BA17:  dw $6000
C2BA19:  dw $01C0

; Position 0D
C2BA1B:  dw $6020
C2BA1D:  dw $01C4

; Position 0E
C2BA1F:  dw $6040
C2BA21:  dw $01C8

; Position 0F
C2BA23:  dw $6060
C2BA25:  dw $01CC

C2BA27:  LDY #$0001
C2BA2A:  LDA [$8F],Y
C2BA2C:  AND #$7F
C2BA2E:  STA $10
C2BA30:  STZ $12
C2BA32:  TDC
C2BA33:  TAX
C2BA34:  LDA $10
C2BA36:  CMP $2EC6,X
C2BA39:  BEQ C2BA49
C2BA3B:  INC $12
C2BA3D:  TXA
C2BA3E:  CLC
C2BA3F:  ADC #$20
C2BA41:  TAX
C2BA42:  CPX #$0080
C2BA45:  BNE C2BA34
C2BA47:  CLC
C2BA48:  RTS

C2BA49:  SEC
C2BA4A:  RTS

C2BA4B:  JSR C2BA27
C2BA4E:  BCC C2BA6D
C2BA50:  LDA [$8F],Y
C2BA52:  BPL C2BA81
C2BA54:  LDX $64D6
C2BA57:  STX $14
C2BA59:  LDX $64D8
C2BA5C:  STX $16
C2BA5E:  TDC
C2BA5F:  TAX
C2BA60:  LDA $12
C2BA62:  CMP $64D6,X
C2BA65:  BEQ C2BA70
C2BA67:  INX
C2BA68:  CPX #$0004
C2BA6B:  BNE C2BA62
C2BA6D:  JMP C2BAC8

C2BA70:  LDA #$FF
C2BA73:  STA $0014,X
C2BA75:  LDX #$FFFF
C2BA77:  STX $64D6
C2BA7B:  STX $64D8
C2BA7E:  JMP C2BAB6

C2BA81:  TDC
C2BA82:  TAX
C2BA83:  LDA $12
C2BA85:  CMP $64D6,X
C2BA88:  BEQ C2BAC8
C2BA8A:  INX
C2BA8B:  CPX #$0004
C2BA8E:  BNE C2BA85
C2BA90:  LDX #$FFFF
C2BA91:  PHX
C2BA92:  STX $14
C2BA94:  STX $16
C2BA96:  TDC
C2BA99:  TAX
C2BA9A:  LDA $64D6,X
C2BA9D:  BMI C2BAA3
C2BA9F:  TAY
C2BAA0:  STA $0014,Y
C2BAA3:  INX
C2BAA4:  CPX #$0004
C2BAA7:  BNE C2BA9A
C2BAA9:  LDA $12
C2BAAB:  TAY
C2BAAC:  STA $0014,Y
C2BAAF:  PLX
C2BAB0:  STX $64D6
C2BAB3:  STX $64D8
C2BAB6:  TDC
C2BAB7:  TAX
C2BAB8:  TAY
C2BAB9:  LDA $0014,Y
C2BABC:  BMI C2BAC2
C2BABE:  STA $64D6,X
C2BAC1:  INX
C2BAC2:  INY
C2BAC3:  CPY #$0004
C2BAC6:  BNE C2BAB9
C2BAC8:  LDX $8F
C2BACA:  INX
C2BACB:  STX $8F
C2BACD:  TDC
C2BACE:  TAX
C2BACF:  REP #$20
C2BAD1:  LDA #$21FF
C2BAD4:  STA $5B95,X
C2BAD7:  INX
C2BAD8:  INX
C2BAD9:  CPX #$0070
C2BADC:  BNE C2BAD4
C2BADE:  TDC
C2BADF:  SEP #$20
C2BAE1:  RTL

C2BAE2:  JSR C2BA27
C2BAE5:  BCC C2BB0B
C2BAE7:  LDA $12
C2BAE9:  TAX
C2BAEA:  LDA C11A01,X
C2BAEE:  STA $12
C2BAF0:  LDA [$8F],Y
C2BAF2:  BMI C2BAFE
C2BAF4:  LDA $2F4E
C2BAF7:  ORA $12
C2BAF9:  STA $2F4E
C2BAFC:  BRA C2BB0B
C2BAFE:  LDA $2F4C
C2BB01:  ORA $12
C2BB03:  STA $2F4C
C2BB06:  LDA #$FF
C2BB08:  STA $4001,X
C2BB0B:  LDX $8F
C2BB0D:  INX
C2BB0E:  STX $8F
C2BB10:  RTL

C2BB11:  AND #$0F
C2BB13:  ASL
C2BB14:  TAX
C2BB15:  JMP (C2BB18,X)

; Data - function pointers
C2BB18:  dw C2BB46
C2BB1A:  dw C2BB1C

C2BB1C:  LDY #$0002
C2BB1F:  LDA ($76),Y
C2BB21:  STA $22
C2BB23:  LDA #$0C       ; SwdTech name length
C2BB25:  STA $24
C2BB27:  JSL C118D5     ; Multiplier function
C2BB2B:  LDX $26
C2BB2D:  TDC
C2BB2E:  TAY
C2BB2F:  LDA $CF3C40,X  ; SwdTech names
C2BB33:  CMP #$FF
C2BB35:  BEQ C2BB41
C2BB37:  STA $57D5,Y
C2BB3A:  INX
C2BB3B:  INY
C2BB3C:  CPY #$000C
C2BB3F:  BNE C2BB2F
C2BB41:  TDC
C2BB42:  STA $57D5,Y
C2BB45:  RTL

C2BB46:  LDY #$0002
C2BB49:  LDA ($76),Y
C2BB4B:  STA $22
C2BB4D:  LDA #$0A       ; Esper attack name length
C2BB4F:  STA $24
C2BB51:  JSL C118D5     ; Multiplier function
C2BB55:  LDX $26
C2BB57:  TDC
C2BB58:  TAY
C2BB59:  LDA $E6FE8F,X  ; Esper attack names
C2BB5D:  CMP #$FF
C2BB5F:  BEQ C2BB6B
C2BB61:  STA $57D5,Y
C2BB64:  INX
C2BB65:  INY
C2BB66:  CPY #$000A
C2BB69:  BNE C2BB59
C2BB6B:  TDC
C2BB6C:  STA $57D5,Y
C2BB6F:  RTL

; Number of bytes to shift enemy's Imp sprite forward in the monster
; Graphics buffer, so that it's centered properly.  Provides the
; Bottom byte of a 2-byte pointer, and is indexed from Bank C1 by
; [original enemy's width / 8] * 2.  Keep in mind that an 8x8-pixel
; Tile is 32 bytes.)
C2BB70:  dw $0000    	; If 000 pixels wide (don't shift right)
C2BB72:  dw $0000    	; If 008 pixels wide
C2BB74:  dw $0000    	; If 016 pixels wide
C2BB76:  dw $0000    	; If 024 pixels wide
C2BB78:  dw $0000    	; If 032 pixels wide
C2BB7A:  dw $0020    	; If 040 pixels wide (shift right 1 tile)
C2BB7C:  dw $0020    	; If 048 pixels wide
C2BB7E:  dw $0040    	; If 056 pixels wide (shift right 2 tiles)
C2BB80:  dw $0040    	; If 064 pixels wide
C2BB82:  dw $0060    	; If 072 pixels wide (shift right 3 tiles)
C2BB84:  dw $0060    	; If 080 pixels wide
C2BB86:  dw $0080    	; If 088 pixels wide (shift right 4 tiles)
C2BB88:  dw $0080    	; If 096 pixels wide
C2BB8A:  dw $00A0    	; If 104 pixels wide (shift right 5 tiles)
C2BB8C:  dw $00A0    	; If 112 pixels wide
C2BB8E:  dw $00C0    	; If 120 pixels wide (shift right 6 tiles)
C2BB90:  dw $00C0    	; If 128 pixels wide

; Number of bytes to shift enemy's Imp sprite forward in the monster
; Graphics buffer, so that it's centered properly.  Provides the top
; Byte of a 2-byte pointer, and is indexed from Bank C1 by
; [original enemy's height / 8] * 2.  Keep in mind that an 8x8-pixel
; Tile is 32 bytes, and each row in the buffer has 16 tiles.)
C2BB92:  dw $0000    	; If 0 pixels tall (don't shift down)
C2BB94:  dw $0000    	; If 8 pixels tall
C2BB96:  dw $0000    	; If 16 pixels tall
C2BB98:  dw $0000    	; If 24 pixels tall
C2BB9A:  dw $0000    	; If 32 pixels tall
C2BB9C:  dw $0200    	; If 40 pixels tall (shift down 1 tile)
C2BB9E:  dw $0200    	; If 48 pixels tall
C2BBA0:  dw $0400    	; If 56 pixels tall (shift down 2 tiles)
C2BBA2:  dw $0400    	; If 64 pixels tall
C2BBA4:  dw $0600    	; If 72 pixels tall (shift down 3 tiles)
C2BBA6:  dw $0600    	; If 80 pixels tall
C2BBA8:  dw $0800    	; If 88 pixels tall (shift down 4 tiles)
C2BBAA:  dw $0800    	; If 96 pixels tall
C2BBAC:  dw $0A00    	; If 104 pixels tall (shift down 5 tiles)
C2BBAE:  dw $0A00    	; If 112 pixels tall
C2BBB0:  dw $0C00    	; If 120 pixels tall (shift down 6 tiles)
C2BBB2:  dw $0C00    	; If 128 pixels tall

C2BBB4:  LDX $7AF6      ; Animation ID
C2BBB7:  PHX
C2BBB8:  JSR $C12469
C2BBBC:  TDC
C2BBBD:  TAX
C2BBBE:  LDA $7E60,X
C2BBC1:  STA $7FC0,X
C2BBC4:  INX
C2BBC5:  CPX #$0020
C2BBC8:  BNE C2BBBE
C2BBCA:  INC $62B0
C2BBCC:  PLX
C2BBCD:  RTL

; Used by Crusader, for Purifier/Collapse of Heaven and Earth/
; Apocalypse attack
C2BBCF:  LDX $6169      ; From C1/CBD6
C2BBD2:  TDC            ; Set accumulator to 0
C2BBD3:  TAY            ; Set Y to 0
C2BBD4:  LDA $D27840,X
C2BBD8:  STA $7FE0,Y    ; Write over character 4's palette and
                                       ; Reflect's barrier palette, set's left
                                       ; Sprite palette
C2BBDB:  STA $7DE0,Y    ; Same as above
C2BBDE:  INX
C2BBDF:  INY
C2BBE0:  CPY #$0020
C2BBE3:  BNE C2BBD4
C2BBE5:  RTL

; Random number generator
C2BBE6:  PHX            ; From C2/B1CF
C2BBE7:  LDA $72
C2BBE9:  TAX
C2BBEA:  INC $72
C2BBEC:  LDA $C0FD00,X  ; Get a random number
C2BBF0:  PLX
C2BBF1:  RTS

C2BBF2:  db $C0
C2BBF3:  db $C1
C2BBF4:  db $C2
C2BBF5:  db $C3
C2BBF6:  db $C4
C2BBF7:  db $C5
C2BBF8:  db $C1
C2BBF9:  db $C3

C2BBFA:  LDX $7AF6      ; Animation ID
C2BBFD:  REP #$20
C2BBFF:  STZ $74CE,X
C2BC02:  STZ $74D0,X
C2BC05:  SEP #$20
C2BC07:  RTL

C2BC08:  LDA $0E
C2BC0A:  AND #$07
C2BC0C:  BNE C2BC37
C2BC0E:  JSR $BBE6      ; Random number generator
C2BC11:  AND #$07
C2BC13:  TAX
C2BC14:  LDA C2BBF2,X
C2BC18:  REP #$20
C2BC1A:  ASL
C2BC1B:  ASL
C2BC1C:  ASL
C2BC1D:  ASL
C2BC1E:  TAX
C2BC1F:  TDC
C2BC20:  TAY
C2BC21:  LDA $D26000,X
C2BC25:  STA $7F60,Y
C2BC28:  STA $7F70,Y
C2BC2B:  INX
C2BC2C:  INX
C2BC2D:  INY
C2BC2E:  INY
C2BC2F:  CPY #$0010
C2BC32:  BNE C2BC21
C2BC34:  TDC
C2BC35:  SEP #$20
C2BC37:  RTL

C2BC38:  LDY #$0001
C2BC3B:  LDA $62AE
C2BC3E:  CLC
C2BC3F:  ADC [$5B],Y
C2BC41:  STA $62AE
C2BC44:  STA $12
C2BC46:  LDA #$E0
C2BC48:  STA $8996
C2BC4B:  LDX #$025C
C2BC4E:  LDY #$0004
C2BC51:  STZ $10
C2BC53:  LDA $10
C2BC55:  LSR A
C2BC56:  LSR A
C2BC57:  SEC
C2BC58:  SBC $12
C2BC5A:  BPL C2BC5D
C2BC5C:  TDC
C2BC5D:  ORA #$80
C2BC5F:  STA $8996,Y
C2BC62:  STA $8996,X
C2BC65:  DEX
C2BC66:  DEX
C2BC67:  DEX
C2BC68:  DEX
C2BC69:  INY
C2BC6A:  INY
C2BC6B:  INY
C2BC6C:  INY
C2BC6D:  INC $10
C2BC6F:  LDA $10
C2BC71:  CMP #$4C
C2BC73:  BNE C2BC53
C2BC75:  LDY $5B
C2BC77:  INY
C2BC78:  STY $5B
C2BC7A:  INC $62AD
C2BC7D:  LDX $7AF6
C2BC80:  RTL

C2BC81:  REP #$20
C2BC83:  TDC
C2BC84:  TAX
C2BC85:  STA $44F5,X
C2BC88:  STA $4475,X
C2BC8B:  STA $63B0,X
C2BC8E:  INX
C2BC8F:  INX
C2BC90:  CPX #$0080
C2BC93:  BNE C2BC85
C2BC95:  TDC
C2BC96:  SEP #$20
C2BC98:  RTL

C2BC99:  TDC
C2BC9A:  TAX
C2BC9B:  LDA $C0FD00,X
C2BC9F:  AND #$1F
C2BCA1:  STA $44F5,X
C2BCA4:  STZ $44F6,X
C2BCA7:  STZ $4475,X
C2BCAA:  STZ $4476,X
C2BCAD:  INX
C2BCAE:  INX
C2BCAF:  INX
C2BCB0:  INX
C2BCB1:  CPX #$0080
C2BCB4:  BNE C2BC9B
C2BCB6:  RTL

C2BCB7:  REP #$20
C2BCB9:  TDC
C2BCBA:  TAX
C2BCBB:  LDA $44F5,X
C2BCBE:  BEQ C2BCC5
C2BCC0:  DEC $44F5,X
C2BCC3:  BRA C2BCD6
C2BCC5:  LDA $4475,X
C2BCC8:  SEC
C2BCC9:  SBC #$0008
C2BCCC:  STA $4475,X
C2BCCF:  CLC
C2BCD0:  ADC $63B0,X
C2BCD3:  STA $63B0,X
C2BCD6:  INX
C2BCD7:  INX
C2BCD8:  INX
C2BCD9:  INX
C2BCDA:  CPX #$0080
C2BCDD:  BNE C2BCBB
C2BCDF:  TDC
C2BCE0:  SEP #$20
C2BCE2:  RTL

C2BCE3:  LDY #$0001
C2BCE6:  LDA [$5B],Y
C2BCE8:  BNE C2BCFF
C2BCEA:  TDC
C2BCEB:  TAX
C2BCEC:  REP #$20
C2BCEE:  LDA #$F708
C2BCF1:  STA $9A21,X
C2BCF4:  INX
C2BCF5:  INX
C2BCF6:  INX
C2BCF7:  INX
C2BCF8:  CPX #$025C
C2BCFB:  BNE C2BCF1
C2BCFD:  BRA C2BD3A
C2BCFF:  REP #$20
C2BD01:  ASL A
C2BD02:  ASL A
C2BD03:  STA $10
C2BD05:  TDC
C2BD06:  TAX
C2BD07:  LDY #$025C
C2BD0A:  LDA #$00FF
C2BD0D:  STA $9A21,X
C2BD10:  STA $9A21,Y
C2BD13:  INX
C2BD14:  INX
C2BD15:  INX
C2BD16:  INX
C2BD17:  DEY
C2BD18:  DEY
C2BD19:  DEY
C2BD1A:  DEY
C2BD1B:  CPX $10
C2BD1D:  BNE C2BD0D
C2BD1F:  CPX #$0130
C2BD22:  BEQ C2BD3A
C2BD24:  LDA #$F708
C2BD27:  STA $9A21,X
C2BD2A:  STA $9A21,Y
C2BD2D:  INX
C2BD2E:  INX
C2BD2F:  INX
C2BD30:  INX
C2BD31:  DEY
C2BD32:  DEY
C2BD33:  DEY
C2BD34:  DEY
C2BD35:  CPX #$0130
C2BD38:  BNE C2BD27
C2BD3A:  INC $5B
C2BD3C:  TDC
C2BD3D:  SEP #$20
C2BD3F:  INC $6197
C2BD42:  RTL

C2BD43:  LDA #$FF
C2BD45:  STA $629D
C2BD48:  STZ $2F47
C2BD4B:  STZ $6192
C2BD4E:  REP #$20
C2BD50:  TDC
C2BD51:  TAX
C2BD52:  LDA #$FFFF
C2BD55:  STA $6246,X
C2BD58:  INX
C2BD59:  INX
C2BD5A:  CPX #$0010
C2BD5D:  BNE C2BD55
C2BD5F:  TDC
C2BD60:  SEP #$20
C2BD62:  LDA $2F49
C2BD65:  BPL C2BD95
C2BD67:  LDA $2F4A
C2BD6A:  STA $22
C2BD6C:  LDA #$18
C2BD6E:  STA $24
C2BD70:  JSR $C118D5
C2BD74:  LDX $26
C2BD76:  LDA $D0FD01,X
C2BD7A:  CMP #$FF
C2BD7C:  BEQ C2BD84
C2BD7E:  STA $ECB8
C2BD81:  STZ $ECB9
C2BD84:  LDA $D0FD02,X
C2BD88:  STA $2F46
C2BD8B:  LDA $D0FD03,X
C2BD8F:  STA $629D
C2BD92:  JSR C2BE6E

C2BD95:  LDA $2F4B      ; Monster Aux. Byte 4
C2BD98:  BMI C2BDD0     ; Branch if "No music" bit is set
C2BD9A:  INC $E9ED
C2BD9D:  LDA #$10
C2BD9F:  STA $1300
C2BDA2:  LDA #$FF       ; Volume
C2BDA4:  STA $1302      ; Save volume
C2BDA7:  LDA $629D
C2BDAA:  CMP #$FF
C2BDAC:  BNE C2BDBF
C2BDAE:  LDA $2F4B      ; Monster Aux. Byte 4
C2BDB1:  AND #$38       ; Isolate song
C2BDB3:  LSR A
C2BDB4:  LSR A
C2BDB5:  LSR A          ; Get an index from 0 to 7)
C2BDB6:  TAX
C2BDB7:  LDA C2BF3B,X   ; Load song ID
C2BDBB:  CMP #$FF
C2BDBD:  BEQ C2BDCD     ; Branch if we keep the current music playing
C2BDBF:  STA $1301      ; Save song ID
C2BDC2:  LDA $11E4
C2BDC5:  AND #$08
C2BDC7:  BNE C2BDCD
C2BDC9:  JSL $C50004    ; Play song

C2BDCD:  STZ $E9ED
C2BDD0:  TDC
C2BDD1:  TAX
C2BDD2:  TAY
C2BDD3:  REP #$20
C2BDD5:  STZ $2EC7,X
C2BDD8:  LDA $6246,Y
C2BDDB:  CMP #$FFFF
C2BDDE:  BEQ C2BDE3
C2BDE0:  INC $2EC7,X
C2BDE3:  TYA
C2BDE4:  CLC
C2BDE5:  ADC #$0004
C2BDE8:  TAY
C2BDE9:  TXA
C2BDEA:  CLC
C2BDEB:  ADC #$0020
C2BDEE:  TAX
C2BDEF:  CPX #$0080
C2BDF2:  BNE C2BDD5
C2BDF4:  TDC
C2BDF5:  SEP #$20
C2BDF7:  LDA #$01
C2BDF9:  STA $10
C2BDFB:  TDC
C2BDFC:  TAX
C2BDFD:  LDA $2EC6,X
C2BE00:  CMP #$2F
C2BE02:  BNE C2BE0C
C2BE04:  LDA $6192
C2BE07:  ORA $10
C2BE09:  STA $6192
C2BE0C:  ASL $10
C2BE0E:  TXA
C2BE0F:  CLC
C2BE10:  ADC #$20
C2BE12:  TAX
C2BE13:  CMP #$80
C2BE15:  BNE C2BDFD
C2BE17:  LDA $6192
C2BE1A:  EOR #$FF
C2BE1C:  STA $6192
C2BE1F:  INC $E9ED
C2BE22:  LDA #$82
C2BE24:  STA $1300
C2BE27:  TDC
C2BE28:  STA $1301
C2BE2B:  DEC A
C2BE2C:  STA $1302
C2BE2F:  LDA $11E4
C2BE32:  AND #$08
C2BE34:  BNE C2BE3A
C2BE36:  JSR $C50004
C2BE3A:  STZ $E9ED
C2BE3D:  LDA $001D4F
C2BE41:  AND #$40
C2BE43:  STA $629C
C2BE46:  LDA $001D54
C2BE4A:  BPL C2BE65
C2BE4C:  LDA $001D4F
C2BE50:  STA $10
C2BE52:  TDC
C2BE53:  TAX
C2BE54:  LDA $10
C2BE56:  AND #$01
C2BE58:  STA $6198,X
C2BE5B:  LSR $10
C2BE5D:  INX
C2BE5E:  CPX #$0004
C2BE61:  BNE C2BE54
C2BE63:  BRA C2BE6D
C2BE65:  TDC
C2BE66:  TAX
C2BE67:  STX $6198
C2BE6A:  STX $619A
C2BE6D:  RTL

C2BE6E:  PHX
C2BE6F:  LDA $D0FD00,X
C2BE73:  BMI C2BEE9
C2BE75:  LDA #$04
C2BE77:  STA $10
C2BE79:  LDA $D0FD04,X
C2BE7D:  CMP #$FF
C2BE7F:  BEQ C2BEE7
C2BE81:  AND #$3F
C2BE83:  STA $12
C2BE85:  STZ $14
C2BE87:  TDC
C2BE88:  TAY
C2BE89:  LDA #$01
C2BE8B:  STA $18
C2BE8D:  LDA $2EC6,Y
C2BE90:  CMP $12
C2BE92:  BNE C2BED1
C2BE94:  LDA $D0FD04,X
C2BE98:  AND #$40
C2BE9A:  BEQ C2BEA1
C2BE9C:  LDA $18
C2BE9E:  STA $2F47
C2BEA1:  LDA $D0FD04,X
C2BEA5:  BPL C2BEAF
C2BEA7:  LDA $18
C2BEA9:  ORA $6192
C2BEAC:  STA $6192
C2BEAF:  LDA $14
C2BEB1:  ASL A
C2BEB2:  ASL A
C2BEB3:  TAY
C2BEB4:  LDA $D0FD07,X
C2BEB8:  CMP #$FF
C2BEBA:  BEQ C2BEDE
C2BEBC:  REP #$20
C2BEBE:  ASL A
C2BEBF:  STA $6246,Y
C2BEC2:  LDA $D0FD08,X
C2BEC6:  AND #$00FF
C2BEC9:  ASL A
C2BECA:  STA $6248,Y
C2BECD:  SEP #$20
C2BECF:  BRA C2BEDE
C2BED1:  ASL $18
C2BED3:  INC $14
C2BED5:  TYA
C2BED6:  CLC
C2BED7:  ADC #$20
C2BED9:  TAY
C2BEDA:  CMP #$80
C2BEDC:  BNE C2BE8D
C2BEDE:  INX
C2BEDF:  INX
C2BEE0:  INX
C2BEE1:  INX
C2BEE2:  INX
C2BEE3:  DEC $10
C2BEE5:  BNE C2BE79
C2BEE7:  PLX
C2BEE8:  RTS

C2BEE9:  TDC
C2BEEA:  TAY
C2BEEB:  LDA #$01
C2BEED:  STA $10
C2BEEF:  LDA $D0FD04,X
C2BEF3:  CMP #$FF
C2BEF5:  BEQ C2BF0E
C2BEF7:  AND #$40
C2BEF9:  BEQ C2BF00
C2BEFB:  LDA $10
C2BEFD:  STA $2F47
C2BF00:  LDA $D0FD04,X
C2BF04:  BPL C2BF0E
C2BF06:  LDA $10
C2BF08:  ORA $6192
C2BF0B:  STA $6192
C2BF0E:  LDA $D0FD07,X
C2BF12:  CMP #$FF
C2BF14:  BEQ C2BF29
C2BF16:  REP #$20
C2BF18:  ASL A
C2BF19:  STA $6246,Y
C2BF1C:  LDA $D0FD08,X
C2BF20:  AND #$00FF
C2BF23:  ASL A
C2BF24:  STA $6248,Y
C2BF27:  SEP #$20
C2BF29:  ASL $10
C2BF2B:  INY
C2BF2C:  INY
C2BF2D:  INY
C2BF2E:  INY
C2BF2F:  INX
C2BF30:  INX
C2BF31:  INX
C2BF32:  INX
C2BF33:  INX
C2BF34:  CPY #$0010
C2BF37:  BNE C2BEEF     ; Does this answer your question, Wendy's lady?!
                                       ; Iterate 4 times
C2BF39:  PLX
C2BF3A:  RTS

; Song index table
C2BF3B:  db $24      ; Battle Theme
C2BF3C:  db $14      ; Boss Theme
C2BF3D:  db $33      ; Atma Weapon
C2BF3E:  db $2E      ; Returner
C2BF3F:  db $1A      ; Factory
C2BF40:  db $3B      ; Final
C2BF41:  db $FF      ; current 1
C2BF42:  db $FF      ; current 2

; Data - indexed by C1/1105, pointer between 0 and 7
C2BF43:  db $00
C2BF44:  db $C2
C2BF45:  db $40
C2BF46:  db $C2
C2BF47:  db $80
C2BF48:  db $C2
C2BF49:  db $C0
C2BF4A:  db $C2

; 16-bit data.
C2BF4B:  dw $C300
C2BF4D:  dw $C340
C2BF4F:  dw $C380
C2BF51:  dw $C3C0

C2BF53:  LDA $E9DB
C2BF56:  AND #$03
C2BF58:  BNE C2BF8A     ; +48
C2BF5A:  LDA $E9DB
C2BF5D:  LSR
C2BF5E:  LSR
C2BF5F:  AND #$03
C2BF61:  TAX
C2BF62:  LDA $202A,X
C2BF65:  BEQ C2BF6C     ; +5
C2BF67:  JSR C2BF8E
C2BF6A:  BRA C2BF8A
C2BF6C:  TXA
C2BF6D:  ASL
C2BF6E:  TAX
C2BF6F:  REP #$20       ; 16-bit A
C2BF71:  LDA C2BF43,X
C2BF75:  TAX
C2BF76:  TDC
C2BF77:  LDY #$0020     ; 32
C2BF7A:  STA $7F0000,X
C2BF7E:  STA $7F0100,X
C2BF82:  INX
C2BF83:  INX
C2BF84:  DEY
C2BF85:  BNE C2BF7A     ; -13
C2BF87:  TDC
C2BF88:  SEP #$20       ; 8-bit A
C2BF8A:  INC $E9DB
C2BF8D:  RTL

C2BF8E:  LDY #$0000     ; 0
C2BF91:  LDA $202A,X
C2BF94:  DEC
C2BF95:  SEC
C2BF96:  SBC #$0A       ; 10
C2BF98:  BCC C2BF9D     ; +3
C2BF9A:  INY
C2BF9B:  BRA C2BF95     ; -8
C2BF9D:  CLC
C2BF9E:  ADC #$0A       ; 10
C2BFA0:  STA $10
C2BFA2:  STY $12
C2BFA4:  PHB
C2BFA5:  LDA #$7F
C2BFA7:  PHA
C2BFA8:  PLB
C2BFA9:  TXA
C2BFAA:  ASL
C2BFAB:  TAX
C2BFAC:  REP #$20       ; 16-bit A
C2BFAE:  PHX
C2BFAF:  LDA C2BF43,X
C2BFB3:  TAX
C2BFB4:  LDA $12
C2BFB6:  JSR C2BFDF
C2BFB9:  LDA $10
C2BFBB:  JSR C2BFDF
C2BFBE:  PLX
C2BFBF:  LDA C2BF4B,X
C2BFC3:  TAX
C2BFC4:  LDA $10
C2BFC6:  JSR C2BFD3
C2BFC9:  LDA $12
C2BFCB:  JSR C2BFD3
C2BFCE:  TDC
C2BFCF:  SEP #$20       ; 8-bit A
C2BFD1:  PLB
C2BFD2:  RTS

C2BFD3:  PHX
C2BFD4:  AND #$00FF
C2BFD7:  ASL
C2BFD8:  TAX
C2BFD9:  LDA C2C013,X
C2BFDD:  BRA C2BFE9     ; +10

C2BFDF:  PHX
C2BFE0:  AND #$00FF
C2BFE3:  ASL
C2BFE4:  TAX
C2BFE5:  LDA C2BFFF,X
C2BFE9:  TAY
C2BFEA:  PLX
C2BFEB:  LDA #$0010     ; 16
C2BFEE:  STA $14
C2BFF0:  LDA $0000,Y
C2BFF3:  STA $0000,X
C2BFF6:  INX
C2BFF7:  INX
C2BFF8:  INY
C2BFF9:  INY
C2BFFA:  DEC $14
C2BFFC:  BNE C2BFF0     ; -14
C2BFFE:  RTS

; 16-bit data.
C2BFFF:  dw $BE00
C2C001:  dw $BE20
C2C003:  dw $BE40
C2C005:  dw $BE60
C2C007:  dw $BE80
C2C009:  dw $BEA0
C2C00B:  dw $BEC0
C2C00D:  dw $BEE0
C2C00F:  dw $BF00
C2C011:  dw $BF20

C2C013:  dw $C000
C2C015:  dw $C020
C2C017:  dw $C040
C2C019:  dw $C060
C2C01B:  dw $C080
C2C01D:  dw $C0A0
C2C01F:  dw $C0C0
C2C021:  dw $C0E0
C2C023:  dw $C100
C2C025:  dw $C120

C2C027:  STA $12
C2C029:  STX $10
C2C02B:  PHB
C2C02C:  LDA #$7F
C2C02E:  PHA
C2C02F:  PLB
C2C030:  TDC            ; A = 0
C2C031:  TAX            ; X = 0
C2C032:  LDA #$08       ; 8
C2C034:  STA $18
C2C036:  REP #$20       ; 16-bit A
C2C038:  LDY #$0010     ; 16
C2C03B:  LDA [$10]
C2C03D:  STA $1C
C2C03F:  LDA [$10],Y
C2C041:  STA $1A
C2C043:  TDC
C2C044:  SEP #$20       ; 8-bit A
C2C046:  LDY #$0008     ; 8
C2C049:  TDC
C2C04A:  ASL $1B
C2C04C:  ROL
C2C04D:  ASL $1A
C2C04F:  ROL
C2C050:  ASL $1D
C2C052:  ROL
C2C053:  ASL $1C
C2C055:  ROL
C2C056:  AND #$1F
C2C058:  BEQ C2C05C     ; +2
C2C05A:  ORA #$30
C2C05C:  STA $C401,X
C2C05F:  INX
C2C060:  INX
C2C061:  DEY
C2C062:  BNE C2C049     ; -27
C2C064:  LDY $10
C2C066:  INY
C2C067:  INY
C2C068:  STY $10
C2C06A:  DEC $18
C2C06C:  BNE C2C036     ; -56
C2C06E:  REP #$20       ; 16-bit A
C2C070:  LDA $10
C2C072:  CLC
C2C073:  ADC #$0010     ; 16
C2C076:  STA $10
C2C078:  TDC
C2C079:  SEP #$20       ; 8-bit A
C2C07B:  DEC $14
C2C07D:  BNE C2C032     ; -77
C2C07F:  PLB
C2C080:  RTL

; Spell animation command C7.
C2C081:  LDA [$5B]
C2C083:  ASL
C2C084:  TAX
C2C085:  JSR (C2C08C,X) ; Call a subroutine
C2C088:  LDX $7AF6
C2C08B:  RTL

; Pointers called by C2/C085, indexed by [$5B].
C2C08C:  dw C2C39B	; 00:
C2C08E:  dw C2C362	; 01:
C2C090:  dw C2C31E	; 02:
C2C092:  dw C2C339	; 03:
C2C094:  dw C2C303	; 04:
C2C096:  dw C2C2B7	; 05:
C2C098:  dw C2C26A	; 06:
C2C09A:  dw C2C247	; 07:
C2C09C:  dw C2C1D6	; 08:
C2C09E:  dw C2C1B3	; 09:
C2C0A0:  dw C2C194	; 0A:
C2C0A2:  dw C2C171	; 0B:
C2C0A4:  dw C2C136	; 0C:
C2C0A6:  dw C2C115	; 0D:
C2C0A8:  dw C2C0F8	; 0E:
C2C0AA:  dw C2C0F2	; 0F:
C2C0AC:  dw C2C0B9	; 10:
C2C0AE:  dw C2C0B0	; 11:

; Animation command C7 11.
C2C0B0:  LDA $2F4B
C2C0B3:  ORA #$01       ; Ensures monster formation is not added to Veldt list
C2C0B5:  STA $2F4B      ; TSB would've worked...
C2C0B8:  RTS

; Animation command C7 10.
C2C0B9:  LDY #$0001     ; 1
C2C0BC:  LDA [$5B],Y
C2C0BE:  JSR C2C0D2
C2C0C1:  TAX
C2C0C2:  LDA C11A01,X
C2C0C6:  ORA $6192
C2C0C9:  STA $6192      ; TSB would've worked...
C2C0CC:  LDY $5B
C2C0CE:  INY
C2C0CF:  STY $5B
C2C0D1:  RTS

C2C0D2:  STA $10
C2C0D4:  TDC            ; A = 0
C2C0D5:  TAX            ; X = 0
C2C0D6:  STZ $12
C2C0D8:  LDA $10
C2C0DA:  CMP $2EC6,X
C2C0DD:  BEQ C2C0ED     ; +14
C2C0DF:  INC $12
C2C0E1:  TXA
C2C0E2:  CLC
C2C0E3:  ADC #$20       ; 32
C2C0E5:  TAX
C2C0E6:  CPX #$0080     ; 128
C2C0E9:  BNE C2C0D8     ; -19
C2C0EB:  TDC
C2C0EC:  RTS

C2C0ED:  LDA $12
C2C0EF:  AND #$03
C2C0F1:  RTS

; Animation command C7 0F.
C2C0F2:  LDA #$01       ; 1
C2C0F4:  TRB $2F52
C2C0F7:  RTS

; Animation command C7 0E.
C2C0F8:  LDY #$0001     ; 1
C2C0FB:  LDA [$5B],Y
C2C0FD:  BEQ C2C104     ; +5
C2C0FF:  STA $6285      ; Makes screen shaky
C2C102:  BRA C2C10F     ; +11
C2C104:  STZ $6285      ; Makes screen not shaky
C2C107:  TDC            ; A = 0
C2C108:  TAX            ; X = 0
C2C109:  STX $64B0      ; Background X-shift
C2C10C:  STX $64B2      ; Background Y-shift
C2C10F:  LDY $5B
C2C111:  INY
C2C112:  STY $5B
C2C114:  RTS

; Animation command C7 0D.
C2C115:  LDY #$0001     ; 1
C2C118:  LDA [$5B],Y
C2C11A:  ASL
C2C11B:  ASL
C2C11C:  ASL
C2C11D:  ASL
C2C11E:  ASL
C2C11F:  TAX
C2C120:  TDC            ; A = 0
C2C121:  TAY            ; Y = 0
C2C122:  LDA C2D499,X
C2C126:  STA $7F00,Y
C2C129:  INX
C2C12A:  INY
C2C12B:  CPY #$0020     ; 32
C2C12E:  BNE C2C122     ; -14
C2C130:  LDY $5B
C2C132:  INY
C2C133:  STY $5B
C2C135:  RTS

; Animation command C7 0C.
C2C136:  LDY #$0001     ; 1
C2C139:  LDA [$5B],Y
C2C13B:  STA $12
C2C13D:  TDC            ; A = 0
C2C13E:  TAX            ; X = 0
C2C13F:  STZ $10
C2C141:  LDA $2EC6,X
C2C144:  CMP $12
C2C146:  BEQ C2C156     ; +14
C2C148:  INC $10
C2C14A:  TXA
C2C14B:  CLC
C2C14C:  ADC #$20       ; 32
C2C14E:  TAX
C2C14F:  CPX #$0080     ; 128
C2C152:  BNE C2C141     ; -19
C2C154:  BRA C2C16A     ; +20

C2C156:  INY
C2C157:  LDA [$5B],Y
C2C159:  STA $2EAE,X
C2C15C:  LDA $10
C2C15E:  STA $7B78
C2C161:  LDX $7AF6
C2C164:  PHX
C2C165:  JSL C12F75
C2C169:  PLX
C2C16A:  LDY $5B
C2C16C:  INY
C2C16D:  INY
C2C16E:  STY $5B
C2C170:  RTS

; Animation command C7 0B.
C2C171:  LDY #$0001     ; 1
C2C174:  INC $E9ED      ; Sound is not muted
C2C177:  TDC            ; A = 0
C2C178:  TAX            ; X = 0
C2C179:  LDA [$5B],Y
C2C17B:  STA $1300,X
C2C17E:  INY
C2C17F:  INX
C2C180:  CPX #$0003     ; 3
C2C183:  BNE C2C179     ; -12
C2C185:  JSL $C50004    ; Plays a song
C2C189:  STZ $E9ED
C2C18C:  LDY $5B
C2C18E:  INY
C2C18F:  INY
C2C190:  INY
C2C191:  STY $5B
C2C193:  RTS

; Animation command C7 0A.
C2C194:  LDY #$0001     ; 1
C2C197:  LDA [$5B],Y
C2C199:  JSL C1BAC6
C2C19D:  LDY $5B
C2C19F:  INY
C2C1A0:  STY $5B
C2C1A2:  RTS

; Data.
C2C1A3:  db $19
C2C1A4:  db $18
C2C1A5:  db $18
C2C1A6:  db $1A
C2C1A7:  db $1A
C2C1A8:  db $1B
C2C1A9:  db $1B
C2C1AA:  db $19
C2C1AB:  db $1A
C2C1AC:  db $18
C2C1AD:  db $18
C2C1AE:  db $19
C2C1AF:  db $19
C2C1B0:  db $1B
C2C1B1:  db $1B
C2C1B2:  db $1A

; Animation command C7 09.
C2C1B3:  JSL C1F999
C2C1B7:  PHA
C2C1B8:  JSR C2C2A7
C2C1BB:  LDA $6F87,X
C2C1BE:  BEQ C2C1C2     ; +2
C2C1C0:  LDA #$08       ; 8
C2C1C2:  STA $10
C2C1C4:  PLA
C2C1C5:  LSR
C2C1C6:  LSR
C2C1C7:  LSR
C2C1C8:  LSR
C2C1C9:  LSR
C2C1CA:  CLC
C2C1CB:  ADC $10
C2C1CD:  TAX
C2C1CE:  LDA C2C1A3,X
C2C1D2:  STA $61C0,Y
C2C1D5:  RTS

; Animation command C7 08.
C2C1D6:  STZ $11
C2C1D8:  STZ $13
C2C1DA:  LDY #$0001     ; 1
C2C1DD:  LDA [$5B],Y
C2C1DF:  BPL C2C1E3     ; +2
C2C1E1:  DEC $11
C2C1E3:  STA $10
C2C1E5:  INY
C2C1E6:  LDA [$5B],Y
C2C1E8:  BPL C2C1EC     ; +2
C2C1EA:  DEC $13
C2C1EC:  STA $12
C2C1EE:  REP #$20       ; 16-bit A
C2C1F0:  LDX $7AF6
C2C1F3:  LDA $6F87,X
C2C1F6:  AND #$00FF
C2C1F9:  BNE C2C215     ; +26
C2C1FB:  LDA $6F7E,X
C2C1FE:  LDA $6F82,X    ; ????
C2C201:  CLC
C2C202:  ADC $10
C2C204:  STA $6F82,X
C2C207:  LDA $6F80,X
C2C20A:  LDA $6F84,X    ; ????
C2C20D:  CLC
C2C20E:  ADC $12
C2C210:  STA $6F84,X
C2C213:  BRA C2C22F     ; +26

C2C215:  LDA $10
C2C217:  EOR #$FFFF
C2C21A:  INC
C2C21B:  STA $10
C2C21D:  LDA $6F82,X
C2C220:  CLC
C2C221:  ADC $10        ; Could've used ADC $6F82,X instead...
C2C223:  STA $6F82,X
C2C226:  LDA $6F84,X
C2C229:  CLC
C2C22A:  ADC $12
C2C22C:  STA $6F84,X
C2C22F:  INC $5B
C2C231:  INC $5B
C2C233:  TDC
C2C234:  SEP #$20       ; 8-bit A
C2C236:  RTS

C2C237:  db $03
C2C238:  db $02
C2C239:  db $02
C2C23A:  db $04
C2C23B:  db $04
C2C23C:  db $05
C2C23D:  db $05
C2C23E:  db $03
C2C23F:  db $04
C2C240:  db $02
C2C241:  db $02
C2C242:  db $03
C2C243:  db $03
C2C244:  db $05
C2C245:  db $05
C2C246:  db $04

; Animation command C7 07.
C2C247:  JSL C1F999
C2C24B:  PHA
C2C24C:  JSR C2C2A7
C2C24F:  LDA $6F87,X
C2C252:  BEQ C2C256     ; +2
C2C254:  LDA #$08       ; 8
C2C256:  STA $10
C2C258:  PLA
C2C259:  LSR
C2C25A:  LSR
C2C25B:  LSR
C2C25C:  LSR
C2C25D:  LSR
C2C25E:  CLC
C2C25F:  ADC $10
C2C261:  TAX
C2C262:  LDA C2C237,X
C2C266:  STA $61C0,Y
C2C269:  RTS

; Animation command C7 06.
C2C26A:  LDY #$0001     ; 1
C2C26D:  LDA [$5B],Y
C2C26F:  STA $10
C2C271:  INY
C2C272:  LDA [$5B],Y
C2C274:  STA $12
C2C276:  STZ $11
C2C278:  STZ $13
C2C27A:  JSR C2C2A7
C2C27D:  REP #$20       ; 16-bit A
C2C27F:  LDA $10
C2C281:  STA $61B7,Y    ; X-coordinate
C2C284:  TDC
C2C285:  STA $61C5,Y    ; X-coordinate offset
C2C288:  STA $61D4,Y    ; Something else to do with X-coordinate
C2C28B:  LDA $12
C2C28D:  STA $61B9,Y    ; Y-coordinate
C2C290:  TDC
C2C291:  STA $61C7,Y    ; Y-coordinate offset
C2C294:  STA $61D2,Y    ; Y-coordinate on battle map
C2C297:  INC $5B
C2C299:  INC $5B
C2C29B:  TDC
C2C29C:  SEP #$20       ; 8-bit A
C2C29E:  RTS

C2C29F:  LDX $7AF6
C2C2A2:  LDA $6A39,X    ; Target's index
C2C2A5:  BRA C2C2AD     ; +6

C2C2A7:  LDX $7AF6      ; Animation ID
C2C2AA:  LDA $6A38,X    ; Caster's index
C2C2AD:  ASL
C2C2AE:  ASL
C2C2AF:  ASL
C2C2B0:  ASL
C2C2B1:  ASL
C2C2B2:  TAY
C2C2B3:  STY $7AF8
C2C2B6:  RTS

; Animation command C7 05.
C2C2B7:  LDY #$0001     ; 1
C2C2BA:  LDA [$5B],Y
C2C2BC:  STA $10
C2C2BE:  TDC            ; A = 0
C2C2BF:  TAY            ; Y = 0
C2C2C0:  TAX            ; X = 0
C2C2C1:  LDA $2EC6,Y
C2C2C4:  CMP $10
C2C2C6:  BEQ C2C2D5     ; +13
C2C2C8:  INX
C2C2C9:  TYA
C2C2CA:  CLC
C2C2CB:  ADC #$20       ; 32
C2C2CD:  TAY
C2C2CE:  CPX #$0004     ; 4
C2C2D1:  BNE C2C2C1     ; -18
C2C2D3:  TDC            ; A = 0
C2C2D4:  TAX            ; X = 0
C2C2D5:  TXA
C2C2D6:  ASL
C2C2D7:  ASL
C2C2D8:  ASL
C2C2D9:  ASL
C2C2DA:  ASL
C2C2DB:  TAY
C2C2DC:  LDX $7AF6
C2C2DF:  REP #$20       ; 16-bit A
C2C2E1:  LDA $61B7,Y
C2C2E4:  CLC
C2C2E5:  ADC $61C5,Y
C2C2E8:  CLC
C2C2E9:  ADC $61D4,Y
C2C2EC:  STA $6F82,X
C2C2EF:  LDA $61B9,Y
C2C2F2:  CLC
C2C2F3:  ADC $61C7,Y
C2C2F6:  CLC
C2C2F7:  ADC $61D2,Y
C2C2FA:  STA $6F84,X
C2C2FD:  INC $5B
C2C2FF:  TDC
C2C300:  SEP #$20       ; 8-bit A
C2C302:  RTS

; Animation command C7 04.
C2C303:  LDX $7AF6      ; Animation ID
C2C306:  LDA $6A38,X    ; Caster's index
C2C309:  ASL
C2C30A:  ASL
C2C30B:  TAY
C2C30C:  REP #$20       ; 16-bit A
C2C30E:  LDA $6236,Y
C2C311:  STA $6F82,X
C2C314:  LDA $6238,Y
C2C317:  STA $6F84,X
C2C31A:  TDC
C2C31B:  SEP #$20       ; 8-bit A
C2C31D:  RTS

; Animation command C7 02.
C2C31E:  JSR C2C2A7
C2C321:  LDA $6A38,X    ; Caster's index
C2C324:  ASL
C2C325:  ASL
C2C326:  TAX
C2C327:  REP #$20       ; 16-bit A
C2C329:  LDA $61B7,Y
C2C32C:  STA $6236,X
C2C32F:  LDA $61B9,Y
C2C332:  STA $6238,X
C2C335:  TDC
C2C336:  SEP #$20       ; 8-bit A
C2C338:  RTS

; Animation command C7 03.
C2C339:  JSR C2C2A7
C2C33C:  LDA $6A38,X    ; Caster's index
C2C33F:  ASL
C2C340:  ASL
C2C341:  TAX
C2C342:  REP #$20       ; 16-bit A
C2C344:  LDA $6236,X
C2C347:  STA $61B7,Y
C2C34A:  TDC
C2C34B:  STA $61C5,Y
C2C34E:  STA $61D4,Y
C2C351:  LDA $6238,X
C2C354:  STA $61B9,Y
C2C357:  TDC
C2C358:  STA $61C7,Y
C2C35B:  STA $61D2,Y
C2C35E:  TDC            ; A = 0 already...
C2C35F:  SEP #$20       ; 8-bit A
C2C361:  RTS

; Animation command C7 01.
C2C362:  JSR C2C2A7
C2C365:  REP #$20       ; 16-bit A
C2C367:  LDA $61B7,Y
C2C36A:  CLC
C2C36B:  ADC $61C5,Y
C2C36E:  CLC
C2C36F:  ADC $61D4,Y
C2C372:  STA $61B7,Y
C2C375:  STA $6F7E,X
C2C378:  TDC
C2C379:  STA $61C5,Y
C2C37C:  STA $61D4,Y
C2C37F:  LDA $61B9,Y
C2C382:  CLC
C2C383:  ADC $61C7,Y
C2C386:  CLC
C2C387:  ADC $61D2,Y
C2C38A:  STA $61B9,Y
C2C38D:  STA $6F80,X
C2C390:  TDC
C2C391:  STA $61C7,Y
C2C394:  STA $61D2,Y
C2C397:  TDC            ; A = 0 already...
C2C398:  SEP #$20       ; 8-bit A
C2C39A:  RTS

; Animation command C7 00.
C2C39B:  LDX $7AF6      ; Animation ID
C2C39E:  LDY $5B
C2C3A0:  INY
C2C3A1:  STY $5B
C2C3A3:  LDA $6A38,X    ; Caster's index
C2C3A6:  TAY
C2C3A7:  LDA [$5B]
C2C3A9:  BEQ C2C3BF     ; +20
C2C3AB:  LDA $7B10,Y    ; Facing direction
C2C3AE:  BNE C2C3D1     ; +33
C2C3B0:  INC
C2C3B1:  STA $7B10,Y
C2C3B4:  STA $6F87,X
C2C3B7:  LDA $6A38,X
C2C3BA:  JSR C2C3D5
C2C3BD:  BRA C2C3D1     ; +18

C2C3BF:  LDA $7B10,Y
C2C3C2:  BEQ C2C3D1     ; +13
C2C3C4:  TDC
C2C3C5:  STA $7B10,Y
C2C3C8:  STA $6F87,X
C2C3CB:  LDA $6A38,X
C2C3CE:  JSR C2C3D5
C2C3D1:  LDX $7AF6      ; Animation ID
C2C3D4:  RTS

C2C3D5:  ASL
C2C3D6:  ASL
C2C3D7:  ASL
C2C3D8:  ASL
C2C3D9:  ASL
C2C3DA:  TAX
C2C3DB:  LDA $61BE,X
C2C3DE:  EOR #$40
C2C3E0:  STA $61BE,X
C2C3E3:  RTS

; 16-bit data called from C1/26D8.
C2C3E4:  dw $CE3F
C2C3E6:  dw $CE93
C2C3E8:  dw $CEE7
C2C3EA:  dw $CF3B
C2C3EC:  dw $CF8F
C2C3EE:  dw $CFE3
C2C3F0:  dw $D037
C2C3F2:  dw $D08B
C2C3F4:  dw $D0DF
C2C3F6:  dw $D133
C2C3F8:  dw $D187
C2C3FA:  dw $D1DB
C2C3FC:  dw $D22F
C2C3FE:  dw $D283
C2C400:  dw $D2D7
C2C402:  dw $D32B
C2C404:  dw $D37F
C2C406:  dw $D3D3
C2C408:  dw $D427
C2C40A:  dw $D47B
C2C40C:  dw $D4CF
C2C40E:  dw $D523
C2C410:  dw $D577
C2C412:  dw $D5CB
C2C414:  dw $D61F
C2C416:  dw $D673
C2C418:  dw $D6C7
C2C41A:  dw $D71B
C2C41C:  dw $D76F
C2C41E:  dw $D7C3
C2C420:  dw $D817
C2C422:  dw $D86B

C2C424:  dw $D8BF
C2C426:  dw $D913
C2C428:  dw $D967
C2C42A:  dw $D9BB
C2C42C:  dw $DA0F
C2C42E:  dw $DA63
C2C430:  dw $DAB7
C2C432:  dw $DB0B
C2C434:  dw $DB5F
C2C436:  dw $DBB3
C2C438:  dw $DC07
C2C43A:  dw $DC5B
C2C43C:  dw $DCAF
C2C43E:  dw $DD03
C2C440:  dw $DD57
C2C442:  dw $DDAB
C2C444:  dw $DDFF
C2C446:  dw $DE53
C2C448:  dw $DEA7
C2C44A:  dw $DEFB
C2C44C:  dw $DF4F
C2C44E:  dw $DFA3
C2C450:  dw $DFF7
C2C452:  dw $E04B
C2C454:  dw $E09F
C2C456:  dw $E0F3
C2C458:  dw $E147
C2C45A:  dw $E19B
C2C45C:  dw $E1EF
C2C45E:  dw $E243
C2C460:  dw $E297
C2C462:  dw $E2EB

; 32-bit data called from C1/3962 and C1/3968.
C2C464:  dd $C4740000
C2C468:  dd $C4804000
C2C46C:  dd $C48C8000
C2C470:  dd $C498C000

; 16-bit data called from C1/1F04 and C1/3F97.
C2C474:  dw $8259
C2C476:  dw $829D
C2C478:  dw $82E1
C2C47A:  dw $8325
C2C47C:  dw $8369
C2C47E:  dw $83AD
C2C480:  dw $83F1
C2C482:  dw $8435
C2C484:  dw $8479
C2C486:  dw $84BD
C2C488:  dw $8501
C2C48A:  dw $8545
C2C48C:  dw $8589
C2C48E:  dw $85CD
C2C490:  dw $8611
C2C492:  dw $8655
C2C494:  dw $8699
C2C496:  dw $86DD
C2C498:  dw $8721
C2C49A:  dw $8765
C2C49C:  dw $87A9
C2C49E:  dw $87ED
C2C4A0:  dw $8831
C2C4A2:  dw $8875

; Note: the game just loads the first pointer for each mold, then
; Consecutively reads all 6 entries' data.

; Pointers for monster formation Mold 0
C2C4A4:  dw C2C543
C2C4A6:  dw C2C54A
C2C4A8:  dw C2C551
C2C4AA:  dw C2C558
C2C4AC:  dw C2C540
C2C4AE:  dw C2C540

; Pointers for monster formation Mold 1
C2C4B0:  dw C2C55F
C2C4B2:  dw C2C566
C2C4B4:  dw C2C56D
C2C4B6:  dw C2C571
C2C4B8:  dw C2C575
C2C4BA:  dw C2C579

; Pointers for monster formation Mold 2
C2C4BC:  dw C2C57D
C2C4BE:  dw C2C586
C2C4C0:  dw C2C540
C2C4C2:  dw C2C540
C2C4C4:  dw C2C540
C2C4C6:  dw C2C540

; Pointers for monster formation Mold 3
C2C4C8:  dw C2C58F
C2C4CA:  dw C2C59A
C2C4CC:  dw C2C540
C2C4CE:  dw C2C540
C2C4D0:  dw C2C540
C2C4D2:  dw C2C540

; Pointers for monster formation Mold 4
C2C4D4:  dw C2C5A5
C2C4D6:  dw C2C5AE
C2C4D8:  dw C2C5B5
C2C4DA:  dw C2C540
C2C4DC:  dw C2C540
C2C4DE:  dw C2C540

; Pointers for monster formation Mold 5
C2C4E0:  dw C2C5BC
C2C4E2:  dw C2C5C7
C2C4E4:  dw C2C5CE
C2C4E6:  dw C2C540
C2C4E8:  dw C2C540
C2C4EA:  dw C2C540

; Pointers for monster formation Mold 6
C2C4EC:  dw C2C5D5
C2C4EE:  dw C2C540
C2C4F0:  dw C2C540
C2C4F2:  dw C2C540
C2C4F4:  dw C2C540
C2C4F6:  dw C2C540

; Pointers for monster formation Mold 7
C2C4F8:  dw C2C5E8
C2C4FA:  dw C2C5F4
C2C4FC:  dw C2C5FA
C2C4FE:  dw C2C5FE
C2C500:  dw C2C602
C2C502:  dw C2C606

; Pointers for monster formation Mold 8
C2C504:  dw C2C60A
C2C506:  dw C2C611
C2C508:  dw C2C618
C2C50A:  dw C2C61D
C2C50C:  dw C2C540
C2C50E:  dw C2C540

; Pointers for monster formation Mold 9
C2C510:  dw C2C622
C2C512:  dw C2C540
C2C514:  dw C2C540
C2C516:  dw C2C540
C2C518:  dw C2C540
C2C51A:  dw C2C540

; Pointers for monster formation Mold 10
C2C51C:  dw C2C631
C2C51E:  dw C2C63A
C2C520:  dw C2C63F
C2C522:  dw C2C644
C2C524:  dw C2C648
C2C526:  dw C2C540

; Pointers for monster formation Mold 11
C2C528:  dw C2C64C
C2C52A:  dw C2C651
C2C52C:  dw C2C656
C2C52E:  dw C2C65B
C2C530:  dw C2C660
C2C532:  dw C2C540

; Pointers for monster formation Mold 12
C2C534:  dw C2C667
C2C536:  dw C2C66E
C2C538:  dw C2C675
C2C53A:  dw C2C67A
C2C53C:  dw C2C67F
C2C53E:  dw C2C684

; Mold data.  For context, picture a 4x4 grid of 32x32-pixel monster
; Subsprites with 16 possible positions on it:
;
; 00 01 02 03
; 04 05 06 07
; 08 09 0A 0B
; 0C 0D 0E 0F
;
; The data breakdown is:
; 1st byte: horizontal grid position of start of image * 32 ?
; 2nd byte: vertical grid position of start of image * 32 ?
; Variable # of bytes: list of the 0-15 grid positions for the
;                      32x32 subsprites that compose the monster image
; FF: terminates record data for current monster image )

; Null entry - used for mold slots which are undefined [nonexistent
; In the C2/D034 structure, and not meant to hold a monster]
C2C540:  db $00
C2C541:  db $00
C2C542:  db $FF

; Mold 0 - Mold slot 0
C2C543:  db $00
C2C544:  db $00
C2C545:  db $00
C2C546:  db $01
C2C547:  db $04
C2C548:  db $05
C2C549:  db $FF

; Mold 0 - Mold slot 1
C2C54A:  db $40
C2C54B:  db $00
C2C54C:  db $02
C2C54D:  db $03
C2C54E:  db $06
C2C54F:  db $07
C2C550:  db $FF

; Mold 0 - Mold slot 2
C2C551:  db $00
C2C552:  db $40
C2C553:  db $08
C2C554:  db $09
C2C555:  db $0C
C2C556:  db $0D
C2C557:  db $FF

; Mold 0 - Mold slot 3
C2C558:  db $40
C2C559:  db $40
C2C55A:  db $0A
C2C55B:  db $0B
C2C55C:  db $0E
C2C55D:  db $0F
C2C55E:  db $FF

; Mold 1 - Mold slot 0
C2C55F:  db $00
C2C560:  db $00
C2C561:  db $00
C2C562:  db $01
C2C563:  db $04
C2C564:  db $05
C2C565:  db $FF

; Mold 1 - Mold slot 1
C2C566:  db $40
C2C567:  db $00
C2C568:  db $02
C2C569:  db $03
C2C56A:  db $06
C2C56B:  db $07
C2C56C:  db $FF

; Mold 1 - Mold slot 2
C2C56D:  db $00
C2C56E:  db $40
C2C56F:  db $08
C2C570:  db $FF

; Mold 1 - Mold slot 3
C2C571:  db $20
C2C572:  db $40
C2C573:  db $09
C2C574:  db $FF

; Mold 1 - Mold slot 4
C2C575:  db $40
C2C576:  db $40
C2C577:  db $0A
C2C578:  db $FF

; Mold 1 - Mold slot 5
C2C579:  db $60
C2C57A:  db $40
C2C57B:  db $0B
C2C57C:  db $FF

; Mold 2 - Mold slot 0
C2C57D:  db $00
C2C57E:  db $00
C2C57F:  db $00
C2C580:  db $01
C2C581:  db $02
C2C582:  db $04
C2C583:  db $05
C2C584:  db $06
C2C585:  db $FF

; Mold 2 - Mold slot 1
C2C586:  db $00
C2C587:  db $40
C2C588:  db $08
C2C589:  db $09
C2C58A:  db $0A
C2C58B:  db $0C
C2C58C:  db $0D
C2C58D:  db $0E
C2C58E:  db $FF

; Mold 3 - Mold slot 0
C2C58F:  db $00
C2C590:  db $00
C2C591:  db $00
C2C592:  db $01
C2C593:  db $04
C2C594:  db $05
C2C595:  db $08
C2C596:  db $09
C2C597:  db $0C
C2C598:  db $0D
C2C599:  db $FF

; Mold 3 - Mold slot 1
C2C59A:  db $40
C2C59B:  db $00
C2C59C:  db $02
C2C59D:  db $03
C2C59E:  db $06
C2C59F:  db $07
C2C5A0:  db $0A
C2C5A1:  db $0B
C2C5A2:  db $0E
C2C5A3:  db $0F
C2C5A4:  db $FF

; Mold 4 - Mold slot 0
C2C5A5:  db $00
C2C5A6:  db $00
C2C5A7:  db $00
C2C5A8:  db $01
C2C5A9:  db $02
C2C5AA:  db $04
C2C5AB:  db $05
C2C5AC:  db $06
C2C5AD:  db $FF

; Mold 4 - Mold slot 1
C2C5AE:  db $00
C2C5AF:  db $40
C2C5B0:  db $08
C2C5B1:  db $09
C2C5B2:  db $0C
C2C5B3:  db $0D
C2C5B4:  db $FF

; Mold 4 - Mold slot 2
C2C5B5:  db $40
C2C5B6:  db $40
C2C5B7:  db $0A
C2C5B8:  db $0B
C2C5B9:  db $0E
C2C5BA:  db $0F
C2C5BB:  db $FF

; Mold 5 - Mold slot 0
C2C5BC:  db $00
C2C5BD:  db $00
C2C5BE:  db $00
C2C5BF:  db $01
C2C5C0:  db $04
C2C5C1:  db $05
C2C5C2:  db $08
C2C5C3:  db $09
C2C5C4:  db $0C
C2C5C5:  db $0D
C2C5C6:  db $FF

; Mold 5 - Mold slot 1
C2C5C7:  db $40
C2C5C8:  db $00
C2C5C9:  db $02
C2C5CA:  db $03
C2C5CB:  db $06
C2C5CC:  db $07
C2C5CD:  db $FF

; Mold 5 - Mold slot 2
C2C5CE:  db $40
C2C5CF:  db $40
C2C5D0:  db $0A
C2C5D1:  db $0B
C2C5D2:  db $0E
C2C5D3:  db $0F
C2C5D4:  db $FF

; Mold 6 - Mold slot 0
C2C5D5:  db $00
C2C5D6:  db $00
C2C5D7:  db $00
C2C5D8:  db $01
C2C5D9:  db $02
C2C5DA:  db $03
C2C5DB:  db $04
C2C5DC:  db $05
C2C5DD:  db $06
C2C5DE:  db $07
C2C5DF:  db $08
C2C5E0:  db $09
C2C5E1:  db $0A
C2C5E2:  db $0B
C2C5E3:  db $0C
C2C5E4:  db $0D
C2C5E5:  db $0E
C2C5E6:  db $0F
C2C5E7:  db $FF

; Mold 7 - Mold slot 0
C2C5E8:  db $00
C2C5E9:  db $00
C2C5EA:  db $00
C2C5EB:  db $01
C2C5EC:  db $02
C2C5ED:  db $04
C2C5EE:  db $05
C2C5EF:  db $06
C2C5F0:  db $08
C2C5F1:  db $09
C2C5F2:  db $0A
C2C5F3:  db $FF

; Mold 7 - Mold slot 1
C2C5F4:  db $60
C2C5F5:  db $00
C2C5F6:  db $03
C2C5F7:  db $07
C2C5F8:  db $0B
C2C5F9:  db $FF

; Mold 7 - Mold slot 2
C2C5FA:  db $00
C2C5FB:  db $60
C2C5FC:  db $0C
C2C5FD:  db $FF

; Mold 7 - Mold slot 3
C2C5FE:  db $20
C2C5FF:  db $60
C2C600:  db $0D
C2C601:  db $FF

; Mold 7 - Mold slot 4
C2C602:  db $40
C2C603:  db $60
C2C604:  db $0E
C2C605:  db $FF

; Mold 7 - Mold slot 5
C2C606:  db $60
C2C607:  db $60
C2C608:  db $0F
C2C609:  db $FF

; Mold 8 - Mold slot 0
C2C60A:  db $00
C2C60B:  db $00
C2C60C:  db $00
C2C60D:  db $01
C2C60E:  db $04
C2C60F:  db $05
C2C610:  db $FF

; Mold 8 - Mold slot 1
C2C611:  db $00
C2C612:  db $40
C2C613:  db $08
C2C614:  db $09
C2C615:  db $0C
C2C616:  db $0D
C2C617:  db $FF

; Mold 8 - Mold slot 2
C2C618:  db $40
C2C619:  db $00
C2C61A:  db $02
C2C61B:  db $06
C2C61C:  db $FF

; Mold 8 - Mold slot 3
C2C61D:  db $40
C2C61E:  db $40
C2C61F:  db $0A
C2C620:  db $0E
C2C621:  db $FF

; Mold 9 - Mold slot 0
C2C622:  db $00
C2C623:  db $00
C2C624:  db $00
C2C625:  db $01
C2C626:  db $02
C2C627:  db $04
C2C628:  db $05
C2C629:  db $06
C2C62A:  db $08
C2C62B:  db $09
C2C62C:  db $0A
C2C62D:  db $0C
C2C62E:  db $0D
C2C62F:  db $0E
C2C630:  db $FF
; Interesting; The above data suggests that the sprite
; In Mold 9 is 96 x 128, but the Mold data at C2/D0B0
; Indicates it's only 96 x 96.  best abide by the smaller
; Dimensions.

; Mold 10 - Mold slot 0
C2C631:  db $00
C2C632:  db $00
C2C633:  db $00
C2C634:  db $01
C2C635:  db $04
C2C636:  db $05
C2C637:  db $08
C2C638:  db $09
C2C639:  db $FF

; Mold 10 - Mold slot 1
C2C63A:  db $40
C2C63B:  db $00
C2C63C:  db $02
C2C63D:  db $06
C2C63E:  db $FF

; Mold 10 - Mold slot 2
C2C63F:  db $40
C2C640:  db $40
C2C641:  db $0A
C2C642:  db $0E
C2C643:  db $FF

; Mold 10 - Mold slot 3
C2C644:  db $00
C2C645:  db $60
C2C646:  db $0C
C2C647:  db $FF

; Mold 10 - Mold slot 4
C2C648:  db $20
C2C649:  db $60
C2C64A:  db $0D
C2C64B:  db $FF

; Mold 11 - Mold slot 0
C2C64C:  db $00
C2C64D:  db $00
C2C64E:  db $00
C2C64F:  db $04
C2C650:  db $FF

; Mold 11 - Mold slot 1
C2C651:  db $20
C2C652:  db $00
C2C653:  db $01
C2C654:  db $05
C2C655:  db $FF

; Mold 11 - Mold slot 2
C2C656:  db $40
C2C657:  db $00
C2C658:  db $02
C2C659:  db $06
C2C65A:  db $FF

; Mold 11 - Mold slot 3
C2C65B:  db $40
C2C65C:  db $40
C2C65D:  db $0A
C2C65E:  db $0E
C2C65F:  db $FF

; Mold 11 - Mold slot 4
C2C660:  db $00
C2C661:  db $40
C2C662:  db $08
C2C663:  db $09
C2C664:  db $0C
C2C665:  db $0D
C2C666:  db $FF

; Mold 12 - Mold slot 0
C2C667:  db $00
C2C668:  db $00
C2C669:  db $00
C2C66A:  db $01
C2C66B:  db $04
C2C66C:  db $05
C2C66D:  db $FF

; Mold 12 - Mold slot 1
C2C66E:  db $40
C2C66F:  db $00
C2C670:  db $02
C2C671:  db $03
C2C672:  db $06
C2C673:  db $07
C2C674:  db $FF

; Mold 12 - Mold slot 2
C2C675:  db $00
C2C676:  db $40
C2C677:  db $08
C2C678:  db $0C
C2C679:  db $FF

; Mold 12 - Mold slot 3
C2C67A:  db $20
C2C67B:  db $40
C2C67C:  db $09
C2C67D:  db $0D
C2C67E:  db $FF

; Mold 12 - Mold slot 4
C2C67F:  db $40
C2C680:  db $40
C2C681:  db $0A
C2C682:  db $0E
C2C683:  db $FF

; Mold 12 - Mold slot 5
C2C684:  db $60
C2C685:  db $40
C2C686:  db $0B
C2C687:  db $0F
C2C688:  db $FF

; C2/C4A3-C2/C688 is well-documented. Here's some 64-bit data called from C1/3E4F.
C2C689:  db $63,$14,$FE,$7F,$14,$63,$6F,$4E
C2C691:  db $63,$14,$F6,$4B,$FF,$2B,$CD,$26
C2C699:  db $63,$14,$7B,$52,$15,$46,$F0,$41
C2C6A1:  db $FD,$43,$F1,$3F,$E0,$03,$E0,$02

; Party sprite animation data. This is the sequence of four graphical actions used in different animations.
C2C6A9:  dd $FFFFFFFF
C2C6AD:  dd $00000000	; Wounded
C2C6B1:  dd $02030201
C2C6B5:  dd $35363534	; Running away
C2C6B9:  dd $05060504
C2C6BD:  dd $0F100F0E
C2C6C1:  dd $11111111	; Standing still
C2C6C5:  dd $04120412
C2C6C9:  dd $06130613
C2C6CD:  dd $09080908	; Chanting
C2C6D1:  dd $14141414	; Kneeling
C2C6D5:  dd $15151515	; Ready to fight
C2C6D9:  dd $16161616
C2C6DD:  dd $0A0A0A0A
C2C6E1:  dd $0B020B02
C2C6E5:  dd $3D353D35
C2C6E9:  dd $0D050D05
C2C6ED:  dd $3C323C32
C2C6F1:  dd $0C020C02
C2C6F5:  dd $17170202
C2C6F9:  dd $37373535
C2C6FD:  dd $07070505
C2C701:  dd $18180F0F
C2C705:  dd $19191919
C2C709:  dd $17171717
C2C70D:  dd $37373737
C2C711:  dd $07070707
C2C715:  dd $18181818
C2C719:  dd $00000000
C2C71D:  dd $00000000
C2C721:  dd $00000000
C2C725:  dd $00000000
C2C729:  dd $1F1E1F1E
C2C72D:  dd $4F4E4F4E
C2C731:  dd $024D021D
C2C735:  dd $1B1A1B1A
C2C739:  dd $00000000
C2C73D:  dd $07183717	; Muddled
C2C741:  dd $4B074A4A

; Sprite tile offsets.
C2C745:  dw $0AE0
C2C747:  dw $0B00
C2C749:  dw $0B40
C2C74B:  dw $0B60
C2C74D:  dw $0B20
C2C74F:  dw $FFFF
C2C751:  dw $0B80
C2C753:  dw $FFFF
C2C755:  dw $FFFF
C2C757:  dw $FFFF
C2C759:  dw $0000
C2C75B:  dw $0020
C2C75D:  dw $0040
C2C75F:  dw $0060
C2C761:  dw $0080
C2C763:  dw $00A0
C2C765:  dw $FFFF
C2C767:  dw $FFFF
C2C769:  dw $0000
C2C76B:  dw $0020
C2C76D:  dw $00C0
C2C76F:  dw $00E0
C2C771:  dw $0100
C2C773:  dw $0120
C2C775:  dw $FFFF
C2C777:  dw $FFFF
C2C779:  dw $0000
C2C77B:  dw $0020
C2C77D:  dw $0140
C2C77F:  dw $0160
C2C781:  dw $00A0
C2C783:  dw $0080
C2C785:  dw $FFFF
C2C787:  dw $FFFF
C2C789:  dw $0300
C2C78B:  dw $0320
C2C78D:  dw $0340
C2C78F:  dw $0360
C2C791:  dw $0380
C2C793:  dw $03A0
C2C795:  dw $FFFF
C2C797:  dw $FFFF
C2C799:  dw $03C0
C2C79B:  dw $03E0
C2C79D:  dw $0400
C2C79F:  dw $0420
C2C7A1:  dw $0440
C2C7A3:  dw $0460
C2C7A5:  dw $FFFF
C2C7A7:  dw $FFFF
C2C7A9:  dw $0300
C2C7AB:  dw $0320
C2C7AD:  dw $0480
C2C7AF:  dw $04A0
C2C7B1:  dw $04C0
C2C7B3:  dw $04E0
C2C7B5:  dw $FFFF
C2C7B7:  dw $FFFF
C2C7B9:  dw $03C0
C2C7BB:  dw $0660
C2C7BD:  dw $0680
C2C7BF:  dw $06A0
C2C7C1:  dw $06C0
C2C7C3:  dw $06E0
C2C7C5:  dw $FFFF
C2C7C7:  dw $FFFF
C2C7C9:  dw $0940
C2C7CB:  dw $0960
C2C7CD:  dw $0980
C2C7CF:  dw $09A0
C2C7D1:  dw $09C0
C2C7D3:  dw $09E0
C2C7D5:  dw $FFFF
C2C7D7:  dw $FFFF
C2C7D9:  dw $0940
C2C7DB:  dw $0960
C2C7DD:  dw $0A00
C2C7DF:  dw $09A0
C2C7E1:  dw $09C0
C2C7E3:  dw $09E0
C2C7E5:  dw $FFFF
C2C7E7:  dw $FFFF
C2C7E9:  dw $0A20
C2C7EB:  dw $0A40
C2C7ED:  dw $0A60
C2C7EF:  dw $0A80
C2C7F1:  dw $0AA0
C2C7F3:  dw $0AC0
C2C7F5:  dw $FFFF
C2C7F7:  dw $FFFF
C2C7F9:  dw $0000
C2C7FB:  dw $0020
C2C7FD:  dw $0BA0
C2C7FF:  dw $0BC0
C2C801:  dw $0100
C2C803:  dw $0120
C2C805:  dw $FFFF
C2C807:  dw $FFFF
C2C809:  dw $0000
C2C80B:  dw $0020
C2C80D:  dw $00C0
C2C80F:  dw $0BE0
C2C811:  dw $0100
C2C813:  dw $0120
C2C815:  dw $FFFF
C2C817:  dw $FFFF
C2C819:  dw $12C0
C2C81B:  dw $03E0
C2C81D:  dw $12E0
C2C81F:  dw $0420
C2C821:  dw $0440
C2C823:  dw $0460
C2C825:  dw $FFFF
C2C827:  dw $FFFF
C2C829:  dw $0180
C2C82B:  dw $01A0
C2C82D:  dw $01C0
C2C82F:  dw $01E0
C2C831:  dw $0200
C2C833:  dw $0220
C2C835:  dw $FFFF
C2C837:  dw $FFFF
C2C839:  dw $0180
C2C83B:  dw $01A0
C2C83D:  dw $0240
C2C83F:  dw $0260
C2C841:  dw $0280
C2C843:  dw $02A0
C2C845:  dw $FFFF
C2C847:  dw $FFFF
C2C849:  dw $0180
C2C84B:  dw $01A0
C2C84D:  dw $02C0
C2C84F:  dw $02E0
C2C851:  dw $0220
C2C853:  dw $0200
C2C855:  dw $FFFF
C2C857:  dw $FFFF
C2C859:  dw $03C0
C2C85B:  dw $03E0
C2C85D:  dw $0500
C2C85F:  dw $0520
C2C861:  dw $0540
C2C863:  dw $0560
C2C865:  dw $FFFF
C2C867:  dw $FFFF
C2C869:  dw $0300
C2C86B:  dw $0320
C2C86D:  dw $0580
C2C86F:  dw $0360
C2C871:  dw $05A0
C2C873:  dw $03A0
C2C875:  dw $FFFF
C2C877:  dw $FFFF
C2C879:  dw $0300
C2C87B:  dw $05C0
C2C87D:  dw $05E0
C2C87F:  dw $0600
C2C881:  dw $0620
C2C883:  dw $0640
C2C885:  dw $FFFF
C2C887:  dw $FFFF
C2C889:  dw $0700
C2C88B:  dw $0720
C2C88D:  dw $0740
C2C88F:  dw $0760
C2C891:  dw $0780
C2C893:  dw $07A0
C2C895:  dw $FFFF
C2C897:  dw $FFFF
C2C899:  dw $07C0
C2C89B:  dw $07E0
C2C89D:  dw $0800
C2C89F:  dw $0820
C2C8A1:  dw $0840
C2C8A3:  dw $0860
C2C8A5:  dw $FFFF
C2C8A7:  dw $FFFF
C2C8A9:  dw $0880
C2C8AB:  dw $08A0
C2C8AD:  dw $08C0
C2C8AF:  dw $08E0
C2C8B1:  dw $0900
C2C8B3:  dw $0920
C2C8B5:  dw $FFFF
C2C8B7:  dw $FFFF
C2C8B9:  dw $0D40
C2C8BB:  dw $0D60
C2C8BD:  dw $0D80
C2C8BF:  dw $0DA0
C2C8C1:  dw $0DC0
C2C8C3:  dw $0DE0
C2C8C5:  dw $FFFF
C2C8C7:  dw $FFFF
C2C8C9:  dw $0E00
C2C8CB:  dw $0E20
C2C8CD:  dw $0E40
C2C8CF:  dw $0E60
C2C8D1:  dw $0E80
C2C8D3:  dw $0EA0
C2C8D5:  dw $FFFF
C2C8D7:  dw $FFFF
C2C8D9:  dw $0620
C2C8DB:  dw $0640
C2C8DD:  dw $0660
C2C8DF:  dw $0680
C2C8E1:  dw $06A0
C2C8E3:  dw $06C0
C2C8E5:  dw $FFFF
C2C8E7:  dw $FFFF
C2C8E9:  dw $0C00
C2C8EB:  dw $0C20
C2C8ED:  dw $0C40
C2C8EF:  dw $0C60
C2C8F1:  dw $0C80
C2C8F3:  dw $0CA0
C2C8F5:  dw $FFFF
C2C8F7:  dw $FFFF
C2C8F9:  dw $0CC0
C2C8FB:  dw $0CE0
C2C8FD:  dw $0D00
C2C8FF:  dw $0D20
C2C901:  dw $0C80
C2C903:  dw $0CA0
C2C905:  dw $FFFF
C2C907:  dw $FFFF
C2C909:  dw $0F80
C2C90B:  dw $0FA0
C2C90D:  dw $0FC0
C2C90F:  dw $0FE0
C2C911:  dw $1000
C2C913:  dw $1020
C2C915:  dw $FFFF
C2C917:  dw $FFFF
C2C919:  dw $1240
C2C91B:  dw $1260
C2C91D:  dw $1280
C2C91F:  dw $12A0
C2C921:  dw $0100
C2C923:  dw $0120
C2C925:  dw $FFFF
C2C927:  dw $FFFF
C2C929:  dw $1460
C2C92B:  dw $1480
C2C92D:  dw $1300
C2C92F:  dw $1320
C2C931:  dw $1340
C2C933:  dw $1360
C2C935:  dw $FFFF
C2C937:  dw $FFFF
C2C939:  dw $1460
C2C93B:  dw $1480
C2C93D:  dw $1380
C2C93F:  dw $1320
C2C941:  dw $1340
C2C943:  dw $1360

C2C945:  db $40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
C2C955:  db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
C2C965:  db $40,$20,$12,$0D,$0A,$08,$06,$06,$05,$04,$04,$04,$03,$03,$03,$02
C2C975:  db $02,$02,$02,$02,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
C2C985:  db $40,$2D,$20,$17,$12,$0F,$0D,$0B,$0A,$09,$08,$07,$06,$06,$06,$05
C2C995:  db $05,$04,$04,$04,$04,$04,$04,$03,$03,$03,$03,$03,$03,$02,$02,$02
C2C9A5:  db $40,$32,$28,$20,$1A,$15,$12,$10,$0E,$0D,$0B,$0B,$0A,$09,$09,$08
C2C9B5:  db $07,$07,$06,$06,$06,$06,$05,$05,$05,$04,$04,$04,$04,$04,$04,$04
C2C9C5:  db $40,$35,$2D,$26,$20,$1B,$17,$15,$12,$10,$0F,$0E,$0D,$0C,$0B,$0A
C2C9D5:  db $0A,$09,$09,$08,$08,$07,$07,$06,$06,$06,$06,$06,$06,$05,$05,$05
C2C9E5:  db $40,$37,$30,$2A,$24,$20,$1C,$19,$17,$15,$12,$11,$10,$0F,$0E,$0D
C2C9F5:  db $0C,$0B,$0B,$0A,$0A,$09,$09,$09,$08,$08,$07,$07,$07,$06,$06,$06
C2CA05:  db $40,$39,$32,$2D,$28,$24,$20,$1C,$1A,$17,$15,$14,$12,$11,$10,$0F
C2CA15:  db $0E,$0E,$0D,$0C,$0B,$0B,$0B,$0A,$0A,$09,$09,$09,$09,$08,$08,$07
C2CA25:  db $40,$3A,$35,$2F,$2B,$26,$23,$20,$1D,$1A,$18,$17,$15,$14,$12,$12
C2CA35:  db $10,$10,$0F,$0E,$0E,$0D,$0C,$0B,$0B,$0B,$0B,$0A,$0A,$09,$09,$09
C2CA45:  db $40,$3A,$35,$31,$2D,$29,$26,$22,$20,$1D,$1B,$1A,$17,$16,$15,$14
C2CA55:  db $12,$12,$10,$10,$0F,$0E,$0E,$0E,$0D,$0C,$0C,$0B,$0B,$0B,$0A,$0A
C2CA65:  db $40,$3B,$37,$32,$2F,$2B,$28,$25,$22,$20,$1D,$1C,$1A,$18,$17,$15
C2CA75:  db $15,$13,$12,$12,$11,$10,$10,$0F,$0E,$0E,$0E,$0D,$0C,$0C,$0B,$0B
C2CA85:  db $40,$3C,$37,$34,$30,$2D,$2A,$27,$24,$22,$20,$1E,$1C,$1A,$19,$17
C2CA95:  db $17,$15,$15,$13,$12,$12,$11,$10,$10,$0F,$0F,$0E,$0E,$0E,$0D,$0C
C2CAA5:  db $40,$3C,$38,$35,$32,$2E,$2B,$29,$26,$24,$21,$20,$1E,$1C,$1B,$1A
C2CAB5:  db $18,$17,$16,$15,$14,$13,$12,$12,$11,$10,$10,$10,$0F,$0E,$0E,$0E
C2CAC5:  db $40,$3C,$39,$35,$32,$30,$2D,$2A,$28,$26,$24,$21,$20,$1E,$1C,$1B
C2CAD5:  db $1A,$19,$17,$17,$15,$15,$14,$13,$12,$12,$11,$10,$10,$10,$0F,$0F
C2CAE5:  db $40,$3C,$3A,$37,$33,$30,$2E,$2B,$29,$27,$25,$23,$21,$20,$1E,$1C
C2CAF5:  db $1C,$1A,$19,$18,$17,$16,$15,$15,$14,$13,$12,$12,$11,$11,$10,$10
C2CB05:  db $40,$3C,$3A,$37,$35,$32,$2F,$2D,$2B,$29,$26,$24,$23,$21,$20,$1F
C2CB15:  db $1D,$1C,$1A,$1A,$18,$17,$17,$16,$15,$15,$14,$13,$12,$12,$12,$11
C2CB25:  db $40,$3D,$3A,$37,$35,$32,$30,$2E,$2B,$2A,$28,$26,$24,$23,$21,$20
C2CB35:  db $1F,$1D,$1C,$1B,$1A,$19,$18,$17,$17,$15,$15,$15,$14,$13,$12,$12
C2CB45:  db $40,$3D,$3A,$38,$35,$33,$31,$2F,$2D,$2B,$29,$27,$26,$24,$22,$21
C2CB55:  db $20,$1F,$1D,$1C,$1B,$1A,$1A,$18,$17,$17,$16,$15,$15,$14,$14,$13
C2CB65:  db $40,$3D,$3B,$38,$36,$34,$32,$30,$2E,$2C,$2A,$29,$26,$25,$24,$22
C2CB75:  db $21,$20,$1F,$1D,$1C,$1B,$1A,$1A,$19,$18,$17,$17,$16,$15,$15,$14
C2CB85:  db $40,$3D,$3B,$39,$37,$35,$32,$30,$2F,$2D,$2B,$29,$28,$26,$25,$24
C2CB95:  db $22,$21,$20,$1F,$1D,$1C,$1C,$1B,$1A,$19,$18,$17,$17,$16,$15,$15
C2CBA5:  db $40,$3D,$3B,$3A,$37,$35,$33,$31,$30,$2E,$2C,$2A,$29,$27,$26,$24
C2CBB5:  db $23,$22,$21,$20,$1F,$1E,$1C,$1C,$1B,$1A,$1A,$19,$18,$17,$17,$16
C2CBC5:  db $40,$3E,$3C,$3A,$37,$35,$34,$32,$30,$2E,$2D,$2B,$2A,$28,$27,$26
C2CBD5:  db $24,$23,$22,$21,$20,$1F,$1E,$1D,$1C,$1B,$1A,$1A,$19,$18,$17,$17
C2CBE5:  db $40,$3E,$3C,$3A,$38,$36,$35,$32,$31,$2F,$2E,$2C,$2B,$29,$28,$26
C2CBF5:  db $25,$24,$23,$21,$21,$20,$1F,$1E,$1D,$1C,$1B,$1A,$1A,$19,$18,$18
C2CC05:  db $40,$3E,$3C,$3A,$38,$37,$35,$33,$32,$30,$2E,$2D,$2B,$2A,$29,$27
C2CC15:  db $26,$25,$24,$23,$21,$21,$20,$1F,$1E,$1D,$1C,$1C,$1B,$1A,$1A,$19
C2CC25:  db $40,$3E,$3C,$3A,$39,$37,$35,$34,$32,$30,$2F,$2E,$2C,$2B,$29,$28
C2CC35:  db $27,$26,$24,$24,$22,$21,$21,$20,$1F,$1E,$1D,$1C,$1C,$1B,$1A,$1A
C2CC45:  db $40,$3E,$3C,$3A,$39,$37,$35,$34,$32,$31,$30,$2E,$2D,$2B,$2A,$29
C2CC55:  db $28,$26,$26,$24,$24,$22,$21,$21,$20,$1F,$1E,$1D,$1C,$1C,$1B,$1A
C2CC65:  db $40,$3E,$3C,$3B,$39,$37,$36,$35,$33,$32,$30,$2F,$2E,$2C,$2B,$2A
C2CC75:  db $29,$27,$26,$25,$24,$23,$22,$21,$21,$20,$1F,$1E,$1D,$1C,$1C,$1B
C2CC85:  db $40,$3E,$3C,$3B,$3A,$38,$37,$35,$33,$32,$30,$30,$2E,$2D,$2B,$2B
C2CC95:  db $29,$28,$27,$26,$25,$24,$23,$22,$21,$21,$20,$1F,$1E,$1D,$1C,$1C
C2CCA5:  db $40,$3E,$3C,$3B,$3A,$38,$37,$35,$34,$32,$31,$30,$2F,$2E,$2C,$2B
C2CCB5:  db $2A,$29,$28,$26,$26,$25,$24,$23,$22,$21,$21,$20,$1F,$1E,$1D,$1D
C2CCC5:  db $40,$3E,$3C,$3B,$3A,$38,$37,$35,$35,$33,$32,$30,$2F,$2E,$2D,$2B
C2CCD5:  db $2B,$29,$29,$27,$26,$26,$24,$24,$23,$22,$21,$21,$20,$1F,$1F,$1E
C2CCE5:  db $40,$3F,$3D,$3C,$3A,$39,$37,$36,$35,$33,$32,$31,$30,$2E,$2E,$2C
C2CCF5:  db $2B,$2A,$29,$28,$27,$26,$25,$24,$24,$23,$22,$21,$21,$20,$1F,$1F
C2CD05:  db $40,$3F,$3D,$3C,$3A,$39,$37,$36,$35,$34,$32,$31,$30,$2F,$2E,$2D
C2CD15:  db $2B,$2B,$2A,$29,$28,$27,$26,$25,$24,$24,$23,$22,$21,$20,$20,$1F
C2CD25:  db $40,$3F,$3D,$3C,$3A,$39,$38,$37,$35,$34,$33,$32,$30,$30,$2E,$2E
C2CD35:  db $2C,$2B,$2A,$29,$29,$27,$26,$26,$25,$24,$24,$22,$21,$21,$20,$20

; C2/CD45-C2/CE2A is compressed data.
C2CD45:  dw $00E6    	; Size: 230 bytes

C2CD47:  db $BB      	; First byte of each of these blocks you will see is always the "control byte"; Comments will explain. Take note: the bits of this control are 10111011.
C2CD48:  db $00      	; XXXXXXX1: Single tile 00. The 1 is actually the LSB of the control byte. 1 means a single tile, while 0 means several tiles copied from another place in the decompression array; See later for details. The X means we don't care about that bit for this tile or group of tiles.
C2CD49:  db $08      	; XXXXXX1X: Single tile 08
C2CD4A:  dw $E7DF    	; XXXXX0XX: Copy 31 tiles starting at $FFDF; FFDFh = F800 OR [E7DF AND 07FF]. Decompression array population always starts at $FFDE and cycles through $F800-$FFFF which means $FFDF = #$08 currently. Thus, this will add 31 more 08-tiles. To get the number 31, we take #$1F = #$E0 DIV 8 + 3.
C2CD4C:  db $03      	; XXXX1XXX: Single tile 03
C2CD4D:  db $07      	; XXX1XXXX: Single tile 07
C2CD4E:  db $07      	; XX1XXXXX: Single tile 07
C2CD4F:  dw $CFDF    	; X0XXXXXX: Copy 28 tiles starting at $FFDF; #$08 times 28.
C2CD51:  db $10      	; 1XXXXXXX: Single tile 10

C2CD52:  db $77
C2CD53:  db $02
C2CD54:  db $05
C2CD55:  db $06
C2CD56:  dw $C800
C2CD58:  db $18
C2CD59:  db $01
C2CD5A:  db $04
C2CD5B:  dw $0820

C2CD5D:  db $8E
C2CD5E:  dw $B000
C2CD60:  db $20
C2CD61:  db $01
C2CD62:  db $03
C2CD63:  dw $0040
C2CD65:  dw $1042
C2CD67:  dw $9001
C2CD69:  db $28

C2CD6A:  db $CF
C2CD6B:  db $01
C2CD6C:  db $02
C2CD6D:  db $04
C2CD6E:  db $05
C2CD6F:  dw $2862
C2CD71:  dw $8001
C2CD73:  db $30
C2CD74:  db $01

C2CD75:  db $11
C2CD76:  db $02
C2CD77:  dw $0060
C2CD79:  dw $3083
C2CD7B:  dw $7000
C2CD7D:  db $38
C2CD7E:  dw $089F
C2CD80:  dw $1081
C2CD82:  dw $30A6

C2CD84:  db $46
C2CD85:  dw $5001
C2CD87:  db $40
C2CD88:  db $00
C2CD89:  dw $189F
C2CD8B:  dw $50C5
C2CD8D:  dw $4000
C2CD8F:  db $48
C2CD90:  dw $10DF

C2CD92:  db $84
C2CD93:  dw $20E3
C2CD95:  dw $80E9
C2CD97:  db $50
C2CD98:  dw $08DF
C2CD9A:  dw $28C1
C2CD9C:  dw $50E8
C2CD9E:  dw $1800
C2CDA0:  db $58

C2CDA1:  db $10
C2CDA2:  dw $00DF
C2CDA4:  dw $4101
C2CDA6:  dw $592C
C2CDA8:  dw $0000
C2CDAA:  db $60
C2CDAB:  dw $113F
C2CDAD:  dw $4143
C2CDAF:  dw $614D

C2CDB1:  db $39
C2CDB2:  db $68
C2CDB3:  dw $295F
C2CDB5:  dw $A166
C2CDB7:  db $70
C2CDB8:  db $00
C2CDB9:  db $01
C2CDBA:  dw $7180
C2CDBC:  dw $48E9

C2CDBE:  db $49
C2CDBF:  db $78
C2CDC0:  dw $519F
C2CDC2:  dw $79AB
C2CDC4:  db $80
C2CDC5:  dw $219F
C2CDC7:  dw $A9C5
C2CDC9:  db $88
C2CDCA:  dw $119F

C2CDCC:  db $88
C2CDCD:  dw $1982
C2CDCF:  dw $49C8
C2CDD1:  dw $28A6
C2CDD3:  db $90
C2CDD4:  dw $29FF
C2CDD6:  dw $29C5
C2CDD8:  dw $620E
C2CDDA:  db $98

C2CDDB:  db $88
C2CDDC:  dw $019F
C2CDDE:  dw $31E1
C2CDE0:  dw $822A
C2CDE2:  db $A0
C2CDE3:  dw $1A3F
C2CDE5:  dw $9244
C2CDE7:  dw $0842
C2CDE9:  db $A8

C2CDEA:  db $64
C2CDEB:  dw $825F
C2CDED:  dw $4A71
C2CDEF:  db $B0
C2CDF0:  dw $3A5F
C2CDF2:  dw $8A88
C2CDF4:  db $06
C2CDF5:  db $B8
C2CDF6:  dw $225F

C2CDF8:  db $4C
C2CDF9:  dw $2A44
C2CDFB:  dw $6A8C
C2CDFD:  db $C0
C2CDFE:  db $00
C2CDFF:  dw $929F
C2CE01:  dw $320E
C2CE03:  db $C8
C2CE04:  dw $6ADF

C2CE06:  dw $EE92
C2CE08:  db $62
C2CE09:  dw $DFD0
C2CE0B:  db $2A
C2CE0C:  dw $A306
C2CE0E:  db $D8
C2CE0F:  db $1F
C2CE10:  dw $27B3

C2CE12:  dw $E019
C2CE14:  dw $1F44
C2CE16:  dw $4B53
C2CE18:  dw $E87B
C2CE1A:  dw $12DF
C2CE1C:  dw $5B23
C2CE1E:  db $EE
C2CE1F:  db $4A
C2CE20:  db $F0

C2CE21:  db $7F
C2CE22:  db $5B
C2CE23:  db $02
C2CE24:  db $4B
C2CE25:  db $73
C2CE26:  db $F8
C2CE27:  db $9F
C2CE28:  db $8B
C2CE29:  dw $4350

; Battle character palettes.
C2CE2B:  db $02      	; Terra
C2CE2C:  db $01      	; Locke
C2CE2D:  db $04      	; Cyan
C2CE2E:  db $04      	; Shadow
C2CE2F:  db $00      	; Edgar
C2CE30:  db $00      	; Sabin
C2CE31:  db $00      	; Celes
C2CE32:  db $03      	; Strago
C2CE33:  db $03      	; Relm
C2CE34:  db $04      	; Setzer
C2CE35:  db $05      	; Mog
C2CE36:  db $03      	; Gau
C2CE37:  db $03      	; Gogo
C2CE38:  db $05      	; Umaro
C2CE39:  db $01      	; Vicks & Wedge
C2CE3A:  db $00      	; Imp
C2CE3B:  db $00      	; Leo
C2CE3C:  db $03      	; Banon
C2CE3D:  db $06      	; Esper Terra
C2CE3E:  db $01      	; Merchant
C2CE3F:  db $00      	; Ghost
C2CE40:  db $03      	; Kefka
C2CE41:  db $03      	; Gestahl
C2CE42:  db $00      	; Imperial Soldier

; 24-bit pointers to character sprite data.
C2CE43:  dl $D50000  	; Terra
C2CE46:  dl $D516A0  	; Locke
C2CE49:  dl $D52D40  	; Cyan
C2CE4C:  dl $D543E0  	; Shadow
C2CE4F:  dl $D55A80  	; Edgar
C2CE52:  dl $D57120  	; Sabin
C2CE55:  dl $D587C0  	; Celes
C2CE58:  dl $D59E60  	; Strago
C2CE5B:  dl $D5B500  	; Relm
C2CE5E:  dl $D5CBA0  	; Setzer
C2CE61:  dl $D5E240  	; Mog
C2CE64:  dl $D5F8E0  	; Gau
C2CE67:  dl $D60F80  	; Gogo
C2CE6A:  dl $D62620  	; Umaro
C2CE6D:  dl $D63CC0  	; Vicks & Wedge
C2CE70:  dl $D65360  	; Imp
C2CE73:  dl $D66A00  	; Leo
C2CE76:  dl $D67F60  	; Banon
C2CE79:  dl $D694C0  	; Esper Terra
C2CE7C:  dl $D6AA20  	; Merchant
C2CE7F:  dl $D6BF80  	; Ghost
C2CE82:  dl $D6D4E0  	; Kefka
C2CE85:  dl $D6EA40  	; Gestahl
C2CE88:  dl $D63CC0  	; Imperial Soldier

; Some kind of 16-bit data.
C2CE8B:  dw $0000
C2CE8D:  dw $0080
C2CE8F:  dw $0100
C2CE91:  dw $0180
C2CE93:  dw $0200
C2CE95:  dw $0280
C2CE97:  dw $0300
C2CE99:  dw $0380
C2CE9B:  dw $0400
C2CE9D:  dw $0480
C2CE9F:  dw $0500
C2CEA1:  dw $0580

; 32-bit data, used in the animation of character sprites.
C2CEA3:  dd $0000F800
C2CEA7:  dd $00020800
C2CEAB:  dd $000008FC
C2CEAF:  dd $0002080C

C2CEB3:  dd $4000F800
C2CEB7:  dd $40020800
C2CEBB:  dd $40000804
C2CEBF:  dd $400208F4

C2CEC3:  dd $80020000
C2CEC7:  dd $80001000
C2CECB:  dd $800008FC
C2CECF:  dd $8002080C

C2CED3:  dd $C0020000
C2CED7:  dd $C0001000
C2CEDB:  dd $C0000804
C2CEDF:  dd $C00208F4

; Data - indexed by encounter type, code in Bank C1
; How much to horizontally shift each character if in back row
; Front - moves further to right
; Back - moves further to left (hence the negative numbers)
; Pincer - horizontal position unchanged, as everybody considered front row to start
; Side - characters 0 and 1 on the right side are moved further right.
;        characters 2 and 3 on the left side are moved further left.
C2CEE3:  dw $000C    	; Front
C2CEE5:  dw $000C
C2CEE7:  dw $000C
C2CEE9:  dw $000C

C2CEEB:  dw $FFF4    	; Back
C2CEED:  dw $FFF4
C2CEEF:  dw $FFF4
C2CEF1:  dw $FFF4

C2CEF3:  dw $0000    	; Pincer
C2CEF5:  dw $0000
C2CEF7:  dw $0000
C2CEF9:  dw $0000

C2CEFB:  dw $000C    	; Side
C2CEFD:  dw $000C
C2CEFF:  dw $FFF4
C2CF01:  dw $FFF4

; Data - indexed by encounter type, code in Bank C1
; Looks like character vertical coordinates to me.  Front, Back, Pincer all the same.
; And with Side, characters 0 and 2 and characters 1 and 3 end up at same heights
C2CF03:  db $44      	; Front
C2CF04:  db $56
C2CF05:  db $68
C2CF06:  db $7A

C2CF07:  db $44      	; Back
C2CF08:  db $56
C2CF09:  db $68
C2CF0A:  db $7A

C2CF0B:  db $44      	; Pincer
C2CF0C:  db $56
C2CF0D:  db $68
C2CF0E:  db $7A

C2CF0F:  db $4E      	; Side
C2CF10:  db $7A
C2CF11:  db $4E
C2CF12:  db $7A

C2CF13:  db $50
C2CF14:  db $5E
C2CF15:  db $6C
C2CF16:  db $7A

; Data - indexed by encounter type, code in bank C1
C2CF17:  dw $0170    	; Front
C2CF19:  dw $0170
C2CF1B:  dw $0170
C2CF1D:  dw $0170

C2CF1F:  dw $0090    	; Back
C2CF21:  dw $0090
C2CF23:  dw $0090
C2CF25:  dw $0090

C2CF27:  dw $0100    	; Pincer
C2CF29:  dw $0100
C2CF2B:  dw $0100
C2CF2D:  dw $0100

C2CF2F:  dw $0170    	; Side
C2CF31:  dw $0170
C2CF33:  dw $0090
C2CF35:  dw $0090

; Data used at C1/3248.
C2CF37:  dw $30C0
C2CF39:  dw $31C0
C2CF3B:  dw $32C0
C2CF3D:  dw $33C0
C2CF3F:  dw $34C0
C2CF41:  dw $35C0
C2CF43:  dw $36C0
C2CF45:  dw $37C0
C2CF47:  dw $38C0
C2CF49:  dw $39C0
C2CF4B:  dw $3AC0
C2CF4D:  dw $3BC0
C2CF4F:  dw $3CC0
C2CF51:  dw $3DC0
C2CF53:  dw $3EC0
C2CF55:  dw $3FC0

; Data used by C1/34E6.
C2CF57:  dd $0C080400

; Data indexed by code in bank C1.
C2CF5B:  dd $60402000

; Pointers of some sort. Used at C1/3223.
C2CF5F:  dd $00D84500
C2CF63:  dd $00D84800
C2CF67:  dd $00D84900
C2CF6B:  dd $00D84C00
C2CF6F:  dd $00D84D00

; Indices for the above pointers.
C2CF73:  db $00
C2CF74:  db $00
C2CF75:  db $00
C2CF76:  db $00
C2CF77:  db $00
C2CF78:  db $01
C2CF79:  db $00
C2CF7A:  db $02
C2CF7B:  db $03
C2CF7C:  db $03
C2CF7D:  db $03
C2CF7E:  db $03
C2CF7F:  db $04
C2CF80:  db $04
C2CF81:  db $04
C2CF82:  db $04

C2CF83:  dd $010CFCF7
C2CF87:  dd $014CFCF7
C2CF8B:  dd $018CFCF7
C2CF8F:  dd $01CCFCF7

C2CF93:  db $03
C2CF94:  db $06
C2CF95:  db $08
C2CF96:  db $0A
C2CF97:  db $0B
C2CF98:  db $0D
C2CF99:  db $0E
C2CF9A:  db $0F
C2CF9B:  db $0F
C2CF9C:  db $10
C2CF9D:  db $10
C2CF9E:  db $10
C2CF9F:  db $10
C2CFA0:  db $10
C2CFA1:  db $0F
C2CFA2:  db $0F
C2CFA3:  db $0E
C2CFA4:  db $0D
C2CFA5:  db $0B
C2CFA6:  db $0A
C2CFA7:  db $08
C2CFA8:  db $06
C2CFA9:  db $03
C2CFAA:  db $00

C2CFAB:  db $03
C2CFAC:  db $04
C2CFAD:  db $05
C2CFAE:  db $06
C2CFAF:  db $07
C2CFB0:  db $07
C2CFB1:  db $08
C2CFB2:  db $08
C2CFB3:  db $07
C2CFB4:  db $07
C2CFB5:  db $06
C2CFB6:  db $05
C2CFB7:  db $04
C2CFB8:  db $03

C2CFB9:  db $00
C2CFBA:  db $00
C2CFBB:  db $00
C2CFBC:  db $00
C2CFBD:  db $00
C2CFBE:  db $00
C2CFBF:  db $00
C2CFC0:  db $00
C2CFC1:  db $00
C2CFC2:  db $00
C2CFC3:  db $00
C2CFC4:  db $00
C2CFC5:  db $00
C2CFC6:  db $00
C2CFC7:  db $00
C2CFC8:  db $00
C2CFC9:  db $00
C2CFCA:  db $00
C2CFCB:  db $00
C2CFCC:  db $00
C2CFCD:  db $00
C2CFCE:  db $00
C2CFCF:  db $00
C2CFD0:  db $00
C2CFD1:  db $00
C2CFD2:  db $00
C2CFD3:  db $00

; Data - indexed by loop in Bank C1 that has 24 iterations
C2CFD4:  db $BF
C2CFD5:  db $00
C2CFD6:  db $63
C2CFD7:  db $0C
C2CFD8:  db $6C
C2CFD9:  db $19
C2CFDA:  db $10
C2CFDB:  db $2E
C2CFDC:  db $F7
C2CFDD:  db $42
C2CFDE:  db $0E
C2CFDF:  db $11
C2CFE0:  db $BC
C2CFE1:  db $2E
C2CFE2:  db $9F
C2CFE3:  db $4B
C2CFE4:  db $AD
C2CFE5:  db $41
C2CFE6:  db $39
C2CFE7:  db $67
C2CFE8:  db $FF
C2CFE9:  db $7F
C2CFEA:  db $92
C2CFEB:  db $21

; Data - indexed by loop in Bank C1 with 22 iterations
C2CFEC:  db $42
C2CFED:  db $08
C2CFEE:  db $5A
C2CFEF:  db $6B
C2CFF0:  db $C6
C2CFF1:  db $18
C2CFF2:  db $10
C2CFF3:  db $42
C2CFF4:  db $4A
C2CFF5:  db $29
C2CFF6:  db $5A
C2CFF7:  db $6B
C2CFF8:  db $73
C2CFF9:  db $4E
C2CFFA:  db $18
C2CFFB:  db $63
C2CFFC:  db $EF
C2CFFD:  db $3D
C2CFFE:  db $73
C2CFFF:  db $4E
C2D000:  db $4A
C2D001:  db $29

C2D002:  db $00
C2D003:  db $00

; Data - indexed by loop in Bank C1 with 22 iterations
C2D004:  db $C6
C2D005:  db $44
C2D006:  db $FF
C2D007:  db $7F
C2D008:  db $60
C2D009:  db $3C
C2D00A:  db $F7
C2D00B:  db $7E
C2D00C:  db $AD
C2D00D:  db $7D
C2D00E:  db $FF
C2D00F:  db $7F
C2D010:  db $18
C2D011:  db $7F
C2D012:  db $52
C2D013:  db $7E
C2D014:  db $8C
C2D015:  db $7D
C2D016:  db $52
C2D017:  db $7E
C2D018:  db $29
C2D019:  db $7D

; Pointers to monster formation size templates (aka molds)
C2D01A:  dw C2D034
C2D01C:  dw C2D044
C2D01E:  dw C2D05C
C2D020:  dw C2D064
C2D022:  dw C2D06C
C2D024:  dw C2D078
C2D026:  dw C2D084
C2D028:  dw C2D088
C2D02A:  dw C2D0A0
C2D02C:  dw C2D0B0
C2D02E:  dw C2D0B4
C2D030:  dw C2D0C8
C2D032:  dw C2D0DC

; Monster formation size templates (aka molds)
; Byte 0 and 1: 16-bit pointer indicating where relative to start of
;               tiles buffer [RAM Address $AE3F] to begin outputting
;               this monster's tiles.
; Byte 2: maximum width in 8-pixel tiles for a monster in this slot.
; Byte 3: maximum height in 8-pixel tiles for a monster in this slot.)

; Template 0:
C2D034:  dd $08080000	; Enemy 1: 64 x 64
C2D038:  dd $08080100	; Enemy 2: 64 x 64
C2D03C:  dd $08081000	; Enemy 3: 64 x 64
C2D040:  dd $08081100	; Enemy 4: 64 x 64

; Template 1:
C2D044:  dd $08080000	; Enemy 1: 64 x 64
C2D048:  dd $08080100	; Enemy 2: 64 x 64
C2D04C:  dd $04041000	; Enemy 3: 32 x 32
C2D050:  dd $04041080	; Enemy 4: 32 x 32
C2D054:  dd $04041100	; Enemy 5: 32 x 32
C2D058:  dd $04041180	; Enemy 6: 32 x 32

; Template 2:
C2D05C:  dd $080C0000	; Enemy 1: 96 x 64
C2D060:  dd $080C1000	; Enemy 2: 96 x 64

; Template 3:
C2D064:  dd $10080000	; Enemy 1: 64 x 128
C2D068:  dd $10080100	; Enemy 2: 64 x 128

; Template 4:
C2D06C:  dd $080C0000	; Enemy 1: 96 x 64
C2D070:  dd $08081000	; Enemy 2: 64 x 64
C2D074:  dd $08081100	; Enemy 3: 64 x 64

; Template 5:
C2D078:  dd $10080000	; Enemy 1: 64 x 128
C2D07C:  dd $08080100	; Enemy 2: 64 x 64
C2D080:  dd $08081100	; Enemy 3: 64 x 64

; Template 6:
C2D084:  dd $10100000	; Enemy 1: 128 x 128

; Template 7:
C2D088:  dd $0C0C0000	; Enemy 1: 96 x 96
C2D08C:  dd $0C040180	; Enemy 2: 32 x 96
C2D090:  dd $04041800	; Enemy 3: 32 x 32
C2D094:  dd $04041880	; Enemy 4: 32 x 32
C2D098:  dd $04041900	; Enemy 5: 32 x 32
C2D09C:  dd $04041980	; Enemy 6: 32 x 32

; Template 8:
C2D0A0:  dd $08080000	; Enemy 1: 64 x 64
C2D0A4:  dd $08081000	; Enemy 2: 64 x 64
C2D0A8:  dd $08040100	; Enemy 3: 32 x 64
C2D0AC:  dd $08041100	; Enemy 4: 32 x 64

; Template 9:
C2D0B0:  dd $0C0C0000	; Enemy 1: 96 x 96

; Template 10:
C2D0B4:  dd $0C080000	; Enemy 1: 64 x 96
C2D0B8:  dd $08040100	; Enemy 2: 32 x 64
C2D0BC:  dd $08041100	; Enemy 3: 32 x 64
C2D0C0:  dd $04041800	; Enemy 4: 32 x 32
C2D0C4:  dd $04041880	; Enemy 5: 32 x 32

; Template 11:
C2D0C8:  dd $08040000	; Enemy 1: 32 x 64
C2D0CC:  dd $08040080	; Enemy 2: 32 x 64
C2D0D0:  dd $08040100	; Enemy 3: 32 x 64
C2D0D4:  dd $08041100	; Enemy 4: 32 x 64
C2D0D8:  dd $08081000	; Enemy 5: 64 x 64

; Template 12:
C2D0DC:  dd $08080000	; Enemy 1: 64 x 64
C2D0E0:  dd $08080100	; Enemy 2: 64 x 64
C2D0E4:  dd $08041000	; Enemy 3: 32 x 64
C2D0E8:  dd $08041080	; Enemy 4: 32 x 64
C2D0EC:  dd $08041100	; Enemy 5: 32 x 64
C2D0F0:  dd $08041180	; Enemy 6: 32 x 64

; Don't know where this data is used, what it's for, or even if this is the correct structure.
C2D0F4:  db $64,$7B,$89,$33,$7B,$89,$49,$7F,$89,$00,$04,$87,$89,$60,$8B,$89
C2D104:  db $33,$8B,$89,$44,$8F,$89,$05,$87,$89,$00,$64,$7B,$89,$33,$7B,$89
C2D114:  db $0C,$7F,$89,$30,$83,$89,$0D,$7F,$89,$00,$64,$6F,$89,$33,$6F,$89
C2D124:  db $0C,$73,$89,$30,$77,$89,$0D,$73,$89,$00,$64,$6F,$89,$33,$6F,$89

; And here's a bit more stuff I can't wrap my head around.
C2/D134: db $49,$73,$89,$00
C2/D138: db $F0,$93,$89,$F0
C2/D13C: db $53,$8B,$00,$CC
C2/D140: db $1F,$9F,$CC,$4F
C2/D144: db $A0,$C8,$7F,$9C
C2/D148: db $00,$F0,$32,$EA
C2/D14C: db $F0,$12,$EB,$00

; 16-bit data.
C2D150:  dw $D1BD
C2D152:  dw $D1C4
C2D154:  dw $D1CB
C2D156:  dw $D1F2
C2D158:  dw $D225
C2D15A:  dw $D24B
C2D15C:  dw $D1D2
C2D15E:  dw $D238
C2D160:  dw $D1E5
C2D162:  dw $D180
C2D164:  dw $D212
C2D166:  dw $D1FF
C2D168:  dw $D1BD
C2D16A:  dw $D1C4
C2D16C:  dw $D258
C2D16E:  dw $D1F2
C2D170:  dw $D225
C2D172:  dw $D281
C2D174:  dw $D1D2
C2D176:  dw $D268
C2D178:  dw $D1E5
C2D17A:  dw $D180
C2D17C:  dw $D212
C2D17E:  dw $D1FF

; This looks like 24-bit data.
C2D180:  dl $43F508
C2D183:  dl $43F908
C2D186:  dl $43FD08
C2D189:  dl $440108
C2D18C:  dl $440508
C2D18F:  dl $440908
C2D192:  dl $440D08
C2D195:  dl $441108
C2D198:  dl $441508
C2D19B:  dl $441908
C2D19E:  dl $441D08
C2D1A1:  dl $442108
C2D1A4:  dl $442508
C2D1A7:  dl $442908
C2D1AA:  dl $442D08
C2D1AD:  dl $443108
C2D1B0:  dl $443508
C2D1B3:  dl $443908
C2D1B6:  dl $443D07

C2D1B9:  dd $004651C9
C2D1BD:  dd $F043F5F0
C2D1C1:  dd $F00045B5
C2D1C5:  dd $35F04775
C2D1C9:  dd $F5F00049
C2D1CD:  dd $4CB5F04A
C2D1D1:  dd $43F5A000
C2D1D5:  dd $A043F5A0
C2D1D9:  dd $F5A043F5
C2D1DD:  dd $43F59743
C2D1E1:  dd $004651C9
C2D1E5:  dd $C043F5C0
C2D1E9:  dd $F59743F5
C2D1ED:  dd $4651C943
C2D1F1:  dd $43F54000
C2D1F5:  dd $1743F540
C2D1F9:  dd $51C943F5
C2D1FD:  dd $75A00046
C2D201:  dd $4775A047
C2D205:  dd $B0477590
C2D209:  dd $75974875
C2D20D:  dd $49D1C948
C2D211:  dd $4775A000
C2D215:  dd $974775A0
C2D219:  dd $75A94775
C2D21D:  dd $48759748
C2D221:  dd $0049D1C9
C2D225:  dd $A04775A0
C2D229:  dd $75A04775
C2D22D:  dd $4775A047
C2D231:  dd $C9477597
C2D235:  dd $A00049D1
C2D239:  dd $F5A04AF5
C2D23D:  dd $4AF5A04A
C2D241:  dd $974AF5A0
C2D245:  dd $51C94AF5
C2D249:  dd $F540004D
C2D24D:  dd $4AF5404A
C2D251:  dd $C94AF517
C2D255:  dd $E4004D51
C2D259:  dd $85B34AF5
C2D25D:  dd $4D518C4C
C2D261:  dd $8D7B8630
C2D265:  dd $A0004E41
C2D269:  dd $F5A04AF5
C2D26D:  dd $4AF5A04A
C2D271:  dd $974AF5A0
C2D275:  dd $518C4AF5
C2D279:  dd $7B86304D
C2D27D:  dd $004E418D
C2D281:  dd $404AF540
C2D285:  dd $F5174AF5
C2D289:  dd $4D518C4A
C2D28D:  dd $8D7B8630
C2D291:  dl $004E41

; Data - indexed in routine C1/04CA with a pointer between 0 and Eh, 16 bits at a time
C2D294:  dw $0000
C2D296:  dw $0020
C2D298:  dw $0040
C2D29A:  dw $0060
C2D29C:  dw $0080
C2D29E:  dw $00A0
C2D2A0:  dw $00C0
C2D2A2:  dw $00E0

; Data - indexed in routine C1/0461 with a pointer between 0 and Eh, 16 bits at a time
C2D2A4:  dw $7140
C2D2A6:  dw $7160
C2D2A8:  dw $7180
C2D2AA:  dw $71A0
C2D2AC:  dw $71C0
C2D2AE:  dw $71E0
C2D2B0:  dw $7200
C2D2B2:  dw $7220

; Data - indexed in routine C1/0461 with a pointer between 0 and Eh, 16 bits at a time
C2D2B4:  dw $0000
C2D2B6:  dw $0040
C2D2B8:  dw $0080
C2D2BA:  dw $00C0
C2D2BC:  dw $0100
C2D2BE:  dw $0140
C2D2C0:  dw $0180
C2D2C2:  dw $01C0

; Called in a function located at C1/09DE:
C2D2C4:  dw $A000
C2D2C6:  dw $A080
C2D2C8:  dw $A100
C2D2CA:  dw $A180

C2D2CC:  dw $A200
C2D2CE:  dw $A280
C2D2D0:  dw $A300
C2D2D2:  dw $A380

C2D2D4:  dw $2000
C2D2D6:  dw $2040
C2D2D8:  dw $2080
C2D2DA:  dw $20C0

C2D2DC:  dw $2100
C2D2DE:  dw $2140
C2D2E0:  dw $2180
C2D2E2:  dw $21C0

; Data - indexed in routine C1/0A16 with a pointer between 0 and 3Eh, 16 bits at a time
C2D2E4:  dw $A400
C2D2E6:  dw $A600
C2D2E8:  dw $A480
C2D2EA:  dw $A680
C2D2EC:  dw $A500
C2D2EE:  dw $A700
C2D2F0:  dw $A580
C2D2F2:  dw $A780
C2D2F4:  dw $A800
C2D2F6:  dw $AA00
C2D2F8:  dw $A880
C2D2FA:  dw $AA80
C2D2FC:  dw $A900
C2D2FE:  dw $AB00
C2D300:  dw $A980
C2D302:  dw $AB80
C2D304:  dw $AC00
C2D306:  dw $AE00
C2D308:  dw $AC80
C2D30A:  dw $AE80
C2D30C:  dw $AD00
C2D30E:  dw $AF00
C2D310:  dw $AD80
C2D312:  dw $AF80
C2D314:  dw $B000
C2D316:  dw $B200
C2D318:  dw $B080
C2D31A:  dw $B280
C2D31C:  dw $B100
C2D31E:  dw $B300
C2D320:  dw $B180
C2D322:  dw $A780

; Data - indexed in routine C1/0A16 with a pointer between 0 and 3Eh, 16-bits at a time
C2D324:  dw $2200
C2D326:  dw $2300
C2D328:  dw $2240
C2D32A:  dw $2340
C2D32C:  dw $2280
C2D32E:  dw $2380
C2D330:  dw $22C0
C2D332:  dw $23C0
C2D334:  dw $2200
C2D336:  dw $2300
C2D338:  dw $2240
C2D33A:  dw $2340
C2D33C:  dw $2280
C2D33E:  dw $2380
C2D340:  dw $22C0
C2D342:  dw $23C0
C2D344:  dw $2200
C2D346:  dw $2300
C2D348:  dw $2240
C2D34A:  dw $2340
C2D34C:  dw $2280
C2D34E:  dw $2380
C2D350:  dw $22C0
C2D352:  dw $23C0
C2D354:  dw $2200
C2D356:  dw $2300
C2D358:  dw $2240
C2D35A:  dw $2340
C2D35C:  dw $2280
C2D35E:  dw $2380
C2D360:  dw $22C0
C2D362:  dw $23C0

; Data - used by code in Bank C1
C2D364:  db $0E
C2D365:  db $2A
C2D366:  db $46
C2D367:  db $62

; Data - different parts indexed by various places in Bank C1
;(setup addresses for DMA transfer.  the code puts word C2/D368,X into 00/43n0
; Word C2/D368,X+2 into 00/43n2.  byte C2/D368,X+4 into 00/43n4.
; Then it manually puts #$7E into 00/43n7)
; Ex - first chunk below would have data copied from C2/D1F2 to 7E/0D43??
C2D368:  dw $0D43
C2D36A:  dw $D1F2
C2D36C:  db $C2
C2D36D:  dw $0F43
C2D36F:  dw $D225
C2D371:  db $C2
C2D372:  dw $1143
C2D374:  dw $D24B
C2D376:  db $C2
C2D377:  dw $0544
C2D379:  dw $D12E
C2D37B:  db $C2
C2D37C:  dw $2F44
C2D37E:  dw $D138
C2D380:  db $C2
C2D381:  dw $3141
C2D383:  dw $D149
C2D385:  db $C2
C2D386:  dw $0944
C2D388:  dw $D0F4
C2D38A:  db $C2
C2D38B:  dw $0544
C2D38D:  dw $D11E
C2D38F:  db $C2
C2D390:  dw $0944
C2D392:  dw $D10E
C2D394:  db $C2

; Data - setup for DMA transfer.  done in Bank C1.  see comments for D368
C2D395:  dw $2A44
C2D397:  dw $D0FE
C2D399:  db $C2

; Data - setup for DMA transfer.  done in Bank C1.  see comments for D368
C2D39A:  dw $2644
C2D39C:  dw $D13F
C2D39E:  db $C2

; 16-bit data called from a few places in bank C1.
C2D39F:  dw $0101
C2D3A1:  dw $0101
C2D3A3:  dw $0201
C2D3A5:  dw $0201
C2D3A7:  dw $0201
C2D3A9:  dw $0302
C2D3AB:  dw $0302
C2D3AD:  dw $0303
C2D3AF:  dw $0304
C2D3B1:  dw $0404
C2D3B3:  dw $0504
C2D3B5:  dw $0504
C2D3B7:  dw $0505
C2D3B9:  dw $0505
C2D3BB:  dw $0505
C2D3BD:  dw $0405
C2D3BF:  dw $0405
C2D3C1:  dw $0404
C2D3C3:  dw $0403
C2D3C5:  dw $0303
C2D3C7:  dw $0203
C2D3C9:  dw $0203
C2D3CB:  dw $0102
C2D3CD:  dw $0102
C2D3CF:  dw $0102
C2D3D1:  dw $0101
C2D3D3:  dw $0101

C2D3D5:  LDA #$00       ; 0
C2D3D7:  PHA
C2D3D8:  PLB            ; Data bank register now points to bank $00
C2D3D9:  STA $4200      ; ($004200)
C2D3DC:  LDX #$0000     ; 0
C2D3DF:  PHX            ; PEA would've worked...
C2D3E0:  PLD            ; Direct page register now points to bank $00, page $00
C2D3E1:  LDA #$80       ; -128
C2D3E3:  STA $2100      ; ($002100)
C2D3E6:  LDA #$61       ; 97
C2D3E8:  STA $2101      ; ($002101)
C2D3EB:  LDA #$80       ; -128
C2D3ED:  STA $2115      ; ($002115)
C2D3F0:  LDA #$00
C2D3F2:  TAX
C2D3F3:  STA $2113      ; ($002113)
C2D3F6:  STA $2113
C2D3F9:  STA $2114      ; ($002114)
C2D3FC:  STA $2114
C2D3FF:  STA $212E      ; ($00212E)
C2D402:  STA $212F      ; ($00212F)
C2D405:  STA $420B      ; ($00420B)
C2D408:  STA $420C      ; ($00420C)
C2D40B:  STA $2131      ; ($002131)
C2D40E:  STA $2133      ; ($002133)
C2D411:  STA $2130      ; ($002130)
C2D414:  STA $2128      ; ($002128)
C2D417:  STA $2129      ; ($002129)
C2D41A:  LDA #$C1       ; -63
C2D41C:  STA $1503      ; ($001503)
C2D41F:  LDA #$C1       ; A = -63 already!
C2D421:  STA $1507      ; ($001507)
C2D424:  LDX #$0BA7     ; 2,983
C2D427:  STX $1501      ; ($001501)
C2D42A:  LDX #$0D4A     ; 3,402
C2D42D:  STX $1505      ; ($001505)
C2D430:  LDA #$5C       ; 92
C2D432:  STA $1500      ; ($001500)
C2D435:  STA $1504      ; ($001504)
C2D438:  LDA #$01       ; 1
C2D43A:  STA $00420D    ; Do we really need a 24-bit address?
C2D43E:  LDA #$33       ; 51
C2D440:  STA $2123      ; ($002123)
C2D443:  STA $2124      ; ($002124)
C2D446:  STA $2125      ; ($002125)
C2D449:  LDA #$7E
C2D44B:  PHA
C2D44C:  PLB            ; Data bank register now points to bank $7E
C2D44D:  LDX #$0000
C2D450:  STZ $0000,X
C2D453:  INX
C2D454:  CPX #$009C     ; 156
C2D457:  BNE C2D450     ; -9
C2D459:  LDX #$6178     ; 24,952
C2D45C:  STZ $0000,X
C2D45F:  INX
C2D460:  CPX #$8D13     ; 36,115
C2D463:  BNE C2D45C     ; -9
C2D465:  TDC            ; A = 0
C2D466:  TAX            ; X = 0
C2D467:  STA $7E00,X
C2D46A:  INX
C2D46B:  CPX #$0200     ; 512
C2D46E:  BNE C2D467     ; -9
C2D470:  RTL

; Some 32-bit data called from C1/24B6 and C1/24BB.
C2D471:  dd $2400AE3F
C2D475:  dd $2500B03F
C2D479:  dd $2600B23F
C2D47D:  dd $2700B43F
C2D481:  dd $2800B63F
C2D485:  dd $2900B83F
C2D489:  dd $2A00BA3F
C2D48D:  dd $2B00BC3F
C2D491:  dd $2C00BE3F
C2D495:  dd $2D00C43F

; RAM palette 8 data.
C2D499:  dw $2529
C2D49B:  dw $0843
C2D49D:  dw $7FFE
C2D49F:  dw $7F32
C2D4A1:  dw $5A2A
C2D4A3:  dw $4544
C2D4A5:  dw $30A2
C2D4A7:  dw $56F2
C2D4A9:  dw $2A0A
C2D4AB:  dw $1121
C2D4AD:  dw $19D9
C2D4AF:  dw $10D2
C2D4B1:  dw $0C8A
C2D4B3:  dw $0EBD
C2D4B5:  dw $09F1
C2D4B7:  dw $050A

C2D4B9:  dw $2D6B
C2D4BB:  dw $0843
C2D4BD:  dw $5A2A
C2D4BF:  dw $7FFE
C2D4C1:  dw $7F32
C2D4C3:  dw $5A2A
C2D4C5:  dw $4544
C2D4C7:  dw $56F2
C2D4C9:  dw $2A0A
C2D4CB:  dw $1121
C2D4CD:  dw $19D9
C2D4CF:  dw $10D2
C2D4D1:  dw $0C8A
C2D4D3:  dw $0EBD
C2D4D5:  dw $09F1
C2D4D7:  dw $050A

C2D4D9:  dw $2D6B
C2D4DB:  dw $0843
C2D4DD:  dw $4544
C2D4DF:  dw $5A2A
C2D4E1:  dw $7FFE
C2D4E3:  dw $7F32
C2D4E5:  dw $5A2A
C2D4E7:  dw $56F2
C2D4E9:  dw $2A0A
C2D4EB:  dw $1121
C2D4ED:  dw $19D9
C2D4EF:  dw $10D2
C2D4F1:  dw $0C8A
C2D4F3:  dw $0EBD
C2D4F5:  dw $09F1
C2D4F7:  dw $050A

C2D4F9:  dw $2D6B
C2D4FB:  dw $0843
C2D4FD:  dw $5A2A
C2D4FF:  dw $4544
C2D501:  dw $5A2A
C2D503:  dw $7FFE
C2D505:  dw $7F32
C2D507:  dw $56F2
C2D509:  dw $2A0A
C2D50B:  dw $1121
C2D50D:  dw $19D9
C2D50F:  dw $10D2
C2D511:  dw $0C8A
C2D513:  dw $0EBD
C2D515:  dw $09F1
C2D517:  dw $050A

C2D519:  dw $2D6B
C2D51B:  dw $0843
C2D51D:  dw $6EF1
C2D51F:  dw $5A2A
C2D521:  dw $4544
C2D523:  dw $5A2A
C2D525:  dw $7FFE
C2D527:  dw $56F2
C2D529:  dw $2A0A
C2D52B:  dw $1121
C2D52D:  dw $19D9
C2D52F:  dw $10D2
C2D531:  dw $0C8A
C2D533:  dw $0EBD
C2D535:  dw $09F1
C2D537:  dw $050A

; Clip plane dynamics function.
C2D539:  LDA $961B      ; Load clip plane shape
C2D53C:  ASL
C2D53D:  TAX
C2D53E:  JMP (C2D541,X)

; Pointers chosen based on clip plane shape.
C2D541:  dw C2D777  	;Null - square?
C2D543:  dw C2D7AD  	;Circle
C2D545:  dw C2D812  	;Wavy
C2D547:  dw C2D6CD  	;Pillar
C2D549:  dw C2D627  	;Tall oval
C2D54B:  dw C2D818  	;Wavy in
C2D54D:  dw C2D6ED  	;Wide oval
C2D54F:  dw C2D553  	;Dome
C2D551:  dw C2D80C  	;Wavy out

; Called if clip plane shape is a dome.
C2D553:  LDX #$FE       ; -2
C2D555:  STZ $22
C2D557:  STZ $26
C2D559:  LDA $26        ; TDC?
C2D55B:  AND #$01
C2D55D:  BNE C2D58D     ; +46
C2D55F:  LDA $16
C2D561:  SEC
C2D562:  SBC $9E1F,Y
C2D565:  BCC C2D56B     ; +4
C2D567:  CMP #$08       ; 8
C2D569:  BCS C2D56D     ; +2
C2D56B:  LDA #$08       ; 8
C2D56D:  STA $002180
C2D571:  STA $961F,X
C2D574:  LDA $9E1F,Y
C2D577:  CLC
C2D578:  ADC $18
C2D57A:  BCS C2D580     ; +4
C2D57C:  CMP #$F7       ; -9
C2D57E:  BCC C2D582     ; +2
C2D580:  LDA #$F7       ; -9
C2D582:  STA $002180
C2D586:  STA $9620,X
C2D589:  DEX
C2D58A:  DEX
C2D58B:  BRA C2D5B1     ; +36

C2D58D:  LDA $16
C2D58F:  SEC
C2D590:  SBC $9E1F,Y
C2D593:  BCC C2D599     ; +4
C2D595:  CMP #$08       ; 8
C2D597:  BCS C2D59B     ; +2
C2D599:  LDA #$08       ; 8
C2D59B:  STA $961F,X
C2D59E:  LDA $9E1F,Y
C2D5A1:  CLC
C2D5A2:  ADC $18
C2D5A4:  BCS C2D5AA     ; +4
C2D5A6:  CMP #$F7       ; -9
C2D5A8:  BCC C2D5AC     ; +2
C2D5AA:  LDA #$F7       ; -9
C2D5AC:  STA $9620,X
C2D5AF:  DEX
C2D5B0:  DEX
C2D5B1:  INC $26
C2D5B3:  INY
C2D5B4:  CPY $12
C2D5B6:  BNE C2D559     ; -95
C2D5B8:  TDC
C2D5B9:  STA $9E1F,Y
C2D5BC:  DEY
C2D5BD:  LDA $9E1F,Y
C2D5C0:  DEC
C2D5C1:  STA $12
C2D5C3:  LDA $9E1F,Y
C2D5C6:  CMP $9E1E,Y
C2D5C9:  BEQ C2D621     ; +86
C2D5CB:  LDA $26
C2D5CD:  AND #$01
C2D5CF:  BNE C2D5FD     ; +44
C2D5D1:  LDA $16
C2D5D3:  SEC
C2D5D4:  SBC $12
C2D5D6:  BCC C2D5DC     ; +4
C2D5D8:  CMP #$08       ; 8
C2D5DA:  BCS C2D5DE     ; +2
C2D5DC:  LDA #$08       ; 8
C2D5DE:  STA $002180
C2D5E2:  STA $961F,X
C2D5E5:  LDA $12
C2D5E7:  CLC
C2D5E8:  ADC $18
C2D5EA:  BCS C2D5F0     ; +4
C2D5EC:  CMP #$F7       ; -9
C2D5EE:  BCC C2D5F2     ; +2
C2D5F0:  LDA #$F7       ; -9
C2D5F2:  STA $002180
C2D5F6:  STA $9620,X
C2D5F9:  DEX
C2D5FA:  DEX
C2D5FB:  BRA C2D61F     ; +34

C2D5FD:  LDA $16
C2D5FF:  SEC
C2D600:  SBC $12
C2D602:  BCC C2D608     ; +4
C2D604:  CMP #$08       ; 8
C2D606:  BCS C2D60A     ; +2
C2D608:  LDA #$08       ; 8
C2D60A:  STA $961F,X
C2D60D:  LDA $12
C2D60F:  CLC
C2D610:  ADC $18
C2D612:  BCS C2D618     ; +4
C2D614:  CMP #$F7       ; -9
C2D616:  BCC C2D61A     ; +2
C2D618:  LDA #$F7       ; -9
C2D61A:  STA $9620,X
C2D61D:  DEX
C2D61E:  DEX
C2D61F:  INC $26
C2D621:  DEC $12
C2D623:  DEY
C2D624:  BNE C2D5C3     ; -99
C2D626:  RTS

; Called if clip plane shape is a tall oval.
C2D627:  LDX #$FC       ; -4
C2D629:  LDA $16
C2D62B:  SEC
C2D62C:  SBC $9E1F,Y
C2D62F:  BCC C2D635     ; +4
C2D631:  CMP #$08       ; 8
C2D633:  BCS C2D637     ; +2
C2D635:  LDA #$08       ; 8
C2D637:  STA $002180
C2D63B:  STA $22
C2D63D:  STA $961F,X
C2D640:  STA $9621,X
C2D643:  LDA $9E1F,Y
C2D646:  CLC
C2D647:  ADC $18
C2D649:  BCS C2D64F     ; +4
C2D64B:  CMP #$F7       ; -9
C2D64D:  BCC C2D651     ; +2
C2D64F:  LDA #$F7       ; -9
C2D651:  STA $002180
C2D655:  STA $23
C2D657:  STA $9620,X
C2D65A:  STA $9622,X
C2D65D:  LDA $22
C2D65F:  STA $002180
C2D663:  LDA $23
C2D665:  STA $002180
C2D669:  DEX #4
C2D66D:  INY
C2D66E:  CPY $12
C2D670:  BNE C2D629     ; -73
C2D672:  TDC
C2D673:  STA $9E1F,Y
C2D676:  DEY
C2D677:  LDA $9E1F,Y
C2D67A:  DEC A
C2D67B:  STA $12
C2D67D:  LDA $9E1F,Y
C2D680:  CMP $9E1E,Y
C2D683:  BEQ C2D6C7     ; +66
C2D685:  LDA $16
C2D687:  SEC
C2D688:  SBC $12
C2D68A:  BCC C2D690     ; +4
C2D68C:  CMP #$08       ; 8
C2D68E:  BCS C2D692     ; +2
C2D690:  LDA #$08       ; 8
C2D692:  STA $002180
C2D696:  STA $22
C2D698:  STA $961F,X
C2D69B:  STA $9621,X
C2D69E:  LDA $12
C2D6A0:  CLC
C2D6A1:  ADC $18
C2D6A3:  BCS C2D6A9     ; +4
C2D6A5:  CMP #$F7       ; -9
C2D6A7:  BCC C2D6AB     ; +2
C2D6A9:  LDA #$F7       ; -9
C2D6AB:  STA $002180
C2D6AF:  STA $23
C2D6B1:  STA $9620,X
C2D6B4:  STA $9622,X
C2D6B7:  LDA $22
C2D6B9:  STA $002180
C2D6BD:  LDA $23
C2D6BF:  STA $002180
C2D6C3:  DEX #4
C2D6C7:  DEC $12
C2D6C9:  DEY
C2D6CA:  BNE C2D67D     ; -79
C2D6CC:  RTS

; Called if clip plane shape is a pillar.
C2D6CD:  JSR C2D777
C2D6D0:  REP #$20       ; 16-bit A
C2D6D2:  TDC            ; A = 0
C2D6D3:  TAX            ; X = 0
C2D6D4:  LDA $971F
C2D6D7:  STA $961F,X
C2D6DA:  STA $965F,X
C2D6DD:  STA $969F,X
C2D6E0:  STA $96DF,X
C2D6E3:  INX
C2D6E4:  INX
C2D6E5:  CPX #$40       ; 64
C2D6E7:  BNE C2D6D7     ; -18
C2D6E9:  TDC
C2D6EA:  SEP #$20       ; 8-bit A
C2D6EC:  RTS

; Called if clip plane shape is a wide oval.
C2D6ED:  LDX #$FE       ; -2
C2D6EF:  STZ $22
C2D6F1:  STZ $26
C2D6F3:  LDA $26
C2D6F5:  AND #$01
C2D6F7:  BNE C2D725     ; +44
C2D6F9:  LDA $16
C2D6FB:  SEC
C2D6FC:  SBC $9E1F,Y
C2D6FF:  BCC C2D705     ; +4
C2D701:  CMP #$08       ; 8
C2D703:  BCS C2D707     ; +2
C2D705:  LDA #$08       ; 8
C2D707:  STA $002180
C2D70B:  STA $961F,X
C2D70E:  LDA $9E1F,Y
C2D711:  CLC
C2D712:  ADC $18
C2D714:  BCS C2D71A     ; +4
C2D716:  CMP #$F7       ; -9
C2D718:  BCC C2D71C     ; +2
C2D71A:  LDA #$F7       ; -9
C2D71C:  STA $002180
C2D720:  STA $9620,X
C2D723:  DEX
C2D724:  DEX
C2D725:  INC $26
C2D727:  INY
C2D728:  CPY $12
C2D72A:  BNE C2D6F3     ; -57
C2D72C:  TDC
C2D72D:  STA $9E1F,Y
C2D730:  DEY
C2D731:  LDA $9E1F,Y
C2D734:  DEC
C2D735:  STA $12
C2D737:  LDA $9E1F,Y    ; INC would've worked...
C2D73A:  CMP $9E1E,Y
C2D73D:  BEQ C2D771     ; +50
C2D73F:  LDA $26
C2D741:  AND #$01
C2D743:  BNE C2D76F     ; +42
C2D745:  LDA $16
C2D747:  SEC
C2D748:  SBC $12
C2D74A:  BCC C2D750     ; +4
C2D74C:  CMP #$08       ; 8
C2D74E:  BCS C2D752     ; +2
C2D750:  LDA #$08       ; 8
C2D752:  STA $002180
C2D756:  STA $961F,X
C2D759:  LDA $12
C2D75B:  CLC
C2D75C:  ADC $18
C2D75E:  BCS C2D764     ; +4
C2D760:  CMP #$F7       ; -9
C2D762:  BCC C2D766     ; +2
C2D764:  LDA #$F7       ; -9
C2D766:  STA $002180
C2D76A:  STA $9620,X
C2D76D:  DEX
C2D76E:  DEX
C2D76F:  INC $26
C2D771:  DEC $12
C2D773:  DEY
C2D774:  BNE C2D737     ; -63
C2D776:  RTS

; Called if clip plane shape has been reset.
C2D777:  LDX #$FE       ; -2
C2D779:  LDA $16
C2D77B:  SEC
C2D77C:  SBC $9E1F,Y
C2D77F:  BCC C2D785     ; +4
C2D781:  CMP #$08       ; 8
C2D783:  BCS C2D787     ; +2
C2D785:  LDA #$08       ; 8
C2D787:  STA $002180
C2D78B:  STA $961F,X
C2D78E:  LDA $9E1F,Y
C2D791:  CLC
C2D792:  ADC $18
C2D794:  BCS C2D79A     ; +4
C2D796:  CMP #$F7       ; -9
C2D798:  BCC C2D79C     ; +2
C2D79A:  LDA #$F7       ; -9
C2D79C:  STA $002180
C2D7A0:  STA $9620,X
C2D7A3:  DEX
C2D7A4:  DEX
C2D7A5:  INY
C2D7A6:  CPY $12
C2D7A8:  BNE C2D779     ; -49
C2D7AA:  JMP C2D86E

; Called if clip plane shape is a circle.
C2D7AD:  LDX #$FE       ; -2
C2D7AF:  LDA $961A
C2D7B2:  CLC
C2D7B3:  ADC #$02       ; Why not INC x2?
C2D7B5:  STA $26
C2D7B7:  STA $961A
C2D7BA:  LDA $26
C2D7BC:  CLC
C2D7BD:  ADC #$04       ; 4
C2D7BF:  STA $26
C2D7C1:  PHX
C2D7C2:  JSR C2DD1D
C2D7C5:  STA $18
C2D7C7:  STA $16
C2D7C9:  LDA $1A
C2D7CB:  CLC
C2D7CC:  ADC $18
C2D7CE:  STA $18
C2D7D0:  LDA $1A
C2D7D2:  CLC
C2D7D3:  ADC $16
C2D7D5:  STA $16
C2D7D7:  PLX
C2D7D8:  LDA $16
C2D7DA:  SEC
C2D7DB:  SBC $9E1F,Y
C2D7DE:  BCC C2D7E4     ; +4
C2D7E0:  CMP #$08       ; 8
C2D7E2:  BCS C2D7E6     ; +2
C2D7E4:  LDA #$08       ; 8
C2D7E6:  STA $002180
C2D7EA:  STA $961F,X
C2D7ED:  LDA $9E1F,Y
C2D7F0:  CLC
C2D7F1:  ADC $18
C2D7F3:  BCS C2D7F9     ; +4
C2D7F5:  CMP #$F7       ; -9
C2D7F7:  BCC C2D7FB     ; +2
C2D7F9:  LDA #$F7       ; -9
C2D7FB:  STA $002180
C2D7FF:  STA $9620,X
C2D802:  DEX
C2D803:  DEX
C2D804:  INY
C2D805:  CPY $12
C2D807:  BNE C2D7BA
C2D809:  JMP C2D86E     ; BRA would've worked...

; Called if clip plane shape is wavy out.
C2D80C:  JSR C2D81E
C2D80F:  JMP C2D9DE

; Called if clip plane shape is wavy.
C2D812:  JSR C2D81E
C2D815:  JMP C2DA04

; Called if clip plane shape is wavy in.
C2D818:  JSR C2D81E
C2D81B:  JMP C2D9F1

; Called from C2/D80C, C2/D812 and C2/D818.
C2D81E:  LDX #$FE       ; -2
C2D820:  LDA #$00       ; 0
C2D822:  SEC
C2D823:  SBC $9E1F,Y
C2D826:  STA $002180
C2D82A:  STA $961F,X
C2D82D:  LDA $9E1F,Y
C2D830:  STA $002180
C2D834:  STA $9620,X
C2D837:  DEX
C2D838:  DEX
C2D839:  INY
C2D83A:  CPY $12
C2D83C:  BNE C2D820     ; -30
C2D83E:  TDC
C2D83F:  STA $9E1F,Y
C2D842:  DEY
C2D843:  LDA $9E1F,Y
C2D846:  DEC
C2D847:  STA $12
C2D849:  LDA $9E1F,Y
C2D84C:  CMP $9E1E,Y
C2D84F:  BEQ C2D868     ; +23
C2D851:  LDA #$00       ; 0
C2D853:  SEC
C2D854:  SBC $12
C2D856:  STA $002180
C2D85A:  STA $961F,X
C2D85D:  LDA $12
C2D85F:  STA $002180
C2D863:  STA $9620,X
C2D866:  DEX
C2D867:  DEX
C2D868:  DEC $12
C2D86A:  DEY
C2D86B:  BNE C2D849     ; -36
C2D86D:  RTS

C2D86E:  TDC            ; A = 0
C2D86F:  STA $9E1F,Y
C2D872:  DEY
C2D873:  LDA $9E1F,Y
C2D876:  DEC
C2D877:  STA $12
C2D879:  LDA $9E1F,Y    ; INC would've worked...
C2D87C:  CMP $9E1E,Y
C2D87F:  BEQ C2D8AB     ; +42
C2D881:  LDA $16
C2D883:  SEC
C2D884:  SBC $12
C2D886:  BCC C2D88C     ; +4
C2D888:  CMP #$08       ; 8
C2D88A:  BCS C2D88E     ; +2
C2D88C:  LDA #$08       ; 8
C2D88E:  STA $002180
C2D892:  STA $961F,X
C2D895:  LDA $12
C2D897:  CLC
C2D898:  ADC $18
C2D89A:  BCS C2D8A0     ; +4
C2D89C:  CMP #$F7       ; -9
C2D89E:  BCC C2D8A2     ; +2
C2D8A0:  LDA #$F7       ; -9
C2D8A2:  STA $002180
C2D8A6:  STA $9620,X
C2D8A9:  DEX
C2D8AA:  DEX
C2D8AB:  DEC $12
C2D8AD:  DEY
C2D8AE:  BNE C2D879     ; -55
C2D8B0:  RTS

C2D8B1:  TDC            ; A = 0
C2D8B2:  TAX            ; X = 0
C2D8B3:  REP #$20       ; 16-bit A
C2D8B5:  SEP #$10       ; 8-bit X & Y
C2D8B7:  LDA #$00FF
C2D8BA:  STA $961F,X
C2D8BD:  STA $965F,X
C2D8C0:  STA $969F,X
C2D8C3:  STA $96DF,X
C2D8C6:  STA $971F,X
C2D8C9:  STA $975F,X
C2D8CC:  STA $979F,X
C2D8CF:  STA $97DF,X
C2D8D2:  INX
C2D8D3:  INX
C2D8D4:  CPX #$40
C2D8D6:  BNE C2D8BA     ; -30
C2D8D8:  REP #$10       ; 16-bit X & Y
C2D8DA:  SEP #$20       ; 8-bit A
C2D8DC:  RTS

C2D8DD:  JSR C2D8E1
C2D8E0:  RTL

C2D8E1:  JSR C2D8B1
C2D8E4:  LDA $9613      ; Clip plane width
C2D8E7:  AND #$7F
C2D8E9:  BNE C2D8EC     ; +1
C2D8EB:  RTS

C2D8EC:  SEP #$10       ; 8-bit X & Y
C2D8EE:  STA $14
C2D8F0:  STA $1E
C2D8F2:  LDA $9614      ; Clip plane X-coordinate
C2D8F5:  STA $1A
C2D8F7:  STZ $20
C2D8F9:  LDA $9619
C2D8FC:  STA $24
C2D8FE:  LDA $961B      ; Load clip plane shape
C2D901:  CMP #$08       ; Branch if not a dome...
C2D903:  BEQ C2D90D     ; +8
C2D905:  CMP #$05       ; ...wavy in...
C2D907:  BEQ C2D90D     ; +4
C2D909:  CMP #$02       ; ...or wavy
C2D90B:  BNE C2D922     ; +21
C2D90D:  LDA $14
C2D90F:  STA $24
C2D911:  LDA $961A
C2D914:  JSR C2DD1D
C2D917:  STA $24
C2D919:  LDA $14
C2D91B:  CLC
C2D91C:  ADC $24
C2D91E:  STA $14
C2D920:  STA $1E
C2D922:  TDC            ; A = 0
C2D923:  TAY            ; Y = 0
C2D924:  DEC            ; A = -1
C2D925:  STA $12
C2D927:  LDA $1E
C2D929:  CMP $20
C2D92B:  BCC C2D950     ; +35
C2D92D:  STA $9E1F,Y
C2D930:  LDA $20
C2D932:  ASL A
C2D933:  DEC A
C2D934:  STA $10
C2D936:  INY
C2D937:  INC $20
C2D939:  LDA $14
C2D93B:  SEC
C2D93C:  SBC $10
C2D93E:  STA $14
C2D940:  CMP $12
C2D942:  BCC C2D925     ; -31
C2D944:  DEC $1E
C2D946:  LDA $1E
C2D948:  ASL
C2D949:  CLC
C2D94A:  ADC $14
C2D94C:  STA $14
C2D94E:  BRA C2D925     ; -43
C2D950:  STY $12
C2D952:  LDA #$1F       ; 31
C2D954:  STA $002181
C2D958:  LDA #$97       ; -105
C2D95A:  STA $002182
C2D95E:  LDA #$7E       ; 126
C2D960:  STA $002183
C2D964:  TDC            ; A = 0
C2D965:  TAY            ; Y = 0
C2D966:  LDA $1A
C2D968:  STA $16
C2D96A:  STA $18
C2D96C:  JSR C2D539
C2D96F:  REP #$10       ; 16-bit X & Y
C2D971:  LDA $9615      ; Clip plane Y-coordinate
C2D974:  CMP #$81       ; 129
C2D976:  BCC C2D9A3     ; +43
C2D978:  SEC            ; Carry bit already set...
C2D979:  SBC #$80       ; 128
C2D97B:  BEQ C2D9A3     ; +38
C2D97D:  REP #$20       ; 16-bit A
C2D97F:  ASL
C2D980:  ASL
C2D981:  STA $22
C2D983:  TDC            ; A = 0
C2D984:  TAX            ; X = 0
C2D985:  LDA $961B      ; Load clip plane shape
C2D988:  AND #$00FF
C2D98B:  CMP #$0003     ; Branch if not a pillar
C2D98E:  BNE C2D995     ; +5
C2D990:  LDA $961F
C2D993:  BRA C2D998     ; +3
C2D995:  LDA #$00FF
C2D998:  STA $9A21,X
C2D99B:  INX
C2D99C:  INX
C2D99D:  INX
C2D99E:  INX
C2D99F:  CPX $22
C2D9A1:  BNE C2D998     ; -11
C2D9A3:  LDA $9615      ; Clip plane Y-coordinate
C2D9A6:  REP #$20       ; 16-bit A
C2D9A8:  AND #$00FF
C2D9AB:  ASL
C2D9AC:  ASL
C2D9AD:  TAX
C2D9AE:  TDC            ; A = 0
C2D9AF:  TAY            ; Y = 0
C2D9B0:  LDA $961F,Y
C2D9B3:  STA $9821,X
C2D9B6:  INY
C2D9B7:  INY
C2D9B8:  CPY #$0200     ; 512
C2D9BB:  BNE C2D9CE     ; +17
C2D9BD:  LDA #$00FF
C2D9C0:  STA $9821,X
C2D9C3:  INX #4
C2D9C7:  CPX #$045C     ; 1,116
C2D9CA:  BNE C2D9C0     ; -12
C2D9CC:  BRA C2D9D7     ; +9
C2D9CE:  INX #4
C2D9D2:  CPX #$045C     ; 1,116
C2D9D5:  BNE C2D9B0     ; -39
C2D9D7:  TDC
C2D9D8:  SEP #$20       ; 8-bit A
C2D9DA:  INC $6197
C2D9DD:  RTS

; Called from C2/D80F.
C2D9DE:  REP #$10       ; 16-bit X & Y
C2D9E0:  LDA #$08       ; 8
C2D9E2:  STA $961C
C2D9E5:  LDA #$10       ; Wouldn't ASL also work?
C2D9E7:  STA $961E
C2D9EA:  LDA #$04       ; 4
C2D9EC:  STA $961D
C2D9EF:  BRA C2DA15     ; +36

; Called from C2/D81B.
C2D9F1:  REP #$10       ; 16-bit X & Y
C2D9F3:  LDA #$04       ; 4
C2D9F5:  STA $961C
C2D9F8:  LDA #$0A       ; 10
C2D9FA:  STA $961E
C2D9FD:  LDA #$08       ; 8
C2D9FF:  STA $961D
C2DA02:  BRA C2DA15     ; +17

; Called from C2/D815.
C2DA04:  REP #$10
C2DA06:  LDA #$08       ; 8
C2DA08:  STA $961C
C2DA0B:  LDA #$20       ; 32
C2DA0D:  STA $961E
C2DA10:  LDA #$04       ; 4
C2DA12:  STA $961D
C2DA15:  LDA $961A
C2DA18:  CLC
C2DA19:  ADC $961C
C2DA1C:  STA $961A
C2DA1F:  STA $26
C2DA21:  LDA $961E
C2DA24:  STA $24
C2DA26:  LDA $961D
C2DA29:  STA $28
C2DA2B:  TDC            ; A = 0
C2DA2C:  TAY            ; Y = 0
C2DA2D:  LDA $26
C2DA2F:  CLC
C2DA30:  ADC $28
C2DA32:  STA $26
C2DA34:  LDA $9620,Y
C2DA37:  BEQ C2DA65
C2DA39:  LDA $26
C2DA3B:  JSR C2DD1D
C2DA3E:  CLC
C2DA3F:  ADC $16
C2DA41:  STA $22
C2DA43:  LDA $961F,Y
C2DA46:  CLC
C2DA47:  ADC $22        ; Could've used ADC $961F,Y instead...
C2DA49:  BCC C2DA4F     ; +4
C2DA4B:  CMP #$08       ; 8
C2DA4D:  BCS C2DA51     ; +2
C2DA4F:  LDA #$08       ; 8
C2DA51:  STA $961F,Y
C2DA54:  LDA $9620,Y
C2DA57:  CLC
C2DA58:  ADC $22
C2DA5A:  BCS C2DA60     ; +4
C2DA5C:  CMP #$F7
C2DA5E:  BCC C2DA62     ; +2
C2DA60:  LDA #$F7
C2DA62:  STA $9620,Y
C2DA65:  INY
C2DA66:  INY
C2DA67:  CPY #$0200     ; 512
C2DA6A:  BNE C2DA2D     ; -63
C2DA6C:  RTS

C2DA6D:  JSR C2DA71
C2DA70:  RTL

C2DA71:  JSR C2D8B1
C2DA74:  LDA $615C
C2DA77:  CMP $615E
C2DA7A:  BEQ C2DA9C     ; +32
C2DA7C:  BCC C2DA9C     ; +30
C2DA7E:  LDA $6160
C2DA81:  CMP $615E
C2DA84:  BEQ C2DAA3     ; +29
C2DA86:  BCC C2DAA3     ; +27
C2DA88:  LDX $615B
C2DA8B:  STX $6165
C2DA8E:  LDX $615D
C2DA91:  STX $6161
C2DA94:  LDX $615F
C2DA97:  STX $6163
C2DA9A:  BRA C2DAC9     ; +45
C2DA9C:  CMP $6160
C2DA9F:  BEQ C2DAB7     ; +22
C2DAA1:  BCC C2DAB7     ; +20
C2DAA3:  LDX $615F
C2DAA6:  STX $6161
C2DAA9:  LDX $615B
C2DAAC:  STX $6163
C2DAAF:  LDX $615D
C2DAB2:  STX $6165
C2DAB5:  BRA C2DAC9     ; +18
C2DAB7:  LDX $615B
C2DABA:  STX $6161
C2DABD:  LDX $615D
C2DAC0:  STX $6163
C2DAC3:  LDX $615F
C2DAC6:  STX $6165
C2DAC9:  LDA $6163
C2DACC:  CMP $6165
C2DACF:  BEQ C2DAE1     ; +16
C2DAD1:  BCC C2DAE1     ; +14
C2DAD3:  LDX $6163
C2DAD6:  PHX
C2DAD7:  LDX $6165
C2DADA:  STX $6163
C2DADD:  PLX
C2DADE:  STX $6165
C2DAE1:  LDX $6161
C2DAE4:  STX $614C
C2DAE7:  LDX $6163
C2DAEA:  STX $614E
C2DAED:  JSL C2DCC8
C2DAF1:  LDA $6161
C2DAF4:  STA $1E
C2DAF6:  LDA $6162
C2DAF9:  STA $20
C2DAFB:  JSR C2DB6A
C2DAFE:  LDX $6161
C2DB01:  STX $614C
C2DB04:  LDX $6165
C2DB07:  STX $614E
C2DB0A:  JSL C2DCC8
C2DB0E:  LDA $6161
C2DB11:  STA $1E
C2DB13:  LDA $6162
C2DB16:  STA $20
C2DB18:  JSR C2DC19
C2DB1B:  LDA $6164
C2DB1E:  CMP $6166
C2DB21:  BEQ C2DB44     ; +33
C2DB23:  BCC C2DB44     ; +31
C2DB25:  LDX $6165
C2DB28:  STX $614C
C2DB2B:  LDX $6163
C2DB2E:  STX $614E
C2DB31:  JSL C2DCC8
C2DB35:  LDA $6165
C2DB38:  STA $1E
C2DB3A:  LDA $6166
C2DB3D:  STA $20
C2DB3F:  JSR C2DC19
C2DB42:  BRA C2DB61     ; +29
C2DB44:  LDX $6163
C2DB47:  STX $614C
C2DB4A:  LDX $6165
C2DB4D:  STX $614E
C2DB50:  JSL C2DCC8
C2DB54:  LDA $6163
C2DB57:  STA $1E
C2DB59:  LDA $6164
C2DB5C:  STA $20
C2DB5E:  JSR C2DB6A
C2DB61:  LDA $6155      ; Animation Y-coordinate in Mode 7
C2DB64:  STA $9615      ; Clip plane Y-coordinate
C2DB67:  JMP C2D96F

C2DB6A:  LDA $6154      ; Animation X-coordinate in Mode 7
C2DB6D:  STA $10
C2DB6F:  BMI C2DB75     ; +4
C2DB71:  LDA #$08
C2DB73:  BRA C2DB77     ; +2
C2DB75:  LDA #$F7
C2DB77:  STA $14
C2DB79:  STZ $11
C2DB7B:  STZ $15
C2DB7D:  STZ $1F
C2DB7F:  LDA $20
C2DB81:  REP #$20       ; 16-bit A
C2DB83:  ASL
C2DB84:  TAY
C2DB85:  LDA $10
C2DB87:  SEC
C2DB88:  SBC #$0080     ; 128
C2DB8B:  STA $10
C2DB8D:  TDC
C2DB8E:  SEP #$20       ; 8-bit A
C2DB90:  LDX $6152
C2DB93:  STX $22
C2DB95:  STX $24
C2DB97:  LDA $23
C2DB99:  BNE C2DB9C     ; +1
C2DB9B:  RTS

C2DB9C:  LDA $6150
C2DB9F:  BMI C2DBDD     ; +60
C2DBA1:  LDA $24
C2DBA3:  CMP $23
C2DBA5:  BCC C2DBAE     ; +7
C2DBA7:  SEC            ; Carry bit should be set already...
C2DBA8:  SBC $23
C2DBAA:  INC $1E
C2DBAC:  BRA C2DBA3     ; -11
C2DBAE:  CLC
C2DBAF:  ADC $22
C2DBB1:  STA $24
C2DBB3:  REP #$20       ; 16-bit A
C2DBB5:  LDA $1E
C2DBB7:  CLC
C2DBB8:  ADC $10
C2DBBA:  CMP #$0009     ; 9
C2DBBD:  BCC C2DBC4     ; +5
C2DBBF:  CMP #$00F8     ; 248
C2DBC2:  BCC C2DBC6     ; +2
C2DBC4:  LDA $14
C2DBC6:  STA $12
C2DBC8:  TDC
C2DBC9:  SEP #$20       ; 8-bit A
C2DBCB:  LDA $12
C2DBCD:  CMP $9620,Y
C2DBD0:  BNE C2DBD3     ; +1
C2DBD2:  INC
C2DBD3:  STA $961F,Y
C2DBD6:  INY
C2DBD7:  INY
C2DBD8:  DEC $25
C2DBDA:  BNE C2DBA1     ; -59
C2DBDC:  RTS

C2DBDD:  LDA $24
C2DBDF:  CMP $23
C2DBE1:  BCC C2DBEA     ; +7
C2DBE3:  SEC
C2DBE4:  SBC $23
C2DBE6:  DEC $1E
C2DBE8:  BRA C2DBDF     ; -11
C2DBEA:  CLC
C2DBEB:  ADC $22
C2DBED:  STA $24
C2DBEF:  REP #$20       ; 16-bit A
C2DBF1:  LDA $1E
C2DBF3:  CLC
C2DBF4:  ADC $10
C2DBF6:  CMP #$0009     ; 9
C2DBF9:  BCC C2DC00     ; +5
C2DBFB:  CMP #$00F8     ; 248
C2DBFE:  BCC C2DC02     ; +2
C2DC00:  LDA $14
C2DC02:  STA $12
C2DC04:  TDC
C2DC05:  SEP #$20       ; 8-bit A
C2DC07:  LDA $12
C2DC09:  CMP $9620,Y
C2DC0C:  BNE C2DC0F     ; +1
C2DC0E:  INC
C2DC0F:  STA $961F,Y
C2DC12:  INY
C2DC13:  INY
C2DC14:  DEC $25
C2DC16:  BNE C2DBDD     ; -59
C2DC18:  RTS

C2DC19:  LDA $6154      ; Animation X-coordinate in Mode 7
C2DC1C:  STA $10
C2DC1E:  BMI C2DC24     ; +4
C2DC20:  LDA #$08
C2DC22:  BRA C2DC26     ; +2
C2DC24:  LDA #$F7
C2DC26:  STA $14
C2DC28:  STZ $15
C2DC2A:  STZ $11
C2DC2C:  STZ $1F
C2DC2E:  LDA $20
C2DC30:  REP #$20       ; 16-bit A
C2DC32:  ASL
C2DC33:  TAY
C2DC34:  LDA $10
C2DC36:  SEC
C2DC37:  SBC #$0080     ; 128
C2DC3A:  STA $10
C2DC3C:  TDC
C2DC3D:  SEP #$20       ; 8-bit A
C2DC3F:  LDX $6152
C2DC42:  STX $22
C2DC44:  STX $24
C2DC46:  LDA $23
C2DC48:  BNE C2DC4B     ; +1
C2DC4A:  RTS

C2DC4B:  LDA $6150
C2DC4E:  BMI C2DC8C     ; +60
C2DC50:  LDA $24
C2DC52:  CMP $23
C2DC54:  BCC C2DC5D     ; +7
C2DC56:  SEC            ; Carry bit should be set already...
C2DC57:  SBC $23
C2DC59:  INC $1E
C2DC5B:  BRA C2DC52     ; -11
C2DC5D:  CLC
C2DC5E:  ADC $22
C2DC60:  STA $24
C2DC62:  REP #$20       ; 16-bit A
C2DC64:  LDA $1E
C2DC66:  CLC
C2DC67:  ADC $10
C2DC69:  CMP #$0009     ; 9
C2DC6C:  BCC C2DC73     ; +5
C2DC6E:  CMP #$00F8     ; 248
C2DC71:  BCC C2DC75     ; +2
C2DC73:  LDA $14
C2DC75:  STA $12
C2DC77:  TDC
C2DC78:  SEP #$20       ; 8-bit A
C2DC7A:  LDA $12
C2DC7C:  CMP $961F,Y
C2DC7F:  BNE C2DC82     ; +1
C2DC81:  DEC
C2DC82:  STA $9620,Y
C2DC85:  INY
C2DC86:  INY
C2DC87:  DEC $25
C2DC89:  BNE C2DC50     ; -59
C2DC8B:  RTS

C2DC8C:  LDA $24
C2DC8E:  CMP $23
C2DC90:  BCC C2DC99     ; +7
C2DC92:  SEC
C2DC93:  SBC $23
C2DC95:  DEC $1E
C2DC97:  BRA C2DC8E     ; -11
C2DC99:  CLC
C2DC9A:  ADC $22
C2DC9C:  STA $24
C2DC9E:  REP #$20       ; 16-bit A
C2DCA0:  LDA $1E
C2DCA2:  CLC
C2DCA3:  ADC $10
C2DCA5:  CMP #$0009     ; 9
C2DCA8:  BCC C2DCAF     ; +5
C2DCAA:  CMP #$00F8     ; 248
C2DCAD:  BCC C2DCB1     ; +2
C2DCAF:  LDA $14
C2DCB1:  STA $12
C2DCB3:  TDC
C2DCB4:  SEP #$20       ; 8-bit A
C2DCB6:  LDA $12
C2DCB8:  CMP $961F,Y
C2DCBB:  BNE C2DCBE     ; +1
C2DCBD:  DEC
C2DCBE:  STA $9620,Y
C2DCC1:  INY
C2DCC2:  INY
C2DCC3:  DEC $25
C2DCC5:  BNE C2DC8C     ; -59
C2DCC7:  RTS

C2DCC8:  TDC            ; A = 0
C2DCC9:  TAX            ; X = 0
C2DCCA:  STX $6150
C2DCCD:  STX $6152
C2DCD0:  LDA $614C
C2DCD3:  CMP $614E
C2DCD6:  BEQ C2DCF6     ; +30
C2DCD8:  BCC C2DCE9     ; +15
C2DCDA:  DEC $6150
C2DCDD:  LDA $614C
C2DCE0:  SEC
C2DCE1:  SBC $614E
C2DCE4:  STA $6152
C2DCE7:  BRA C2DCF6     ; +13
C2DCE9:  INC $6150
C2DCEC:  LDA $614E
C2DCEF:  SEC
C2DCF0:  SBC $614C
C2DCF3:  STA $6152
C2DCF6:  LDA $614D
C2DCF9:  CMP $614F
C2DCFC:  BEQ C2DD1C     ; +30
C2DCFE:  BCC C2DD0F     ; +15
C2DD00:  DEC $6151
C2DD03:  LDA $614D
C2DD06:  SEC
C2DD07:  SBC $614F
C2DD0A:  STA $6153
C2DD0D:  BRA C2DD1C     ; +13
C2DD0F:  INC $6151
C2DD12:  LDA $614F
C2DD15:  SEC
C2DD16:  SBC $614D
C2DD19:  STA $6153
C2DD1C:  RTL

C2DD1D:  TAX
C2DD1E:  LDA C2FE6D,X
C2DD22:  BPL C2DD3E     ; +26
C2DD24:  EOR #$FF
C2DD26:  STA $004202
C2DD2A:  LDA $24
C2DD2C:  STA $004203
C2DD30:  LDA #$FF       ; -1
C2DD32:  STA $67
C2DD34:  STA $67
C2DD36:  LDA $004217
C2DD3A:  EOR #$FF
C2DD3C:  INC
C2DD3D:  RTS

C2DD3E:  STA $004202
C2DD42:  LDA $24
C2DD44:  STA $004203
C2DD48:  LDA #$00       ; 0
C2DD4A:  STA $67
C2DD4C:  STA $67
C2DD4E:  LDA $004217
C2DD52:  RTS

; Animation script command 80 70.
C2DD53:  REP #$20       ; 16-bit A
C2DD55:  TDC            ; A = 0
C2DD56:  TAX            ; X = 0
C2DD57:  SEP #$10       ; 8-bit X & Y
C2DD59:  LDA $7B24
C2DD5C:  SEC
C2DD5D:  SBC $7B2B
C2DD60:  STA $4AF7,X
C2DD63:  INX #4
C2DD67:  CPX #$80
C2DD69:  BNE C2DD60     ; -11
C2DD6B:  TDC
C2DD6C:  SEP #$20       ; 8-bit A
C2DD6E:  REP #$10       ; 16-bit X & Y
C2DD70:  RTL

; Animation script command 80 6E.
C2DD71:  TDC            ; A = 0
C2DD72:  TAX            ; X = 0
C2DD73:  STZ $22
C2DD75:  LDA $63B0,X
C2DD78:  CLC
C2DD79:  ADC $23
C2DD7B:  STA $63B0,X
C2DD7E:  LDA $22
C2DD80:  CLC
C2DD81:  ADC $26
C2DD83:  STA $22
C2DD85:  INX #4
C2DD89:  BNE C2DD75     ; -22
C2DD8B:  RTL

; 16-bit data called from C1/5377.
C2DD8C:  dw $7000
C2DD8E:  dw $7140
C2DD90:  dw $7600
C2DD92:  dw $7300
C2DD94:  dw $7400
C2DD96:  dw $7500
C2DD98:  dw $7700
C2DD9A:  dw $6800
C2DD9C:  dw $6900

; 32-bit data called from C1/53AC.
C2DD9E:  dd $8D15080C
C2DDA2:  dd $8D2D0812
C2DDA6:  dd $8D17080A
C2DDAA:  dd $8D15081E
C2DDAE:  dd $8D15081E
C2DDB2:  dd $8D3F0809
C2DDB6:  dd $8D15051E
C2DDBA:  dd $8D150815
C2DDBE:  dd $8D15041E
C2DDC2:  dd $8D130407
C2DDC6:  dd $8D13050C
C2DDCA:  dd $A9C1041E
C2DDCE:  dd $A9CD0412
C2DDD2:  dd $8D170713
C2DDD6:  dd $8D17080C

; 64-bit data?! This is called from a few places in a function located at C1/5165.
C2DDDA:  dd $4D514E75 : dd $00000008
C2DDE2:  dd $4D514F75 : dd $00000008
C2DDEA:  dd $4D6151D5 : dd $00000008
C2DDF2:  dd $4D6153D5 : dd $00000005
C2DDFA:  dd $4D615475 : dd $00000006
C2DE02:  dd $4D514F75 : dd $00000005
C2DE0A:  dd $4D714F95 : dd $00000005
C2DE12:  dd $4DA14FC5 : dd $00000005
C2DE1A:  dd $4DD14FF5 : dd $00000005
C2DE22:  dd $4D514F75 : dd $00000006
C2DE2A:  dd $4D715095 : dd $00000008

; Back to 32-bit data... This is called from a few places in a function located at C1/50FB.
C2DE32:  dd $0008025C
C2DE36:  dd $0008025C
C2DE3A:  dd $0008026C
C2DE3E:  dd $0008026C
C2DE42:  dd $0008026C
C2DE46:  dd $0005027C
C2DE4A:  dd $0008026C
C2DE4E:  dd $0005027C
C2DE52:  dd $0004027C
C2DE56:  dd $0004027C
C2DE5A:  dd $0004025C
C2DE5E:  dd $0004028C
C2DE62:  dd $000402BC
C2DE66:  dd $000402EC
C2DE6A:  dd $0004025C
C2DE6E:  dd $0004028C
C2DE72:  dd $000402BC
C2DE76:  dd $000402EC
C2DE7A:  dd $0005026C
C2DE7E:  dd $0005026C
C2DE82:  dd $0008026C
C2DE86:  dd $0008026C
C2DE8A:  dd $0007025C
C2DE8E:  dd $0004025C
C2DE92:  dd $0004025C
C2DE96:  dd $0008027C
C2DE9A:  dd $0008027C
C2DE9E:  dd $0008027C

C2DEA2:  dd $00680000
C2DEA6:  dd $00B80000
C2DEAA:  dd $00E40100
C2DEAE:  dd $01240000
C2DEB2:  dd $00640100
C2DEB6:  dd $00A00100
C2DEBA:  dd $00B80000
C2DEBE:  dd $01240000
C2DEC2:  dd $01200100
C2DEC6:  dd $00640100
C2DECA:  dd $FF68FFF8
C2DECE:  dd $FF5CFFF8
C2DED2:  dd $FF50FFF8
C2DED6:  dd $FF44FFF8
C2DEDA:  dd $00000000
C2DEDE:  dd $00000000
C2DEE2:  dd $00000000
C2DEE6:  dd $00000000
C2DEEA:  dd $FFA4FFF0
C2DEEE:  dd $00000000
C2DEF2:  dd $01240000
C2DEF6:  dd $00680000
C2DEFA:  dd $00B80000
C2DEFE:  dd $FF68FFF0
C2DF02:  dd $00000000
C2DF06:  dd $00600000
C2DF0A:  dd $01240000
C2DF0E:  dd $00640100

; This 32-bit data is used at C1/4E7E. The rightmost byte in each line is unused. Appears to be location data for drawing battle menus.
C2DF12:  dd $000C5AD5
C2DF16:  dd $00075B95
C2DF1A:  dd $00045C05
C2DF1E:  dd $00065C45
C2DF22:  dd $00205859
C2DF26:  dd $00208D61
C2DF2A:  dd $00205E4D
C2DF2E:  dd $00075CA5
C2DF32:  dd $00075D3F
C2DF36:  dd $00075D85
C2DF3A:  dd $00075CA5
C2DF3E:  dd $00075CC1
C2DF42:  dd $00075CDD
C2DF46:  dd $00075CF9
C2DF4A:  dd $00045C05
C2DF4E:  dd $00045C15
C2DF52:  dd $00045C25
C2DF56:  dd $00045C35
C2DF5A:  dd $00065C45
C2DF5E:  dd $00065C5D
C2DF62:  dd $00065C75
C2DF66:  dd $00065C8D
C2DF6A:  dd $00065C45
C2DF6E:  dd $00065C5D
C2DF72:  dd $00065C75
C2DF76:  dd $00065C8D
C2DF7A:  dd $00065C45
C2DF7E:  dd $00065C5D
C2DF82:  dd $00065C75
C2DF86:  dd $00065C8D
C2DF8A:  dd $000C5DBD
C2DF8E:  dd $00205859
C2DF92:  dd $00205859
C2DF96:  dd $000A5ECD
C2DF9A:  dd $00208D57

; 64-bit data used at C1/470B.
C2DF9E:  db $D5,$5A,$59,$58,$18,$00,$08,$00
C2DFA6:  db $95,$5B,$71,$58,$0E,$00,$08,$00
C2DFAE:  db $05,$5C,$7F,$58,$08,$00,$08,$00
C2DFB6:  db $45,$5C,$87,$58,$0C,$00,$08,$00
C2DFBE:  db $31,$5D,$15,$8D,$0E,$00,$05,$00
C2DFC6:  db $31,$5D,$95,$8D,$0E,$00,$05,$00
C2DFCE:  db $31,$5D,$15,$8E,$0E,$00,$05,$00
C2DFD6:  db $31,$5D,$95,$8E,$0E,$00,$05,$00
C2DFDE:  db $77,$5D,$21,$8D,$0E,$00,$05,$00
C2DFE6:  db $77,$5D,$A1,$8D,$0E,$00,$05,$00
C2DFEE:  db $77,$5D,$21,$8E,$0E,$00,$05,$00
C2DFF6:  db $77,$5D,$A1,$8E,$0E,$00,$05,$00
C2DFFE:  db $05,$5C,$7D,$8D,$08,$00,$08,$00
C2E006:  db $45,$5C,$85,$8D,$0C,$00,$08,$00
C2E00E:  db $BD,$5D,$57,$8D,$18,$00,$06,$00
C2E016:  db $31,$5D,$17,$8D,$0E,$00,$05,$00
C2E01E:  db $77,$5D,$2F,$8D,$0E,$00,$05,$00
C2E026:  db $CD,$5E,$57,$8D,$14,$00,$08,$00
C2E02E:  db $95,$5B,$6F,$8D,$0E,$00,$08,$00

; Magic menu drawing script.
C2E036:  dw $0305    	; Draw 3 spaces
C2E038:  dw $2104    	; Change tile palette to #$21
C2E03A:  dw $000F    	; Draw spell name
C2E03C:  dw $FFFF    	; Draw 2 spaces
C2E03E:  dw $2104    	; Change tile palette to #$21
C2E040:  dw $000F    	; Draw spell name
C2E042:  dw $0A05    	; Draw 10 spaces
C2E044:  db $00      	; End script

; Lore menu drawing script.
C2E045:  dl $FFFFFF  	; Draw 3 spaces - why not 05 03?!
C2E048:  dw $2104    	; Change tile palette to #$21
C2E04A:  dw $0019    	; Draw Lore name
C2E04C:  db $00      	; End script

; Magitek menu drawing script.
C2E04D:  dw $0405    	; Draw 4 spaces
C2E04F:  dw $2104    	; Change tile palette to #$21
C2E051:  dw $0006    	; Draw Magitek attack name
C2E053:  dw $0305    	; Draw 3 spaces
C2E055:  dw $2104    	; Change tile palette to #$21
C2E057:  dw $0006    	; Draw Magitek attack name
C2E059:  db $00      	; End script

; Dance menu drawing script.
C2E05A:  dw $0405    	; Draw 4 spaces
C2E05C:  dw $2104    	; Change tile palette to #$21
C2E05E:  dw $0017    	; Draw Dance name
C2E060:  dw $0205    	; Draw 2 spaces
C2E062:  dw $2104    	; Change tile palette to #$21
C2E064:  dw $0017    	; Draw Dance name
C2E066:  db $00      	; End script

; Rage menu drawing script.
C2E067:  dw $0405    	; Draw 4 spaces
C2E069:  dw $2104    	; Change tile palette to #$21
C2E06B:  dw $0018    	; Draw enemy name
C2E06D:  dw $0205    	; Draw 2 spaces
C2E06F:  dw $2104    	; Change tile palette to #$21
C2E071:  dw $0018    	; Draw enemy name
C2E073:  db $00      	; End script

; Item menu drawing script.
C2E074:  dw $0405    	; Draw 4 spaces
C2E076:  dw $2104    	; Change tile palette to #$21
C2E078:  dw $000E    	; Draw Item name
C2E07A:  db $C1      	; Draw ':'
C2E07B:  dw $0002    	; Draw quantity
C2E07D:  dw $FFFF    	; Draw 2 spaces
C2E07F:  dw $0012    	; Draw Item type
C2E081:  db $FF      	; Draw a space, for some reason
C2E082:  db $00      	; End script

; Esper menu drawing script.
C2E083:  dw $FFFF    	; Draw 2 spaces
C2E085:  dd $9EA9AC84	; Draw "Espe"
C2E089:  dl $FFFFAB  	; Draw "r  "
C2E08C:  dw $2104    	; Change tile palette to #$21
C2E08E:  dw $001A    	; Draw Esper name
C2E090:  dw $0405    	; Draw 4 spaces
C2E092:  dw $2C03    	; Draw 'M', except that's the wrong value
C2E094:  dw $2F03    	; Draw 'P', except that's the wrong value
C2E096:  db $FF      	; Draw ' '
C2E097:  dw $0016    	; Display MP cost
C2E099:  db $00      	; End script

; Menu drawing pointers used at C1/4E63.
C2E09A:  dw C2E1C9
C2E09C:  dw C2E1D9
C2E09E:  dw C2E1E9
C2E0A0:  dw C2E1F5
C2E0A2:  dw C2E248
C2E0A4:  dw C2E268
C2E0A6:  dw C2E172
C2E0A8:  dw C2E185
C2E0AA:  dw C2E165
C2E0AC:  dw C2E16B
C2E0AE:  dw C2E1A1
C2E0B0:  dw C2E1A8
C2E0B2:  dw C2E1AF
C2E0B4:  dw C2E1B6
C2E0B6:  dw C2E125
C2E0B8:  dw C2E128
C2E0BA:  dw C2E12B
C2E0BC:  dw C2E12E
C2E0BE:  dw C2E131
C2E0C0:  dw C2E134
C2E0C2:  dw C2E137
C2E0C4:  dw C2E13A
C2E0C6:  dw C2E13D
C2E0C8:  dw C2E142
C2E0CA:  dw C2E147
C2E0CC:  dw C2E14C
C2E0CE:  dw C2E151
C2E0D0:  dw C2E156
C2E0D2:  dw C2E15B
C2E0D4:  dw C2E160
C2E0D6:  dw C2E0EC
C2E0D8:  dw C2E201
C2E0DA:  dw C2E228
C2E0DC:  dw C2E1BD
C2E0DE:  dw C2E0E0

; Menu drawing scripts. Maximum length is 64 bytes, apparently.
C2E0E0:  dw $1205    	; Draw 18 spaces
C2E0E2:  db $01      	; New line
C2E0E3:  dw $1205    	; Draw 18 spaces
C2E0E5:  db $01      	; New line
C2E0E6:  dw $1205    	; Draw 18 spaces
C2E0E8:  db $01      	; New line
C2E0E9:  dw $1205    	; Draw 18 spaces
C2E0EB:  db $00      	; End script

; SwdTech menu drawing script.
C2E0EC:  dw $FFFF    	; Draw 2 spaces
C2E0EE:  dw $2104    	; Change tile palette to #$21
C2E0F0:  db $B5      	; Draw '1'
C2E0F1:  dw $2104    	; Change tile palette to #$21
C2E0F3:  db $B6      	; Draw '2'
C2E0F4:  dw $2104    	; Change tile palette to #$21
C2E0F6:  db $B7      	; Draw '3'
C2E0F7:  dw $2104    	; Change tile palette to #$21
C2E0F9:  db $B8      	; Draw '4'
C2E0FA:  dw $2104    	; Change tile palette to #$21
C2E0FC:  db $B9      	; Draw '5'
C2E0FD:  dw $2104    	; Change tile palette to #$21
C2E0FF:  db $BA      	; Draw '6'
C2E100:  dw $2104    	; Change tile palette to #$21
C2E102:  db $BB      	; Draw '7'
C2E103:  dw $2104    	; Change tile palette to #$21
C2E105:  db $BC      	; Draw '8'
C2E106:  dw $FFFF    	; Draw 2 spaces
C2E108:  db $01      	; New line
C2E109:  dw $3504    	; Change tile palette to #$35
C2E10B:  db $FF      	; Draw ' '
C2E10C:  dw $F903    	; Draw left end of timer
C2E10E:  dw $F003    	; Draw empty section of timer
C2E110:  dw $F003    	; Draw empty section of timer
C2E112:  dw $F003    	; Draw empty section of timer
C2E114:  dw $F003    	; Draw empty section of timer
C2E116:  dw $F003    	; Draw empty section of timer
C2E118:  dw $F003    	; Draw empty section of timer
C2E11A:  dw $F003    	; Draw empty section of timer
C2E11C:  dw $F003    	; Draw empty section of timer
C2E11E:  dw $FA03    	; Draw right end of timer
C2E120:  db $FF      	; Draw ' '
C2E121:  db $01      	; New line
C2E122:  dw $0C05    	; Draw 12 spaces
C2E124:  db $00      	; End script

C2E125:  dw $0107    	; Draw party member 1's current HP
C2E127:  db $00      	; End script

C2E128:  dw $0108    	; Draw party member 2's current HP
C2E12A:  db $00      	; End script

C2E12B:  dw $0109    	; Draw party member 3's current HP
C2E12D:  db $00      	; End script

C2E12E:  dw $010A    	; Draw party member 4's current HP
C2E130:  db $00      	; End script

C2E131:  dw $0207    	; Draw party member 1's ATB gauge or max HP
C2E133:  db $00      	; End script

C2E134:  dw $0208    	; Draw party member 2's ATB gauge or max HP
C2E136:  db $00      	; End script

C2E137:  dw $0209    	; Draw party member 3's ATB gauge or max HP
C2E139:  db $00      	; End script

C2E13A:  dw $020A    	; Draw party member 4's ATB gauge or max HP
C2E13C:  db $00      	; End script

C2E13D:  dw $3904    	; Change tile palette to #$39
C2E13F:  dw $0507    	; Draw party member 1's Morph gauge
C2E141:  db $00      	; End script

C2E142:  dw $3904    	; Change tile palette to #$39
C2E144:  dw $0508    	; Draw party member 2's Morph gauge
C2E146:  db $00      	; End script

C2E147:  dw $3904    	; Change tile palette to #$39
C2E149:  dw $0509    	; Draw party member 3's Morph gauge
C2E14B:  db $00      	; End script

C2E14C:  dw $3904    	; Change tile palette to #$39
C2E14E:  dw $050A    	; Draw party member 4's Morph gauge
C2E150:  db $00      	; End script

; There's a Condemned gauge?! How come I've never seen it?
C2E151:  dw $3D04    	; Change tile palette to #$39
C2E153:  dw $0607    	; Draw party member 1's Condemned gauge
C2E155:  db $00      	; End script

C2E156:  dw $3D04    	; Change tile palette to #$39
C2E158:  dw $0608    	; Draw party member 2's Condemned gauge
C2E15A:  db $00      	; End script

C2E15B:  dw $3D04    	; Change tile palette to #$39
C2E15D:  dw $0609    	; Draw party member 3's Condemned gauge
C2E15F:  db $00      	; End script

C2E160:  dw $3D04    	; Change tile palette to #$39
C2E162:  dw $060A    	; Draw party member 4's Condemned gauge
C2E164:  db $00      	; End script

C2E165:  dw $FFFF    	; Draw 2 spaces
C2E167:  dl $B0A891  	; Draw "Row"
C2E16A:  db $00      	; End script

C2E16B:  dw $FFFF    	; Draw 2 spaces
C2E16D:  dd $C59F9E83	; Draw "Def."
C2E171:  db $00      	; End script

C2E172:  dw $0305    	; Draw 3 spaces
C2E174:  dl $87C491  	; Draw "R-H"
C2E177:  dl $9DA79A  	; Draw "and"
C2E17A:  dw $0905    	; Draw 9 spaces
C2E17C:  dl $87C48B  	; Draw "L-H"
C2E17F:  dl $9DA79A  	; Draw "and"
C2E182:  dw $0705    	; Draw 7 spaces
C2E184:  db $00      	; End script

; When are these used?!
C2E185:  dw $0307    	; Draw party member 1's current MP
C2E187:  dw $1503    	; Draw ' '
C2E189:  dw $0407    	; Draw party member 1's max MP
C2E18B:  db $01      	; New line
C2E18C:  dw $0308    	; Draw party member 2's current MP
C2E18E:  dw $1503    	; Draw ' '
C2E190:  dw $0408    	; Draw party member 2's max MP
C2E192:  db $01      	; New line
C2E193:  dw $0309    	; Draw party member 3's current MP
C2E195:  dw $1503    	; Draw ' '
C2E197:  dw $0409    	; Draw party member 3's max MP
C2E199:  db $01      	; New line
C2E19A:  dw $030A    	; Draw party member 4's current MP
C2E19C:  dw $1503    	; Draw ' '
C2E19E:  dw $040A    	; Draw party member 4's max MP
C2E1A0:  db $00      	; End script

C2E1A1:  dw $0307    	; Draw party member 1's current MP
C2E1A3:  dw $1503    	; Draw ' '
C2E1A5:  dw $0407    	; Draw party member 1's max MP
C2E1A7:  db $00      	; End script

C2E1A8:  dw $0308    	; Draw party member 2's current MP
C2E1AA:  dw $1503    	; Draw ' '
C2E1AC:  dw $0408    	; Draw party member 2's max MP
C2E1AE:  db $00      	; End script

C2E1AF:  dw $0309    	; Draw party member 3's current MP
C2E1B1:  dw $1503    	; Draw ' '
C2E1B3:  dw $0409    	; Draw party member 3's max MP
C2E1B5:  db $00      	; End script

C2E1B6:  dw $030A    	; Draw party member 4's current MP
C2E1B8:  dw $1503    	; Draw ' '
C2E1BA:  dw $040A    	; Draw party member 4's max MP
C2E1BC:  db $00      	; End script

C2E1BD:  dw $1F10    	; Draw blank status
C2E1BF:  db $01      	; New line
C2E1C0:  dw $1F10    	; Draw blank status
C2E1C2:  db $01      	; New line
C2E1C3:  dw $1F10    	; Draw blank status
C2E1C5:  db $01      	; New line
C2E1C6:  dw $1F10    	; Draw blank status
C2E1C8:  db $00      	; End script

C2E1C9:  dw $000B    	; Draw enemy name #1
C2E1CB:  db $FF      	; Draw ' '
C2E1CC:  db $01      	; New line
C2E1CD:  dw $010B    	; Draw enemy name #2
C2E1CF:  db $FF      	; Draw ' '
C2E1D0:  db $01      	; New line
C2E1D1:  dw $020B    	; Draw enemy name #3
C2E1D3:  db $FF      	; Draw ' '
C2E1D4:  db $01      	; New line
C2E1D5:  dw $030B    	; Draw enemy name #4
C2E1D7:  db $FF      	; Draw ' '
C2E1D8:  db $00      	; End script

C2E1D9:  dw $0007    	; Draw party member 1's name
C2E1DB:  db $FF      	; Draw ' '
C2E1DC:  db $01      	; New line
C2E1DD:  dw $0008    	; Draw party member 2's name
C2E1DF:  db $FF      	; Draw ' '
C2E1E0:  db $01      	; New line
C2E1E1:  dw $0009    	; Draw party member 3's name
C2E1E3:  db $FF      	; Draw ' '
C2E1E4:  db $01      	; New line
C2E1E5:  dw $000A    	; Draw party member 4's name
C2E1E7:  db $FF      	; Draw ' '
C2E1E8:  db $00      	; End script

C2E1E9:  dw $0107    	; Draw party member 1's current HP
C2E1EB:  db $01      	; New line
C2E1EC:  dw $0108    	; Draw party member 2's current HP
C2E1EE:  db $01      	; New line
C2E1EF:  dw $0109    	; Draw party member 3's current HP
C2E1F1:  db $01      	; New line
C2E1F2:  dw $010A    	; Draw party member 4's current HP
C2E1F4:  db $00      	; End script

C2E1F5:  dw $0207    	; Draw party member 1's ATB gauge or max HP
C2E1F7:  db $01      	; New line
C2E1F8:  dw $0208    	; Draw party member 2's ATB gauge or max HP
C2E1FA:  db $01      	; New line
C2E1FB:  dw $0209    	; Draw party member 3's ATB gauge or max HP
C2E1FD:  db $01      	; New line
C2E1FE:  dw $020A    	; Draw party member 4's ATB gauge or max HP
C2E200:  db $00      	; End script

; This script draws the battle command names in the "Short" selection window. What's weird is that it looks like it's just drawing "Fight" four times. My guess is that the command 0D parameters get overwritten in the loaded script in RAM.
C2E201:  dw $0605    	; Draw 6 spaces
C2E203:  dw $2104    	; Change tile palette to #$21
C2E205:  dw $000D    	; Draw command name
C2E207:  dw $0505    	; Draw 5 spaces
C2E209:  db $01      	; New line
C2E20A:  dw $FFFF    	; Draw 2 spaces
C2E20C:  dw $2104    	; Change tile palette to #$21
C2E20E:  dw $000D    	; Draw command name
C2E210:  dl $161616  	; NOP x3...
C2E213:  dw $FFFF    	; Draw 2 spaces
C2E215:  dw $2104    	; Change tile palette to #$21
C2E217:  dw $000D    	; Draw command name
C2E219:  db $FF      	; Draw ' '
C2E21A:  db $01      	; New line
C2E21B:  db $16      	; NOP
C2E21C:  dw $0605    	; Draw 6 spaces
C2E21E:  dw $2104    	; Change tile palette to #$21
C2E220:  dw $000D    	; Draw command name
C2E222:  dw $0505    	; Draw 5 spaces
C2E224:  db $01      	; New line
C2E225:  dw $1305    	; Draw 19 spaces
C2E227:  db $00      	; End script

; Display four spell names? Could this be the Control menu?
C2E228:  db $FF      	; Draw ' '
C2E229:  dw $2104    	; Change tile palette to #$21
C2E22B:  dw $0011    	; Draw spell name followed by 3 spaces
C2E22D:  db $FF      	; Draw ' '
C2E22E:  db $16      	; NOP
C2E22F:  db $01      	; New line
C2E230:  db $FF      	; Draw ' '
C2E231:  dw $2104    	; Change tile palette to #$21
C2E233:  dw $0011    	; Draw spell name followed by 3 spaces
C2E235:  db $FF      	; Draw ' '
C2E236:  db $16      	; NOP
C2E237:  db $01      	; New line
C2E238:  db $FF      	; Draw ' '
C2E239:  dw $2104    	; Change tile palette to #$21
C2E23B:  dw $0011    	; Draw spell name followed by 3 spaces
C2E23D:  db $FF      	; Draw ' '
C2E23E:  db $16      	; NOP
C2E23F:  db $01      	; New line
C2E240:  db $FF      	; Draw ' '
C2E241:  dw $2104    	; Change tile palette to #$21
C2E243:  dw $0011    	; Draw spell name followed by 3 spaces
C2E245:  db $FF      	; Draw ' '
C2E246:  db $16      	; NOP
C2E247:  db $00      	; End script

C2E248:  dw $FFFF    	; Draw 2 spaces
C2E24A:  dw $2104    	; Change tile palette to #$21
C2E24C:  dw $000D    	; Draw command name
C2E24E:  db $FF      	; Draw ' '
C2E24F:  db $01      	; New line
C2E250:  dw $FFFF    	; Draw 2 spaces
C2E252:  dw $2104    	; Change tile palette to #$21
C2E254:  dw $000D    	; Draw command name
C2E256:  db $FF      	; Draw ' '
C2E257:  db $01      	; New line
C2E258:  dw $FFFF    	; Draw 2 spaces
C2E25A:  dw $2104    	; Change tile palette to #$21
C2E25C:  dw $000D    	; Draw command name
C2E25E:  db $FF      	; Draw ' '
C2E25F:  db $01      	; New line
C2E260:  dw $FFFF    	; Draw 2 spaces
C2E262:  dw $2104    	; Change tile palette to #$21
C2E264:  dw $000D    	; Draw command name
C2E266:  db $FF      	; Draw ' '
C2E267:  db $00      	; End script

C2E268:  dw $FFFF    	; Draw 2 spaces
C2E26A:  dw $2104    	; Change tile palette to #$21
C2E26C:  dw $001B    	; NOP...
C2E26E:  db $FF      	; Draw ' '
C2E26F:  db $01      	; New line
C2E270:  dw $FFFF    	; Draw 2 spaces
C2E272:  dw $2104    	; Change tile palette to #$21
C2E274:  dw $001B    	; NOP...
C2E276:  db $FF      	; Draw ' '
C2E277:  db $01      	; New line
C2E278:  dw $FFFF    	; Draw 2 spaces
C2E27A:  dw $2104    	; Change tile palette to #$21
C2E27C:  dw $001B    	; NOP...
C2E27E:  db $FF      	; Draw ' '
C2E27F:  db $01      	; New line
C2E280:  dw $FFFF    	; Draw 2 spaces
C2E282:  dw $2104    	; Change tile palette to #$21
C2E284:  dw $001B    	; NOP...
C2E286:  db $FF      	; Draw ' '
C2E287:  db $00      	; End script

; Data (called from C2AF4F) (Animation script command 80 85: Chadarnook Exit)
C2E288:  dw $0000
C2E28A:  dw $31AD
C2E28C:  dw $190A
C2E28E:  dw $1D2B
C2E290:  dw $296B
C2E292:  dw $2129
C2E294:  dw $1D08
C2E296:  dw $1CE7
C2E298:  dw $18E7
C2E29A:  dw $18A5
C2E29C:  dw $0823
C2E29E:  dw $0C64
C2E2A0:  dw $294A
C2E2A2:  dw $18C6
C2E2A4:  dw $0CA9
C2E2A6:  dw $0866
C2E2A8:  dw $3800
C2E2AA:  dw $4AF8
C2E2AC:  dw $3A96
C2E2AE:  dw $2A34
C2E2B0:  dw $1DD2
C2E2B2:  dw $112E
C2E2B4:  dw $0CA9
C2E2B6:  dw $0866
C2E2B8:  dw $0823
C2E2BA:  dw $25D4
C2E2BC:  dw $14ED
C2E2BE:  dw $10A8
C2E2C0:  dw $0865
C2E2C2:  dw $0443
C2E2C4:  dw $2946
C2E2C6:  dw $2107
C2E2C8:  dw $3800
C2E2CA:  dw $09D3
C2E2CC:  dw $0CB2
C2E2CE:  dw $11CB
C2E2D0:  dw $1D70
C2E2D2:  dw $14EC
C2E2D4:  dw $10A8
C2E2D6:  dw $0C84
C2E2D8:  dw $0823
C2E2DA:  dw $420E
C2E2DC:  dw $296A
C2E2DE:  dw $1D70
C2E2E0:  dw $5273
C2E2E2:  dw $09D3
C2E2E4:  dw $0CB2
C2E2E6:  dw $11CB

; Data, called from C2AF39 (Animation script command 80 85: Chadarnook Exit)
C2E2E8:  dw $0000
C2E2EA:  dw $0C84
C2E2EC:  dw $0C44
C2E2EE:  dw $0C64
C2E2F0:  dw $1084
C2E2F2:  dw $0C43
C2E2F4:  dw $0C62
C2E2F6:  dw $0C42
C2E2F8:  dw $0C42
C2E2FA:  dw $0C43
C2E2FC:  dw $0823
C2E2FE:  dw $0823
C2E300:  dw $0C63
C2E302:  dw $0C43
C2E304:  dw $0823
C2E306:  dw $0823
C2E308:  dw $3800
C2E30A:  dw $112E
C2E30C:  dw $0CA9
C2E30E:  dw $18A7
C2E310:  dw $1485
C2E312:  dw $1444
C2E314:  dw $1443
C2E316:  dw $1023
C2E318:  dw $0823
C2E31A:  dw $0823
C2E31C:  dw $1046
C2E31E:  dw $0845
C2E320:  dw $0824
C2E322:  dw $0823
C2E324:  dw $7FD4
C2E326:  dw $0823
C2E328:  dw $3800
C2E32A:  dw $5230
C2E32C:  dw $4914
C2E32E:  dw $3DEB
C2E330:  dw $0C64
C2E332:  dw $0845
C2E334:  dw $0824
C2E336:  dw $0823
C2E338:  dw $0823
C2E33A:  dw $0C64
C2E33C:  dw $0C44
C2E33E:  dw $65B0
C2E340:  dw $1065
C2E342:  dw $0863
C2E344:  dw $0844
C2E346:  dw $0C62

C2E348:  dd $00000501
C2E34C:  dd $08393201
C2E350:  dd $00000A01
C2E354:  dd $00000C01
C2E358:  dd $00000E01
C2E35C:  dd $00001001
C2E360:  dd $00001601
C2E364:  dd $00001B01
C2E368:  dd $00000A01
C2E36C:  dd $00001E01
C2E370:  dd $00002101
C2E374:  dd $00002401
C2E378:  dd $00002701
C2E37C:  dd $00002A01
C2E380:  dd $00002D01
C2E384:  dd $00003001
C2E388:  dd $00003701
C2E38C:  dd $00000001
C2E390:  dd $00004101

; Other data sets called from various places.
C2E394:  db $C0
C2E395:  db $C4
C2E396:  db $C8
C2E397:  db $CC

C2E398:  db $60
C2E399:  db $64
C2E39A:  db $68
C2E39B:  db $6C

C2E39C:  db $80
C2E39D:  db $84
C2E39E:  db $88
C2E39F:  db $8C

C2E3A0:  db $A0
C2E3A1:  db $A4

C2E3A2:  db $FB
C2E3A3:  db $FA
C2E3A4:  db $F9
C2E3A5:  db $F8
C2E3A6:  db $F8
C2E3A7:  db $F9
C2E3A8:  db $FA
C2E3A9:  db $FB

; Data needed for status-related outline color changes.
C2E3AA:  db $00
C2E3AB:  db $08
C2E3AC:  db $10
C2E3AD:  db $18

; Data needed for status-related skin color changes.
C2E3AE:  dd $4DD37EDB
C2E3B2:  dd $32103AF5
C2E3B6:  dd $001F013F

; Also seems to be part of the outline color function.
C2E3BA:  dw $6A60
C2E3BC:  dw $031F
C2E3BE:  dw $0B64
C2E3C0:  dw $001A

C2E3C2:  dw $7FFF
C2E3C4:  dw $7FFF
C2E3C6:  dw $001A
C2E3C8:  dw $7C1F

; Seems to have something to do with the animations over characters' heads with certain statuses, e.g. Poison bubbles.
C2E3CA:  dw $0000
C2E3CC:  dw $0000
C2E3CE:  dw $0000
C2E3D0:  dw $0002
C2E3D2:  dw $0000
C2E3D4:  dw $0010
C2E3D6:  dw $0020
C2E3D8:  dw $0000

; Some more status-related 32-bit data.
C2E3DA:  dd $0A20F800
C2E3DE:  dd $0A22F800
C2E3E2:  dd $0824FAFF
C2E3E6:  dd $0C26F800
C2E3EA:  dd $0828F8F8
C2E3EE:  dd $082AF8F0
C2E3F2:  dd $0C2C1000
C2E3F6:  dd $0A20FD00
C2E3FA:  dd $0A22FD00
C2E3FE:  dd $0824FFFF
C2E402:  dd $0C26FD00
C2E406:  dd $0828FDF8
C2E40A:  dd $082AFDF0
C2E40E:  dd $0C2C1000

; VRAM data for each party member.
C2E412:  dw $8000
C2E414:  dw $6000
C2E416:  dw $4000
C2E418:  dw $2000

C2E41A:  dw $A000
C2E41C:  dw $A080
C2E41E:  dw $A100
C2E420:  dw $A180

; Data - indexed by ??? ranging from 0-3 (x2), code in bank C1
C2E422:  dw $0000
C2E424:  dw $2000
C2E426:  dw $4000
C2E428:  dw $6000

C2E42A:  dw $A000
C2E42C:  dw $0000
C2E42E:  dw $A000
C2E430:  dw $0000
C2E432:  dw $A000
C2E434:  dw $0000
C2E436:  dw $A000
C2E438:  dw $0000
C2E43A:  dw $A000
C2E43C:  dw $0000

; Data - indexed by encounter type, code in Bank C1
C2E43E:  db $00      	; Front
C2E43F:  db $00
C2E440:  db $00
C2E441:  db $00

C2E442:  db $40      	; Back
C2E443:  db $40
C2E444:  db $40
C2E445:  db $40

C2E446:  db $40      	; Pincer
C2E447:  db $00
C2E448:  db $40
C2E449:  db $00

C2E44A:  db $00      	; Side
C2E44B:  db $00
C2E44C:  db $40
C2E44D:  db $40

; Data - indexed by encounter type, code in Bank C1
; (deals with what characters are flipped around?  obviously none are on a Front attack,
; All are on a Back, the last 2 characters end up on the left side -- i.e. facing right --
; On a Side, and the 1st and 3rd face right when Pincered)
C2E44E:  db $00      	; Front
C2E44F:  db $00
C2E450:  db $00
C2E451:  db $00

C2E452:  db $01      	; Back
C2E453:  db $01
C2E454:  db $01
C2E455:  db $01

C2E456:  db $01      	; Pincer
C2E457:  db $00
C2E458:  db $01
C2E459:  db $00

C2E45A:  db $00      	; Side
C2E45B:  db $00
C2E45C:  db $01
C2E45D:  db $01

C2E45E:  db $08
C2E45F:  db $0A
C2E460:  db $0C
C2E461:  db $0E

; Something related to Dance animations. Indexed by backgrounds.
C2E462:  db $00
C2E463:  db $00
C2E464:  db $00
C2E465:  db $00
C2E466:  db $00
C2E467:  db $00
C2E468:  db $00
C2E469:  db $01
C2E46A:  db $00
C2E46B:  db $00
C2E46C:  db $00
C2E46D:  db $00
C2E46E:  db $00
C2E46F:  db $01
C2E470:  db $00
C2E471:  db $01
C2E472:  db $00
C2E473:  db $00
C2E474:  db $00
C2E475:  db $00
C2E476:  db $00
C2E477:  db $00
C2E478:  db $00
C2E479:  db $00
C2E47A:  db $00
C2E47B:  db $00
C2E47C:  db $00
C2E47D:  db $00
C2E47E:  db $00
C2E47F:  db $00
C2E480:  db $00
C2E481:  db $01
C2E482:  db $01
C2E483:  db $01
C2E484:  db $00
C2E485:  db $00
C2E486:  db $00
C2E487:  db $01
C2E488:  db $00
C2E489:  db $00
C2E48A:  db $00
C2E48B:  db $01
C2E48C:  db $00
C2E48D:  db $00
C2E48E:  db $01
C2E48F:  db $00
C2E490:  db $00
C2E491:  db $00
C2E492:  db $00
C2E493:  db $00
C2E494:  db $01
C2E495:  db $01
C2E496:  db $01
C2E497:  db $01
C2E498:  db $01
C2E499:  db $01

C2E49A:  db $0B
C2E49B:  db $0B
C2E49C:  db $09
C2E49D:  db $0B
C2E49E:  db $0B
C2E49F:  db $0B
C2E4A0:  db $0B
C2E4A1:  db $0B
C2E4A2:  db $0B
C2E4A3:  db $0B
C2E4A4:  db $0B
C2E4A5:  db $0B
C2E4A6:  db $0B
C2E4A7:  db $0B
C2E4A8:  db $0B
C2E4A9:  db $0B
C2E4AA:  db $0B
C2E4AB:  db $0B
C2E4AC:  db $0B
C2E4AD:  db $0B
C2E4AE:  db $0B
C2E4AF:  db $0B
C2E4B0:  db $0B
C2E4B1:  db $0B
C2E4B2:  db $0B
C2E4B3:  db $09
C2E4B4:  db $09
C2E4B5:  db $0B
C2E4B6:  db $0B
C2E4B7:  db $00
C2E4B8:  db $0B
C2E4B9:  db $0B
C2E4BA:  db $0B
C2E4BB:  db $0B
C2E4BC:  db $0B
C2E4BD:  db $0B
C2E4BE:  db $0B
C2E4BF:  db $0B
C2E4C0:  db $0B
C2E4C1:  db $0B
C2E4C2:  db $0B

; Data
C2E4C3:  dw $3C00
C2E4C5:  dw $3800
C2E4C7:  dw $3400
C2E4C9:  dw $3000
C2E4CB:  dw $0C00
C2E4CD:  dw $0800
C2E4CF:  dw $0400
C2E4D1:  dw $0000

; Data
C2E4D3:  dw $C63F
C2E4D5:  dw $BE3F
C2E4D7:  dw $B63F
C2E4D9:  dw $AE3F
C2E4DB:  dw $DC00
C2E4DD:  dw $D400
C2E4DF:  dw $CC00
C2E4E1:  dw $C400

C2E4E3:  db $7E
C2E4E4:  db $7E
C2E4E5:  db $7E
C2E4E6:  db $7E
C2E4E7:  db $7F
C2E4E8:  db $7F
C2E4E9:  db $7F
C2E4EA:  db $7F

; Pointers.
C2E4EB:  dw C2E53F
C2E4ED:  dw C2E546
C2E4EF:  dw C2E552
C2E4F1:  dw C2E55E
C2E4F3:  dw C2E56A
C2E4F5:  dw C2E576
C2E4F7:  dw C2E582
C2E4F9:  dw C2E5C7
C2E4FB:  dw C2E58E
C2E4FD:  dw C2E59A
C2E4FF:  dw C2E5A6
C2E501:  dw C2E5B2
C2E503:  dw C2E5B8
C2E505:  dw C2E53F
C2E507:  dw C2E539
C2E509:  dw C2E53F
C2E50B:  dw C2E53F
C2E50D:  dw C2E53F

C2E50F:  dw C2E53F
C2E511:  dw C2E540
C2E513:  dw C2E54C
C2E515:  dw C2E558
C2E517:  dw C2E564
C2E519:  dw C2E570
C2E51B:  dw C2E57C
C2E51D:  dw C2E5C1
C2E51F:  dw C2E588
C2E521:  dw C2E594
C2E523:  dw C2E5A0
C2E525:  dw C2E5AC
C2E527:  dw C2E53F
C2E529:  dw C2E53F
C2E52B:  dw C2E533
C2E52D:  dw C2E5CD
C2E52F:  dw C2E53F
C2E531:  dw C2E53F

C2E533:  db $00,$04,$9A,$15,$01,$FF
C2E539:  db $00,$03,$8C,$15,$01,$FF
C2E53F:  db $FF
C2E540:  db $00,$04,$B0,$13,$01,$FF
C2E546:  db $00,$03,$54,$15,$01,$FF
C2E54C:  db $00,$04,$CC,$13,$01,$FF
C2E552:  db $00,$03,$BE,$13,$01,$FF
C2E558:  db $00,$04,$E8,$13,$01,$FF
C2E55E:  db $00,$03,$DA,$13,$01,$FF
C2E564:  db $00,$04,$04,$14,$01,$FF
C2E56A:  db $00,$03,$F6,$13,$01,$FF
C2E570:  db $00,$04,$20,$14,$01,$FF
C2E576:  db $00,$03,$12,$14,$01,$FF
C2E57C:  db $00,$04,$3C,$14,$01,$FF
C2E582:  db $00,$03,$2E,$14,$01,$FF
C2E588:  db $00,$04,$58,$14,$01,$FF
C2E58E:  db $00,$03,$4A,$14,$01,$FF
C2E594:  db $00,$04,$74,$14,$01,$FF
C2E59A:  db $00,$03,$66,$14,$01,$FF
C2E5A0:  db $00,$04,$90,$14,$01,$FF
C2E5A6:  db $00,$03,$82,$14,$01,$FF
C2E5AC:  db $00,$04,$AC,$14,$01,$FF
C2E5B2:  db $00,$03,$9E,$14,$01,$FF
C2E5B8:  db $00,$03,$62,$15,$01,$FF
C2E5BE:  dl $FFE000
C2E5C1:  db $00,$04,$B6,$15,$01,$FF
C2E5C7:  db $00,$03,$A8,$15,$01,$FF
C2E5CD:  db $00,$04,$C4,$15,$01,$FF

C2E5D3:  dw $E613
C2E5D5:  dw $E619
C2E5D7:  dw $E61F
C2E5D9:  dw $E625
C2E5DB:  dw $E62B
C2E5DD:  dw $E607
C2E5DF:  dw $E60D
C2E5E1:  dw $E631
C2E5E3:  dw $E637
C2E5E5:  dw $E613
C2E5E7:  dw $E601
C2E5E9:  dw $E5FB
C2E5EB:  dw $E5F5
C2E5ED:  dw $E5EF

C2E5EF:  db $00,$04,$0A,$16,$01,$FF
C2E5F5:  db $00,$04,$EE,$15,$01,$FF
C2E5FB:  db $00,$04,$E0,$15,$01,$FF
C2E601:  db $00,$04,$D2,$15,$01,$FF
C2E607:  db $00,$05,$46,$15,$01,$FE
C2E60D:  db $00,$05,$38,$15,$01,$FE
C2E613:  db $00,$04,$FC,$0E,$01,$FF
C2E619:  db $00,$04,$EE,$0E,$01,$FF
C2E61F:  db $00,$04,$E0,$0E,$01,$FF
C2E625:  db $00,$04,$F2,$14,$01,$FF
C2E62B:  db $00,$04,$E4,$14,$01,$FF
C2E631:  db $00,$04,$7E,$15,$01,$FF
C2E637:  db $00,$04,$70,$15,$01,$FF

C2E63D:  LDY #$0002     ; 2
C2E640:  LDA ($76),Y
C2E642:  STA $E9FC
C2E645:  DEY
C2E646:  LDA ($76),Y
C2E648:  CMP #$09       ; 9
C2E64A:  BNE C2E659     ; +13
C2E64C:  INY
C2E64D:  LDA ($76),Y
C2E64F:  STA $10
C2E651:  INY
C2E652:  LDA ($76),Y
C2E654:  JSL C117EB     ; Why not JML?
C2E658:  RTL

C2E659:  REP #$20       ; 16-bit A
C2E65B:  ASL
C2E65C:  TAX
C2E65D:  LDA C2E5D3,X
C2E661:  STA $8F
C2E663:  TDC
C2E664:  SEP #$20       ; 8-bit A
C2E666:  BRA C2E6B1     ; +73
C2E668:  JSR C2EA54
C2E66B:  LDY #$0001     ; 1
C2E66E:  LDA ($76),Y
C2E670:  CMP #$0D       ; 13
C2E672:  BNE C2E67A     ; +6
C2E674:  JSR C2E806
C2E677:  JMP C2E88E

C2E67A:  CMP #$11       ; 17
C2E67C:  BNE C2E691     ; +19
C2E67E:  JSR C2E806
C2E681:  JSL C191D1
C2E685:  LDA #$FF       ; -1
C2E687:  STA $6191
C2E68A:  LDA $2F2F
C2E68D:  STA $201E
C2E690:  RTL

C2E691:  PHA
C2E692:  JSR C2E806
C2E695:  PLA
C2E696:  REP #$20       ; 16-bit A
C2E698:  ASL
C2E699:  TAX
C2E69A:  LDA $E9FB
C2E69D:  AND #$00FF
C2E6A0:  BEQ C2E6A8     ; +6
C2E6A2:  LDA C2E4EB,X
C2E6A6:  BRA C2E6AC     ; +4
C2E6A8:  LDA C2E50F,X
C2E6AC:  STA $8F
C2E6AE:  TDC
C2E6AF:  SEP #$20       ; 8-bit A
C2E6B1:  LDA #$C2       ; -62
C2E6B3:  STA $91
C2E6B5:  LDA [$8F]
C2E6B7:  CMP #$FF       ; -1
C2E6B9:  BEQ C2E6CB     ; +16
C2E6BB:  CMP #$FE       ; -2
C2E6BD:  BEQ C2E6D0     ; +17
C2E6BF:  ASL
C2E6C0:  TAX
C2E6C1:  JSR (C2E6D7,X)
C2E6C4:  LDY $8F
C2E6C6:  INY
C2E6C7:  STY $8F
C2E6C9:  BRA C2E6B5     ; -22
C2E6CB:  LDA #$FF       ; -1
C2E6CD:  STA $6191
C2E6D0:  LDA $2F2F
C2E6D3:  STA $201E
C2E6D6:  RTL

; Pointers.
C2E6D7:  dw C2E7FC
C2E6D9:  dw C2E801
C2E6DB:  dw C2E7A7
C2E6DD:  dw C2E6F4
C2E6DF:  dw C2E733
C2E6E1:  dw C2E772

C2E6E3:  LDX $00
C2E6E5:  LSR
C2E6E6:  BCS C2E6F0     ; +8
C2E6E8:  INX
C2E6E9:  CPX #$0008     ; 8
C2E6EC:  BNE C2E6E5     ; -9
C2E6EE:  TDC
C2E6EF:  RTS

C2E6F0:  TXA
C2E6F1:  AND #$07
C2E6F3:  RTS

C2E6F4:  JSL C1FE21
C2E6F8:  LDY #$0001     ; 1
C2E6FB:  REP #$20       ; 16-bit A
C2E6FD:  LDA [$8F],Y
C2E6FF:  STA $1E
C2E701:  INC $8F
C2E703:  INC $8F
C2E705:  TDC
C2E706:  SEP #$20
C2E708:  LDA $E9FB
C2E70B:  JSR C2E6E3
C2E70E:  CLC
C2E70F:  ADC #$04       ; 4
C2E711:  STA $2C6F
C2E714:  LDA $E9FB
C2E717:  STA $2C71
C2E71A:  STA $2C73
C2E71D:  STA $613E
C2E720:  STZ $613D
C2E723:  STZ $2C70
C2E726:  STZ $2C72
C2E729:  LDA #$C0       ; -64
C2E72B:  STA $2C6E
C2E72E:  JSL C1B880
C2E732:  RTS

C2E733:  JSL C1FE21
C2E737:  LDY #$0001     ; 1
C2E73A:  REP #$20       ; 16-bit A
C2E73C:  LDA [$8F],Y
C2E73E:  STA $1E
C2E740:  INC $8F
C2E742:  INC $8F
C2E744:  TDC
C2E745:  SEP #$20       ; 8-bit A
C2E747:  LDA $E9FC
C2E74A:  JSR C2E6E3
C2E74D:  CLC
C2E74E:  ADC #$04       ; 4
C2E750:  STA $2C6F
C2E753:  LDA $E9FC
C2E756:  STA $2C71
C2E759:  STA $2C73
C2E75C:  STA $613E
C2E75F:  STZ $613D
C2E762:  STZ $2C70
C2E765:  STZ $2C72
C2E768:  LDA #$C0       ; -64
C2E76A:  STA $2C6E
C2E76D:  JSL C1B880
C2E771:  RTS

C2E772:  JSL C1FE21
C2E776:  LDY #$0001     ; 1
C2E779:  REP #$20       ; 16-bit A
C2E77B:  LDA [$8F],Y
C2E77D:  STA $1E
C2E77F:  INC $8F
C2E781:  INC $8F
C2E783:  TDC
C2E784:  SEP #$20       ; 8-bit A
C2E786:  STZ $2C6F
C2E789:  LDA #$0F       ; 15
C2E78B:  STA $2C70
C2E78E:  STA $2C72
C2E791:  STA $613D
C2E794:  STZ $613E
C2E797:  STZ $2C71
C2E79A:  STZ $2C73
C2E79D:  LDA #$00       ; Could've used TDC
C2E79F:  STA $2C6E
C2E7A2:  JSL C1B880
C2E7A6:  RTS

C2E7A7:  LDA $E9FB
C2E7AA:  STA $2C71
C2E7AD:  STA $2C73
C2E7B0:  STA $613E
C2E7B3:  STZ $613D
C2E7B6:  STZ $2C70
C2E7B9:  STZ $2C72
C2E7BC:  JSR C2E6E3
C2E7BF:  PHA
C2E7C0:  CLC
C2E7C1:  ADC #$04       ; 4
C2E7C3:  STA $10
C2E7C5:  ORA #$80
C2E7C7:  STA $2C6F
C2E7CA:  STA $613F
C2E7CD:  LDA #$C0
C2E7CF:  STA $2C6E
C2E7D2:  PLA
C2E7D3:  REP #$20       ; 16-bit A
C2E7D5:  ASL
C2E7D6:  ASL
C2E7D7:  ASL
C2E7D8:  ASL
C2E7D9:  ASL
C2E7DA:  ASL
C2E7DB:  ASL
C2E7DC:  TAX
C2E7DD:  LDA #$0101
C2E7E0:  STA $22
C2E7E2:  INC $8F
C2E7E4:  LDA [$8F]
C2E7E6:  STA $24
C2E7E8:  INC $8F
C2E7EA:  TDC
C2E7EB:  SEP #$20       ; 8-bit A
C2E7ED:  LDA $10
C2E7EF:  ORA #$80
C2E7F1:  STA $10        ; Could've used TSB...
C2E7F3:  LDA #$C2       ; -62
C2E7F5:  STA $26
C2E7F7:  JSL C1B1C0
C2E7FB:  RTS

C2E7FC:  JSL C1FF43
C2E800:  RTS

C2E801:  JSL C1FF51
C2E805:  RTS

C2E806:  LDA $201E
C2E809:  STA $E9FA
C2E80C:  LDY #$0002     ; 2
C2E80F:  LDA ($76),Y
C2E811:  STA $E9FB
C2E814:  EOR #$FF
C2E816:  STA $10
C2E818:  INY
C2E819:  LDA ($76),Y
C2E81B:  STA $E9FC
C2E81E:  LDA $201E
C2E821:  AND $10
C2E823:  ORA $E9FC
C2E826:  STA $E9FD
C2E829:  LDA $E9FB
C2E82C:  BNE C2E84B     ; +29
C2E82E:  LDA $E9FA
C2E831:  EOR #$FF
C2E833:  STA $10
C2E835:  LDA $E9FC
C2E838:  AND $10
C2E83A:  STA $E9FC
C2E83D:  EOR #$FF
C2E83F:  STA $6191
C2E842:  LDA $E9FD
C2E845:  STA $201E
C2E848:  STA $61AB
C2E84B:  RTS

; Data of some sort.
C2E84C:  dw $0B0C
C2E84E:  dw $090A
C2E850:  dw $0708
C2E852:  dw $0706
C2E854:  dw $0304
C2E856:  dw $0202
C2E858:  dw $0202
C2E85A:  dw $0202
C2E85C:  dw $0202
C2E85E:  dw $0202
C2E860:  dw $0202
C2E862:  dw $0202
C2E864:  dw $0202
C2E866:  dw $0202
C2E868:  dw $0202
C2E86A:  dw $0202

C2E86C:  dw $0202
C2E86E:  dw $0202
C2E870:  dw $0202
C2E872:  dw $0202
C2E874:  dw $0202
C2E876:  dw $0202
C2E878:  dw $0202
C2E87A:  dw $0202
C2E87C:  dw $0202
C2E87E:  dw $0202
C2E880:  dw $0202
C2E882:  dw $0202
C2E884:  dw $0403
C2E886:  dw $0605
C2E888:  dw $0807
C2E88A:  dw $0A09
C2E88C:  dw $0C0B

C2E88E:  STZ $ECB3
C2E891:  LDA #$FF       ; -1
C2E893:  STA $6191
C2E896:  LDA $E9FA
C2E899:  STA $201E
C2E89C:  LDA $ECB3
C2E89F:  TAX
C2E8A0:  LDA C2E84C,X
C2E8A4:  JSL C19BB2
C2E8A8:  LDA $E9FC
C2E8AB:  STA $201E
C2E8AE:  LDA $ECB3
C2E8B1:  TAX
C2E8B2:  LDA C2E86C,X
C2E8B6:  JSL C19BB2
C2E8BA:  INC $ECB3
C2E8BD:  LDA $ECB3
C2E8C0:  CMP #$20       ; 32
C2E8C2:  BNE C2E896     ; -46
C2E8C4:  LDA #$FF       ; -1
C2E8C6:  STA $6191
C2E8C9:  LDA $2F2F
C2E8CC:  STA $201E
C2E8CF:  RTL

C2E8D0:  AND #$7F
C2E8D2:  ASL
C2E8D3:  TAX
C2E8D4:  JSR (C2E8D8,X)
C2E8D7:  RTL

; Pointers
C2E8D8:  dw C2F836
C2E8DA:  dw C2F820
C2E8DC:  dw C2F82B
C2E8DE:  dw C2F7EF
C2E8E0:  dw C2F436
C2E8E2:  dw C2F812
C2E8E4:  dw C2F305
C2E8E6:  dw C2F820
C2E8E8:  dw C2F2BF
C2E8EA:  dw C2F49C
C2E8EC:  dw C2F489
C2E8EE:  dw C2F809
C2E8F0:  dw C2F46B
C2E8F2:  dw C2E9D6
C2E8F4:  dw C2F7C7
C2E8F6:  dw C2F741
C2E8F8:  dw C2F809
C2E8FA:  dw C2F6ED
C2E8FC:  dw C2F4CA
C2E8FE:  dw C2F7A1
C2E900:  dw C2F630
C2E902:  dw C2F58D
C2E904:  dw C2F763
C2E906:  dw C2F6D5
C2E908:  dw C2F6A4
C2E90A:  dw C2F77D
C2E90C:  dw C2F418
C2E90E:  dw C2F839
C2E910:  dw C2F63E
C2E912:  dw C2F8CA
C2E914:  dw C2F392
C2E916:  dw C2F35D
C2E918:  dw C2F3B5
C2E91A:  dw C2F60D
C2E91C:  dw C2F5C1
C2E91E:  dw C2F5A1
C2E920:  dw C2F2B9
C2E922:  dw C2F6C4
C2E924:  dw C2F83C
C2E926:  dw C2F847
C2E928:  dw C2F65B
C2E92A:  dw C2F351
C2E92C:  dw C2F3E9
C2E92E:  dw C2F795
C2E930:  dw C2F3D9
C2E932:  dw C2F59E
C2E934:  dw C2F5F8
C2E936:  dw C2F5D2
C2E938:  dw C2F5A4
C2E93A:  dw C2F3FB
C2E93C:  dw C2F299
C2E93E:  dw C2F289
C2E940:  dw C2F27B
C2E942:  dw C2F25D
C2E944:  dw C2F241
C2E946:  dw C2F231
C2E948:  dw C2F221
C2E94A:  dw C2F211
C2E94C:  dw C2F1FA
C2E94E:  dw C2F195
C2E950:  dw C2F16B
C2E952:  dw C2F14D
C2E954:  dw C2F129
C2E956:  dw C2F119
C2E958:  dw C2F109
C2E95A:  dw C2F0F9
C2E95C:  dw C2F0DD
C2E95E:  dw C2F0C1
C2E960:  dw C2F08E
C2E962:  dw C2F070
C2E964:  dw C2F020
C2E966:  dw C2F00F
C2E968:  dw C2EFFE
C2E96A:  dw C2EFE3
C2E96C:  dw C2EFD2
C2E96E:  dw C2EF7B
C2E970:  dw C2EF67
C2E972:  dw C2EF59
C2E974:  dw C2EF4B
C2E976:  dw C2EF48
C2E978:  dw C2EF1F
C2E97A:  dw C2EF1C
C2E97C:  dw C2EF0A
C2E97E:  dw C2EEF6
C2E980:  dw C2EEDE
C2E982:  dw C2EEBD
C2E984:  dw C2EEAC
C2E986:  dw C2EEA7
C2E988:  dw C2EE99
C2E98A:  dw C2EE30
C2E98C:  dw C2EE8D
C2E98E:  dw C2EE76
C2E990:  dw C2EE0C
C2E992:  dw C2EDFD
C2E994:  dw C2EDF5
C2E996:  dw C2EDAC
C2E998:  dw C2EDA3
C2E99A:  dw C2ED8E
C2E99C:  dw C2ED6E
C2E99E:  dw C2ECF6
C2E9A0:  dw C2ED62
C2E9A2:  dw C2EC52
C2E9A4:  dw C2EC4B
C2E9A6:  dw C2EC43
C2E9A8:  dw C2EC36
C2E9AA:  dw C2EC29
C2E9AC:  dw C2EC1C
C2E9AE:  dw C2EBFE
C2E9B0:  dw C2EBEE
C2E9B2:  dw C2EBE1
C2E9B4:  dw C2EBC2
C2E9B6:  dw C2EBBC
C2E9B8:  dw C2EB97
C2E9BA:  dw C2EB91
C2E9BC:  dw C2EB2C
C2E9BE:  dw C2EB87
C2E9C0:  dw C2EB4F
C2E9C2:  dw C2EB35
C2E9C4:  dw C2EB1D
C2E9C6:  dw C2EACB
C2E9C8:  dw C2EABD
C2E9CA:  dw C2EAA7
C2E9CC:  dw C2EA88
C2E9CE:  dw C2EA71
C2E9D0:  dw C2EA65
C2E9D2:  dw C2EA43
C2E9D4:  dw C2E9D7

C2E9D6:  RTS            ; Unnecessary...

C2E9D7:  INC $60AC
C2E9DA:  TDC            ; A = 0
C2E9DB:  TAX            ; X = 0
C2E9DC:  TAY            ; Y = 0
C2E9DD:  LDA $2EC6,X
C2E9E0:  CMP #$0D       ; 13
C2E9E2:  BEQ C2E9F0     ; +12
C2E9E4:  INY
C2E9E5:  TXA
C2E9E6:  CLC
C2E9E7:  ADC #$20       ; 32
C2E9E9:  TAX
C2E9EA:  CPX #$0080     ; 128
C2E9ED:  BNE C2E9DD     ; -18
C2E9EF:  RTS

C2E9F0:  STY $10
C2E9F2:  TYA
C2E9F3:  ASL
C2E9F4:  TAY
C2E9F5:  REP #$20       ; 16-bit A
C2E9F7:  LDA $8033,Y
C2E9FA:  SEC
C2E9FB:  SBC #$0008     ; 8
C2E9FE:  STA $14
C2EA00:  LDA $803B,Y
C2EA03:  SEC
C2EA04:  SBC #$0008     ; 8
C2EA07:  STA $16
C2EA09:  TDC            ; A = 0
C2EA0A:  SEP #$20       ; 8-bit A
C2EA0C:  TDC            ; What?! What the hell do you need another one for?!
C2EA0D:  TAX            ; X = 0
C2EA0E:  LDA $6A38,X    ; Caster's ID in battle sprite listing...
C2EA11:  STA $6A39,X    ; ...is now target's ID
C2EA14:  LDA $10
C2EA16:  STA $6A38,X
C2EA19:  REP #$20       ; 16-bit A
C2EA1B:  LDA $6F7E,X
C2EA1E:  STA $6F82,X    ; Original X position of spell animation
C2EA21:  LDA $6F80,X
C2EA24:  STA $6F84,X    ; Original Y position of spell animation
C2EA27:  LDA $14
C2EA29:  STA $6F7E,X
C2EA2C:  LDA $16
C2EA2E:  STA $6F80,X
C2EA31:  TXA
C2EA32:  CLC
C2EA33:  ADC #$0080     ; 128
C2EA36:  TAX
C2EA37:  TDC
C2EA38:  SEP #$20       ; 8-bit A
C2EA3A:  CPX #$0500     ; Loop 10 times
C2EA3D:  BNE C2EA0E     ; -49
C2EA3F:  INC $E9EE
C2EA42:  RTS

C2EA43:  LDA #$05       ; 5
C2EA45:  STA $26
C2EA47:  LDA #$02       ; LSR?
C2EA49:  JSR C2F4F8
C2EA4C:  LDA #$03       ; 3
C2EA4E:  JSR C2F6E6
C2EA51:  JMP C2F9EB

C2EA54:  LDA $00213F
C2EA58:  LDA $002137
C2EA5C:  LDA $00213D
C2EA60:  CMP #$A0       ; 160
C2EA62:  BCC C2EA54     ; -16
C2EA64:  RTS

C2EA65:  JSR C2F8CA
C2EA68:  LDA $896F
C2EA6B:  ORA #$08
C2EA6D:  STA $896F
C2EA70:  RTS

C2EA71:  JSR C2EA54
C2EA74:  LDA $898D
C2EA77:  AND #$FE
C2EA79:  STA $898D
C2EA7C:  JSR C2F8CA
C2EA7F:  LDA $896F
C2EA82:  ORA #$08
C2EA84:  STA $896F
C2EA87:  RTS

C2EA88:  JSR C2F3E9
C2EA8B:  LDA #$04       ; 4
C2EA8D:  STA $26
C2EA8F:  LDA #$07       ; 7
C2EA91:  JSR C2F4F8
C2EA94:  LDA #$08       ; 8
C2EA96:  JSR C2F6E6
C2EA99:  INC $60AD
C2EA9C:  RTS

; Pointers (referencing monster palettes at D2/7002,X?)
C2EA9D:  dw $0182
C2EA9F:  dw $0191
C2EAA1:  dw $0187
C2EAA3:  dw $0193
C2EAA5:  dw $0184

C2EAA7:  LDA $E9E7      ; Animation sound effect
C2EAAA:  ASL
C2EAAB:  TAX
C2EAAC:  REP #$20       ; 16-bit A
C2EAAE:  LDA C2EA9D,X
C2EAB2:  TAX
C2EAB3:  TDC            ; A = 0
C2EAB4:  SEP #$20       ; 8-bit A
C2EAB6:  JSL C12452
C2EABA:  JMP C2FA70

C2EABD:  LDA #$03       ; 3
C2EABF:  STA $26
C2EAC1:  LDA #$03       ; This is needless
C2EAC3:  JSR C2F4F8
C2EAC6:  LDA #$04       ; 4
C2EAC8:  JMP C2F6E6

C2EACB:  STZ $7B67
C2EACE:  JSL C1C386
C2EAD2:  JSL C10226
C2EAD6:  JSL C1B07E
C2EADA:  JSL C19A9E
C2EADE:  PHA
C2EADF:  LDA $898D
C2EAE2:  PHA
C2EAE3:  AND #$FE
C2EAE5:  STA $898D
C2EAE8:  LDA $896F
C2EAEB:  AND #$E7
C2EAED:  ORA #$50
C2EAEF:  STA $896F
C2EAF2:  JSL C11E55
C2EAF6:  PLA
C2EAF7:  STA $898D
C2EAFA:  PLA
C2EAFB:  AND #$03
C2EAFD:  ASL
C2EAFE:  ASL
C2EAFF:  ASL
C2EB00:  ASL
C2EB01:  ASL
C2EB02:  TAX
C2EB03:  TDC            ; A = 0
C2EB04:  TAY            ; Y = 0
C2EB05:  LDA $7F80,X
C2EB08:  STA $7E60,Y
C2EB0B:  INY
C2EB0C:  INX
C2EB0D:  CPY #$0020     ; 32
C2EB10:  BNE C2EB05
C2EB12:  LDA $627D
C2EB15:  AND #$7F
C2EB17:  STA $627D
C2EB1A:  JMP C2FA0F

C2EB1D:  JSR C2FA4F
C2EB20:  LDA #$3C       ; 60
C2EB22:  STA $002123
C2EB26:  STZ $961B      ; Reset clip plane shape
C2EB29:  JMP C2FA1B

C2EB2C:  JSR C2F5C1
C2EB2F:  STZ $60AC
C2EB32:  JMP C2F299

C2EB35:  JSR C2F02D
C2EB38:  LDX #$BE3F     ; -16,833
C2EB3B:  LDY #$0800     ; 2,048
C2EB3E:  JSR C2EC61
C2EB41:  LDA #$03       ; 3
C2EB43:  STA $26
C2EB45:  LDA #$02       ; DEC acceptable
C2EB47:  JSR C2F4F8
C2EB4A:  LDA #$03       ; 3
C2EB4C:  JMP C2F6E6

C2EB4F:  JSR C2F02D
C2EB52:  LDX #$018F     ; 399
C2EB55:  PHX
C2EB56:  JSL C1240A
C2EB5A:  JSR C2FA70
C2EB5D:  JSL C19EC6
C2EB61:  PLX
C2EB62:  JSL C12480
C2EB66:  JSR C2FA87
C2EB69:  LDX #$019C     ; 412
C2EB6C:  JSL C12480
C2EB70:  JSR C2FA87
C2EB73:  JSR C2F1CA
C2EB76:  JSR C2FA4F
C2EB79:  STZ $961B      ; Reset clip plane shape
C2EB7C:  LDA #$CC       ; -52
C2EB7E:  STA $002124
C2EB82:  LDA #$01       ; 1
C2EB84:  JMP C2F6E6

C2EB87:  JSR C2F847
C2EB8A:  TDC            ; A = 0
C2EB8B:  INC $60AC
C2EB8E:  JMP C2F011

C2EB91:  JSR C2F9EB
C2EB94:  JMP C2EEFE

C2EB97:  JSR C2F5C1
C2EB9A:  JSR C2F8CA
C2EB9D:  STZ $60AC
C2EBA0:  JSL C1AAA1
C2EBA4:  LDA $12
C2EBA6:  BMI C2EBBB     ; +19
C2EBA8:  AND #$03
C2EBAA:  ASL
C2EBAB:  ASL
C2EBAC:  ASL
C2EBAD:  ASL
C2EBAE:  ASL
C2EBAF:  TAX
C2EBB0:  LDA $2EC1,X
C2EBB3:  BPL C2EBBB     ; +6
C2EBB5:  STZ $6F2E
C2EBB8:  STZ $6F3E
C2EBBB:  RTS

C2EBBC:  JSR C2F00F
C2EBBF:  JMP C2F8CA
C2EBC2:  LDX #$019B     ; 411
C2EBC5:  JSL C12480
C2EBC9:  TDC            ; A = 0
C2EBCA:  TAX            ; X = 0
C2EBCB:  LDA $ED6300,X  ; Battle/menu character sprite palette
C2EBCF:  STA $7F60,X
C2EBD2:  STA $7D60,X
C2EBD5:  INX
C2EBD6:  CPX #$0020     ; 32
C2EBD9:  BNE C2EBCB     ; -16
C2EBDB:  JSR C2F98B
C2EBDE:  JMP C2F809

C2EBE1:  LDX #$0194     ; 404
C2EBE4:  JSL C12452
C2EBE8:  JSR C2FA70
C2EBEB:  JMP C2F7EF
C2EBEE:  LDX #$018A     ; 394
C2EBF1:  JSL C12480
C2EBF5:  JSR C2FA87
C2EBF8:  JSR C2F9C7
C2EBFB:  JMP C2F809

C2EBFE:  JSR C2F02D
C2EC01:  LDX #$018C     ; 396
C2EC04:  PHX
C2EC05:  JSL C12400
C2EC09:  JSR C2FA70
C2EC0C:  JSL C19EC6
C2EC10:  PLX
C2EC11:  JSL C12480
C2EC15:  JSR C2FA87
C2EC18:  INC $62B0
C2EC1B:  RTS

C2EC1C:  LDX #$0190     ; 400
C2EC1F:  JSL C12452
C2EC23:  JSR C2FA70
C2EC26:  JMP C2F809

C2EC29:  LDX #$0196     ; 406
C2EC2C:  JSL C12452
C2EC30:  JSR C2FA70
C2EC33:  JMP C2F590

C2EC36:  LDX #$0188     ; 392
C2EC39:  JSL C12452
C2EC3D:  JSR C2FA70
C2EC40:  JMP C2F63E

C2EC43:  LDA #$08       ; 8
C2EC45:  JSR C2F011
C2EC48:  JMP C2F9D3

C2EC4B:  JSR C2F8CA
C2EC4E:  INC $60AC
C2EC51:  RTS

C2EC52:  JSR C2FA4F
C2EC55:  LDA #$06       ; 6
C2EC57:  STA $961B      ; Set clip plane to a wide oval
C2EC5A:  LDA #$CC       ; -52
C2EC5C:  STA $002124
C2EC60:  RTS

C2EC61:  PHX
C2EC62:  PHY
C2EC63:  LDA #$D8       ; -40
C2EC65:  STA $F5
C2EC67:  LDX #$D000     ; -12,288
C2EC6A:  STX $F3
C2EC6C:  LDA #$7E       ; 126
C2EC6E:  STA $F8
C2EC70:  LDX #$AE3F     ; -20,929
C2EC73:  STX $F6
C2EC75:  JSL C2FF6D
C2EC79:  PLY
C2EC7A:  PLX
C2EC7B:  PHY
C2EC7C:  STZ $E9F0
C2EC7F:  DEC $E9F0
C2EC82:  LDA $898D
C2EC85:  AND #$12
C2EC87:  STA $898D
C2EC8A:  LDA #$3F       ; 63
C2EC8C:  STA $14
C2EC8E:  LDA #$7E       ; ASL acceptable
C2EC90:  JSL C2C027
C2EC94:  PHX
C2EC95:  PHY
C2EC96:  LDA #$D8
C2EC98:  STA $F5
C2EC9A:  LDX #$DAF2
C2EC9D:  STX $F3
C2EC9F:  LDA #$7E
C2ECA1:  STA $F8
C2ECA3:  LDX #$AE3F
C2ECA6:  STX $F6
C2ECA8:  JSL C2FF6D
C2ECAC:  PLY
C2ECAD:  PLX
C2ECAE:  PLX
C2ECAF:  PHB
C2ECB0:  LDA #$7F
C2ECB2:  PHA
C2ECB3:  PLB            ; Data bank register now points to bank $7F
C2ECB4:  LDY #$C400
C2ECB7:  STY $10
C2ECB9:  LDA #$20
C2ECBB:  STA $12
C2ECBD:  TDC            ; A = 0
C2ECBE:  TAY            ; Y = 0
C2ECBF:  LDA $7EAE3F,X
C2ECC3:  STA ($10),Y
C2ECC5:  INX
C2ECC6:  INY
C2ECC7:  INY
C2ECC8:  CPY #$0040     ; 64
C2ECCB:  BNE C2ECBF     ; -14
C2ECCD:  REP #$20       ; 16-bit A
C2ECCF:  LDA $10
C2ECD1:  CLC
C2ECD2:  ADC #$0100     ; 256
C2ECD5:  STA $10
C2ECD7:  TDC
C2ECD8:  SEP #$20       ; 8-bit A
C2ECDA:  DEC $12
C2ECDC:  BNE C2ECBD     ; -33
C2ECDE:  PLB
C2ECDF:  LDX #$2000
C2ECE2:  STX $10
C2ECE4:  LDX #$C400
C2ECE7:  LDY #$0000
C2ECEA:  LDA #$7F
C2ECEC:  JSL C11989
C2ECF0:  INC $E9EE
C2ECF3:  JMP C2F809

C2ECF6:  JSR C2F02D
C2ECF9:  LDX #$B63F
C2ECFC:  LDY #$0000
C2ECFF:  JSR C2EC61
C2ED02:  REP #$20       ; 16-bit A
C2ED04:  TDC            ; A = 0
C2ED05:  TAX            ; X = 0
C2ED06:  TDC            ; A = 0 already, but this is needed later
C2ED07:  TAY            ; Y = 0
C2ED08:  LDA $6F4E,Y
C2ED0B:  STA $6A2E,X
C2ED0E:  STA $6A3E,X
C2ED11:  LDA $749E,Y
C2ED14:  STA $6F7E,X
C2ED17:  STA $6F8E,X
C2ED1A:  LDA $79EE,Y
C2ED1D:  STA $74CE,X    ; Animation X-offset
C2ED20:  STA $74DE,X
C2ED23:  INX
C2ED24:  INX
C2ED25:  INY
C2ED26:  INY
C2ED27:  CPY #$0010
C2ED2A:  BNE C2ED08     ; -36
C2ED2C:  TXA
C2ED2D:  CLC
C2ED2E:  ADC #$0070
C2ED31:  TAX
C2ED32:  CPX #$0300
C2ED35:  BNE C2ED06     ; -49
C2ED37:  TDC
C2ED38:  SEP #$20       ; 8-bit A
C2ED3A:  TDC            ; Inexcusable this time
C2ED3B:  TAX            ; X = 0
C2ED3C:  STZ $10
C2ED3E:  LDA $10
C2ED40:  CLC
C2ED41:  ADC #$06       ; 6
C2ED43:  STA $6A35,X
C2ED46:  CLC
C2ED47:  ADC #$06       ; 6
C2ED49:  STA $6A45,X
C2ED4C:  STA $10
C2ED4E:  INC $6A36,X
C2ED51:  REP #$20       ; 16-bit A
C2ED53:  TXA
C2ED54:  CLC
C2ED55:  ADC #$0080
C2ED58:  TAX
C2ED59:  TDC
C2ED5A:  SEP #$20       ; 8-bit A
C2ED5C:  CPX #$0300
C2ED5F:  BNE C2ED3E     ; -35
C2ED61:  RTS

C2ED62:  JSR C2F02D
C2ED65:  LDX #$AE3F
C2ED68:  LDY #$0400
C2ED6B:  JMP C2EC61

C2ED6E:  JSL C1C386
C2ED72:  STZ $7B67
C2ED75:  JSL C10226
C2ED79:  JSL C1C3F1
C2ED7D:  LDA $896F
C2ED80:  AND #$EF       ; TRB would've worked...
C2ED82:  STA $896F
C2ED85:  JSL C19A9E
C2ED89:  LDA $10
C2ED8B:  JMP C2F322

C2ED8E:  JSR C2F967
C2ED91:  JSR C2FA4F
C2ED94:  LDA #$3C
C2ED96:  STA $002123
C2ED9A:  LDA #$CC
C2ED9C:  STA $002124
C2EDA0:  JMP C2F809

C2EDA3:  JSR C2FA4F
C2EDA6:  STZ $961B      ; Reset clip plane shape
C2EDA9:  JMP C2F809

C2EDAC:  TDC            ; A = 0
C2EDAD:  TAX            ; X = 0
C2EDAE:  LDA #$08
C2EDB0:  STA $10
C2EDB2:  LDA $7FC411,X
C2EDB6:  AND #$E3       ; Clear bits 2-4
C2EDB8:  ORA #$10       ; Set bit 4
C2EDBA:  STA $7FC411,X
C2EDBE:  LDA $7FC4A1,X
C2EDC2:  AND #$E3
C2EDC4:  ORA #$10
C2EDC6:  STA $7FC4A1,X
C2EDCA:  INX
C2EDCB:  INX
C2EDCC:  DEC $10
C2EDCE:  BNE C2EDB2     ; -30
C2EDD0:  REP #$20       ; 16-bit A
C2EDD2:  TXA
C2EDD3:  CLC
C2EDD4:  ADC #$0010
C2EDD7:  TAX
C2EDD8:  TDC
C2EDD9:  SEP #$20       ; 8-bit A
C2EDDB:  CPX #$00A0
C2EDDE:  BNE C2EDAE     ; -50
C2EDE0:  JSR C2F1CA
C2EDE3:  LDA #$08
C2EDE5:  STA $6F55
C2EDE8:  LDA #$10       ; ASL acceptable
C2EDEA:  STA $6F65
C2EDED:  LDA #$18
C2EDEF:  STA $6F75
C2EDF2:  JMP C2F9C7

C2EDF5:  JSR C2FA1B
C2EDF8:  LDA #$04
C2EDFA:  JMP C2F6DA

C2EDFD:  STZ $961B      ; Reset clip plane shape
C2EE00:  JSR C2FA4F
C2EE03:  LDA #$CC
C2EE05:  STA $002124
C2EE09:  JMP C2F9C7

C2EE0C:  JSR C2FA4F
C2EE0F:  LDA #$3C
C2EE11:  STA $002123
C2EE15:  LDX #$0120
C2EE18:  JSR C2F178
C2EE1B:  JSR C2F1CA
C2EE1E:  LDA #$08
C2EE20:  STA $6F55
C2EE23:  LDA #$10       ; ASL acceptable
C2EE25:  STA $6F65
C2EE28:  LDA #$18
C2EE2A:  STA $6F75
C2EE2D:  JMP C2FA1B

; This function appears to make your party members face the same direction when one group of enemies are left in a pincer attack.
C2EE30:  JSR C2F098
C2EE33:  LDA $201F      ; Encounter type
C2EE36:  CMP #$02       ; Pincer attack?
C2EE38:  BNE C2EE68     ; Branch if not
C2EE3A:  LDA $201E      ; Drawn enemies
C2EE3D:  AND $61AB      ; Visible enemies
C2EE40:  AND $2EAC      ; Something to do with right side or left side because Pincer attack means enemies on both
C2EE43:  BEQ C2EE48     ; If any bits left...
C2EE45:  TDC            ; ...animation faces left
C2EE46:  BRA C2EE4A     ; Otherwise...
C2EE48:  LDA #$01       ; ...animation faces right
C2EE4A:  STA $6F87      ; Animation direction
C2EE4D:  STA $7007      ; Set for entire party
C2EE50:  STA $7087
C2EE53:  STA $7107
C2EE56:  ROR
C2EE57:  ROR
C2EE58:  ROR
C2EE59:  AND #$40       ; Bit 6, originally bit 1
C2EE5B:  STA $61BE      ; Character face direction
C2EE5E:  STA $61DE      ; Set for entire party
C2EE61:  STA $61FE
C2EE64:  STA $621E
C2EE67:  RTS

; This function makes the attack animations for party members 3 and 4 face right in a side attack.
C2EE68:  LDA $201F      ; Encounter type
C2EE6B:  CMP #$03       ; Side attack?
C2EE6D:  BNE C2EE75     ; Exit if not
C2EE6F:  INC $7087      ; Party member 3's attacks face right
C2EE72:  INC $7107      ; Same for member 4
C2EE75:  RTS

C2EE76:  JSR C2F1CA
C2EE79:  LDA #$03
C2EE7B:  JSR C2F6E6
C2EE7E:  JSR C2FA4F
C2EE81:  LDA #$3C
C2EE83:  STA $002123
C2EE87:  STZ $961B      ; Reset clip plane shape
C2EE8A:  JMP C2FA1B

C2EE8D:  JSR C2F7C7
C2EE90:  JSR C2FA1B
C2EE93:  LDA #$08
C2EE95:  STA $961B      ; Set clip plane to wavy out
C2EE98:  RTS

C2EE99:  JSR C2F8CA
C2EE9C:  LDA $896F
C2EE9F:  ORA #$08       ; TSB would've worked...
C2EEA1:  STA $896F
C2EEA4:  JMP C2FA33

C2EEA7:  LDA #$10
C2EEA9:  JMP C2F011

C2EEAC:  LDA #$07
C2EEAE:  STA $26
C2EEB0:  LDA #$02
C2EEB2:  JSR C2F4F8
C2EEB5:  LDA #$03       ; INC acceptable
C2EEB7:  JSR C2F6E6
C2EEBA:  JMP C2FA1B

C2EEBD:  JSR C2F8CA
C2EEC0:  JSR C2FA4F
C2EEC3:  LDA #$CC
C2EEC5:  STA $002124
C2EEC9:  LDA #$03
C2EECB:  STA $961B      ; Set clip plane to a pillar
C2EECE:  LDA $896F
C2EED1:  ORA #$08       ; TSB would've worked...
C2EED3:  STA $896F
C2EED6:  LDA #$02
C2EED8:  JSR $EEFE      ; Why not JSR $EEFC?
C2EEDB:  JMP C2FA33

C2EEDE:  JSR C2F973
C2EEE1:  JSR C2FA4F
C2EEE4:  LDA #$CC
C2EEE6:  STA $002124
C2EEEA:  STZ $961B      ; Reset clip plane shape
C2EEED:  LDA $896F
C2EEF0:  AND #$EF       ; TRB would've worked...
C2EEF2:  STA $896F
C2EEF5:  RTS

C2EEF6:  JSR C2F9D3
C2EEF9:  INC $60AC
C2EEFC:  LDA #$02
C2EEFE:  STA $26
C2EF00:  LDA #$05
C2EF02:  JSR C2F4F8
C2EF05:  LDA #$06       ; INC acceptable
C2EF07:  JMP C2F6E6

C2EF0A:  JSR C2FA1B
C2EF0D:  JSR C2FA4F
C2EF10:  LDA #$3C
C2EF12:  STA $002123
C2EF16:  LDA #$01
C2EF18:  STA $961B      ; Set clip plane to a circle
C2EF1B:  RTS

C2EF1C:  JMP C2F9C7     ; Sigh...

C2EF1F:  JSR C2F98B
C2EF22:  TDC
C2EF23:  TAX
C2EF24:  LDA $7FC401,X
C2EF28:  AND #$DF
C2EF2A:  STA $7FC401,X
C2EF2E:  INX
C2EF2F:  INX
C2EF30:  CPX #$0040
C2EF33:  BNE C2EF24     ; -17
C2EF35:  JSL C1C386
C2EF39:  JSR C2FA4F
C2EF3C:  LDA #$3C
C2EF3E:  STA $002123
C2EF42:  LDA #$06
C2EF44:  STA $961B      ; Set clip plane to a wide oval
C2EF47:  RTS

C2EF48:  JMP C2F9EB

C2EF4B:  INC $0099      ; Not INC $99?
C2EF4E:  INC $60AD
C2EF51:  JSR C2F9C7
C2EF54:  LDA #$08
C2EF56:  JMP C2EF5B     ; BRA would've worked...

C2EF59:  LDA #$10
C2EF5B:  STA $26
C2EF5D:  LDA #$02
C2EF5F:  JSR C2F4F8
C2EF62:  LDA #$03
C2EF64:  JMP C2F6E6

C2EF67:  JSR C2F763
C2EF6A:  LDA #$06
C2EF6C:  STA $26
C2EF6E:  LDA #$07       ; INC acceptable
C2EF70:  JSR C2F4F8
C2EF73:  LDA #$08
C2EF75:  JSR C2F6E6
C2EF78:  JMP C2FA27

C2EF7B:  JSR C2EFD2
C2EF7E:  JSL C19A9E
C2EF82:  TDC            ; A = 0
C2EF83:  TAX            ; X = 0
C2EF84:  LDA $10
C2EF86:  ASL
C2EF87:  ASL
C2EF88:  STA $12
C2EF8A:  LDA $7FC400,X
C2EF8E:  CMP #$EE
C2EF90:  BEQ C2EFB1     ; +31
C2EF92:  CLC
C2EF93:  ADC $12
C2EF95:  STA $7FC400,X
C2EF99:  STA $7FC600,X
C2EF9D:  LDA $7FC401,X
C2EFA1:  ORA #$02
C2EFA3:  STA $7FC401,X
C2EFA7:  LDA $7FC601,X
C2EFAB:  ORA #$02
C2EFAD:  STA $7FC601,X
C2EFB1:  INX
C2EFB2:  INX
C2EFB3:  CPX #$0040
C2EFB6:  BNE C2EF8A     ; -46
C2EFB8:  LDA $10
C2EFBA:  ASL
C2EFBB:  ASL
C2EFBC:  ASL
C2EFBD:  ASL
C2EFBE:  ASL
C2EFBF:  TAX
C2EFC0:  TDC            ; A = 0
C2EFC1:  TAY            ; Y = 0
C2EFC2:  LDA $7F80,X    ; Copy from RAM palette...
C2EFC5:  STA $7E60,Y    ; ...to RAM palette 3
C2EFC8:  INX
C2EFC9:  INY
C2EFCA:  CPY #$0020
C2EFCD:  BNE C2EFC2     ; -13
C2EFCF:  JMP C2F9D3

C2EFD2:  JSR C2F9EB
C2EFD5:  LDA #$01
C2EFD7:  STA $26
C2EFD9:  LDA #$07
C2EFDB:  JSR C2F4F8
C2EFDE:  LDA #$08       ; INC acceptable
C2EFE0:  JMP C2F6E6

C2EFE3:  JSR C2F98B
C2EFE6:  TDC            ; A = 0
C2EFE7:  TAX            ; X = 0
C2EFE8:  LDA $7FC401,X
C2EFEC:  AND #$DF
C2EFEE:  STA $7FC401,X
C2EFF2:  INX
C2EFF3:  INX
C2EFF4:  CPX #$0020
C2EFF7:  BNE C2EFE8     ; -17
C2EFF9:  JSL C1C386
C2EFFD:  RTS

C2EFFE:  LDA #$10
C2F000:  JSR C2F66F
C2F003:  JSL C1C386
C2F007:  LDX #$0060
C2F00A:  JSL C1C3A7
C2F00E:  RTS

C2F00F:  LDA #$03
C2F011:  STA $26
C2F013:  LDA #$03       ; NOT unnecessary!
C2F015:  JSR C2F4F8
C2F018:  LDA #$04       ; INC acceptable
C2F01A:  JSR C2F6E6
C2F01D:  JMP C2F9EB

C2F020:  LDX #$0198
C2F023:  JSL C12452
C2F027:  JSR C2FA70
C2F02A:  JMP C2F809

C2F02D:  PHB
C2F02E:  LDA #$7F
C2F030:  PHA
C2F031:  PLB            ; Data bank register now points to bank $7F
C2F032:  TDC            ; A = 0
C2F033:  TAX            ; X = 0
C2F034:  REP #$20       ; 16-bit A
C2F036:  LDA #$003F
C2F039:  STA $C400,X
C2F03C:  STA $CC00,X
C2F03F:  STA $D400,X
C2F042:  STA $DC00,X
C2F045:  INX
C2F046:  INX
C2F047:  CPX #$0800
C2F04A:  BNE C2F039     ; -19
C2F04C:  TDC            ; Don't really think this is necessary, it's used to clear the high byte before switching to 8-bit A, but it's already clear
C2F04D:  SEP #$20       ; 8-bit A
C2F04F:  PLB
C2F050:  LDA $898D
C2F053:  AND #$FE       ; TRB would've worked...
C2F055:  STA $898D
C2F058:  LDX #$0100
C2F05B:  STX $E9C4
C2F05E:  STX $E9CA
C2F061:  TDC            ; A = 0
C2F062:  TAX            ; X = 0
C2F063:  STX $E9C6
C2F066:  STX $E9C8
C2F069:  STX $E9CC
C2F06C:  STX $E9CE
C2F06F:  RTS

C2F070:  JSR C2F02D
C2F073:  LDX #$018B
C2F076:  PHX
C2F077:  JSL C12400
C2F07B:  JSR C2FA70
C2F07E:  JSL C19EC6
C2F082:  PLX
C2F083:  JSL C12480
C2F087:  JSR C2FA87
C2F08A:  INC $62B0
C2F08D:  RTS

C2F08E:  LDX #$0189
C2F091:  JSL C12452
C2F095:  JSR C2FA70
C2F098:  TDC            ; A = 0
C2F099:  TAY            ; Y = 0
C2F09A:  TAX            ; X = 0
C2F09B:  LDA $6A39,X    ; Caster ID = target ID
C2F09E:  STA $6A38,X
C2F0A1:  REP #$20       ; 16-bit A
C2F0A3:  LDA $6F82,X    ; Animation X-origin
C2F0A6:  STA $6F7E,X
C2F0A9:  LDA $6F84,X    ; Animation Y-origin
C2F0AC:  STA $6F80,X
C2F0AF:  TXA
C2F0B0:  CLC
C2F0B1:  ADC #$0080
C2F0B4:  TAX
C2F0B5:  TDC
C2F0B6:  SEP #$20
C2F0B8:  INY
C2F0B9:  CPX #$0200
C2F0BC:  BNE C2F09B     ; -35
C2F0BE:  JMP C2F809

C2F0C1:  LDX #$0186
C2F0C4:  JSL C12480
C2F0C8:  JSR C2FA87
C2F0CB:  JSR C2FA1B
C2F0CE:  JSR C2FA4F
C2F0D1:  LDA #$CC
C2F0D3:  STA $002124
C2F0D7:  STZ $961B      ; Reset clip plane shape
C2F0DA:  JMP C2F809

C2F0DD:  LDA #$02
C2F0DF:  JSR C2F66F
C2F0E2:  LDX #$018D
C2F0E5:  JSL C12452
C2F0E9:  JSR C2FA70
C2F0EC:  JSR $FA4F      ; Well, this part doesn't seem familiar at all...
C2F0EF:  LDA #$CC
C2F0F1:  STA $002124
C2F0F5:  STZ $961B      ; Reset clip plane shape
C2F0F8:  RTS

C2F0F9:  LDX #$0199
C2F0FC:  JSL C12480
C2F100:  JSR C2FA87
C2F103:  JSR C2FA1B
C2F106:  JMP C2F809

C2F109:  LDX #$0195
C2F10C:  JSL C12452
C2F110:  JSR C2FA70
C2F113:  JSR C2F63E
C2F116:  JMP C2FA33

C2F119:  LDX #$019A
C2F11C:  JSL C12480
C2F120:  JSR C2FA87
C2F123:  JSR C2F9A3
C2F126:  JMP C2F809

C2F129:  LDX #$0197
C2F12C:  JSL C12480
C2F130:  JSR C2FA87
C2F133:  JSR C2F997
C2F136:  JSR C2FA4F
C2F139:  LDA #$3C
C2F13B:  STA $002123
C2F13F:  STZ $961B      ; Reset clip plane shape
C2F142:  LDA $896F
C2F145:  AND #$F7       ; TRB would've worked...
C2F147:  STA $896F
C2F14A:  JMP C2F809

C2F14D:  LDX #$0191
C2F150:  JSL C12480
C2F154:  JSR C2FA87
C2F157:  JSR C2FA27
C2F15A:  JSR C2FA4F
C2F15D:  LDA #$3C
C2F15F:  STA $002123
C2F163:  LDA #$04
C2F165:  STA $961B      ; Set clip plane to a tall oval
C2F168:  JMP C2F809

C2F16B:  LDX #$0193
C2F16E:  JSL C12480
C2F172:  JSR C2FA87
C2F175:  JMP C2F809

C2F178:  STX $10
C2F17A:  TDC            ; A = 0
C2F17B:  TAX            ; X = 0
C2F17C:  REP #$20       ; 16-bit A
C2F17E:  TDC            ; Why do you need this again?!
C2F17F:  TAX            ; ...
C2F180:  LDA #$F708
C2F183:  STA $9A21,X
C2F186:  INX
C2F187:  INX
C2F188:  INX
C2F189:  INX
C2F18A:  CPX $10
C2F18C:  BNE C2F183     ; -11
C2F18E:  TDC            ; A = 0
C2F18F:  SEP #$20
C2F191:  INC $6197
C2F194:  RTS

C2F195:  LDX #$018E
C2F198:  JSL C12452
C2F19C:  JSR C2FA70
C2F19F:  JSR C2FA0F
C2F1A2:  JSL C1C386
C2F1A6:  LDX #$0081
C2F1A9:  JSL C1C3A7
C2F1AD:  JSR C2FA4F
C2F1B0:  LDA #$3C
C2F1B2:  STA $002123
C2F1B6:  LDX #$0200
C2F1B9:  JSR C2F178
C2F1BC:  JSR C2F1CA
C2F1BF:  LDA $896F
C2F1C2:  AND #$F7       ; TRB would've worked...
C2F1C4:  STA $896F
C2F1C7:  JMP C2F809

C2F1CA:  STZ $6F56
C2F1CD:  LDX #$0520
C2F1D0:  LDA $6A2E,X
C2F1D3:  STA $6A3E,X
C2F1D6:  STA $6A4E,X
C2F1D9:  LDA $6F7E,X
C2F1DC:  STA $6F8E,X
C2F1DF:  STA $6F9E,X
C2F1E2:  LDA $74CE,X    ; Animation X-offset
C2F1E5:  STA $74DE,X
C2F1E8:  STA $74EE,X
C2F1EB:  INX
C2F1EC:  CPX #$0530
C2F1EF:  BNE C2F1D0     ; -33
C2F1F1:  INC $6F66
C2F1F4:  LDA #$02
C2F1F6:  STA $6F76
C2F1F9:  RTS

C2F1FA:  STZ $62AD
C2F1FD:  STZ $62AE
C2F200:  JSR C2F66D
C2F203:  LDX #$0183
C2F206:  JSL C12452
C2F20A:  JSR C2FA70
C2F20D:  JSR $FA03      ; Why not JMP?
C2F210:  RTS

C2F211:  LDX #$0182
C2F214:  JSL C12480
C2F218:  JSR C2FA87
C2F21B:  JSR C2F9C7
C2F21E:  JMP C2F809

C2F221:  LDX #$0180
C2F224:  JSL C12480
C2F228:  JSR C2FA87
C2F22B:  JSR C2F9EB
C2F22E:  JMP C2F809

C2F231:  LDX #$0192
C2F234:  JSL C12452
C2F238:  JSR C2FA70
C2F23B:  JSR C2F9EB
C2F23E:  JMP C2F809

C2F241:  STZ $961B      ; Reset clip plane shape
C2F244:  JSR C2FA4F
C2F247:  LDA #$CC
C2F249:  STA $002124
C2F24D:  LDX #$0187
C2F250:  JSL C12480
C2F254:  JSR C2FA87
C2F257:  JSR C2FA1B
C2F25A:  JMP C2F809

C2F25D:  LDA #$06
C2F25F:  STA $961B      ; Set clip plane to a wide oval
C2F262:  JSR C2FA4F
C2F265:  LDA #$3C
C2F267:  STA $002123
C2F26B:  LDX #$0184
C2F26E:  JSL C12480
C2F272:  JSR C2FA87
C2F275:  JSR C2F9A3
C2F278:  JMP C2F809

C2F27B:  LDX #$0185
C2F27E:  JSL C12480
C2F282:  JSR C2FA87
C2F285:  INC $62B0
C2F288:  RTS

C2F289:  LDX #$0181
C2F28C:  JSL C12480
C2F290:  JSR C2FA87
C2F293:  JSR C2FA27
C2F296:  JMP C2F809

C2F299:  JSR C2F9AF
C2F29C:  JSR C2FA4F
C2F29F:  LDA #$3C
C2F2A1:  STA $002123
C2F2A5:  LDA #$CC
C2F2A7:  STA $002124
C2F2AB:  LDA #$07
C2F2AD:  STA $961B      ; Set clip plane to dome
C2F2B0:  LDA $896F
C2F2B3:  AND #$F7       ; TRB would've worked...
C2F2B5:  STA $896F
C2F2B8:  RTS

C2F2B9:  JSR C2F630
C2F2BC:  JMP C2F8CA

C2F2BF:  JSR C2F8CA
C2F2C2:  LDX #$8402
C2F2C5:  STX $10
C2F2C7:  LDA #$13
C2F2C9:  JSL C1B000
C2F2CD:  JSR C2FA4F
C2F2D0:  LDA #$CC
C2F2D2:  STA $002124
C2F2D6:  STZ $961B      ; Reset clip plane shape
C2F2D9:  JSL C1B07E
C2F2DD:  LDA $896F
C2F2E0:  ORA #$48       ; TSB would've worked...
C2F2E2:  STA $896F
C2F2E5:  TDC            ; A = 0
C2F2E6:  TAX            ; X = 0
C2F2E7:  STX $4AF5      ; Battle info window text X-offset
C2F2EA:  STX $4AF7      ; " " " " Y-offset
C2F2ED:  INC $60AD
C2F2F0:  RTS

C2F2F1:  JSL C19A9E
C2F2F5:  LDA $10
C2F2F7:  BMI C2F304     ; Branch if entity is an enemy
C2F2F9:  ASL
C2F2FA:  ASL
C2F2FB:  ASL
C2F2FC:  ASL
C2F2FD:  ASL
C2F2FE:  TAY
C2F2FF:  LDA #$30
C2F301:  STA $61BD,Y    ; Draw character in correct orientation
C2F304:  RTS

C2F305:  JSL C1C386
C2F309:  STZ $7B67
C2F30C:  JSL C10226
C2F310:  JSL C1C3F1
C2F314:  LDA $896F
C2F317:  AND #$EF       ; Seriously, what do you have against TRB and TSB?!
C2F319:  STA $896F
C2F31C:  JSL C1AAA1
C2F320:  LDA $12
C2F322:  AND #$7F
C2F324:  SEC
C2F325:  SBC #$04
C2F327:  JSR C2FA9E
C2F32A:  PHA
C2F32B:  JSL C11E5F
C2F32F:  JSR C2F2F1
C2F332:  JSL C11F22
C2F336:  JSL C10226
C2F33A:  PLA
C2F33B:  EOR #$FF
C2F33D:  STA $60AB
C2F340:  LDA $627D
C2F343:  AND #$7F       ; TRB... TRB...
C2F345:  STA $627D
C2F348:  LDA #$02
C2F34A:  STA $7B0E
C2F34D:  STA $7B0F
C2F350:  RTS

C2F351:  JSR C2F35D
C2F354:  LDA #$06
C2F356:  STA $961B      ; Set clip plane to a wide oval
C2F359:  STZ $60AC
C2F35C:  RTS

C2F35D:  INC $60AC
C2F360:  JSR C2F9EB
C2F363:  JSR C2FA4F
C2F366:  STZ $961B      ; Reset clip plane shape
C2F369:  LDA #$3C
C2F36B:  STA $002123
C2F36F:  JSL C1AAA1
C2F373:  LDA $12
C2F375:  BPL C2F384     ; Branch if entity is not an enemy
C2F377:  AND #$0F
C2F379:  SEC
C2F37A:  SBC #$04
C2F37C:  ASL A
C2F37D:  TAY
C2F37E:  LDA #$31
C2F380:  STA $80DC,Y    ; Draw enemy in correct orientation
C2F383:  RTS

C2F384:  AND #$03
C2F386:  ASL
C2F387:  ASL
C2F388:  ASL
C2F389:  ASL
C2F38A:  ASL
C2F38B:  TAY
C2F38C:  LDA #$30
C2F38E:  STA $61BD,Y    ; Draw character in correct orientation
C2F391:  RTS

C2F392:  LDA #$08
C2F394:  STA $26
C2F396:  LDA #$05
C2F398:  JSR C2F4F8
C2F39B:  LDA #$06       ; INC acceptable
C2F39D:  JSR C2F6E6
C2F3A0:  JSR C2FA1B
C2F3A3:  JSR C2FA4F
C2F3A6:  LDA #$3C
C2F3A8:  STA $002123
C2F3AC:  LDA #$04
C2F3AE:  STA $961B      ; Set clip plane to a tall oval
C2F3B1:  INC $60AC
C2F3B4:  RTS

C2F3B5:  LDA #$08
C2F3B7:  STA $26
C2F3B9:  LDA #$05
C2F3BB:  JSR C2F4F8
C2F3BE:  LDA #$06       ; INC acceptable
C2F3C0:  JSR C2F6E6
C2F3C3:  JSR C2FA03
C2F3C6:  JSR C2FA4F
C2F3C9:  LDA #$3C
C2F3CB:  STA $002123
C2F3CF:  LDA #$CC
C2F3D1:  STA $002124
C2F3D5:  STZ $961B      ; Reset clip plane shape
C2F3D8:  RTS

C2F3D9:  JSR C2FA1B
C2F3DC:  LDA #$CC
C2F3DE:  STA $002124
C2F3E2:  JSR C2FA4F
C2F3E5:  STZ $961B      ; Reset clip plane shape
C2F3E8:  RTS

C2F3E9:  JSR C2F9DF
C2F3EC:  JSR C2FA4F
C2F3EF:  LDA #$CC
C2F3F1:  STA $002124
C2F3F5:  LDA #$02
C2F3F7:  STA $961B      ; Set clip plane to wavy
C2F3FA:  RTS

C2F3FB:  LDA #$00       ; Not TDC?
C2F3FD:  STA $26
C2F3FF:  LDA #$02
C2F401:  JSR C2F4F8
C2F404:  LDA #$03       ; INC acceptable
C2F406:  JSR C2F6E6
C2F409:  LDA $896F
C2F40C:  AND #$F7       ; I keep telling you about TRB and TSB, but apparently you just won't listen to me...
C2F40E:  STA $896F
C2F411:  JSR C2F9BB
C2F414:  INC $60AC
C2F417:  RTS

C2F418:  LDA #$08
C2F41A:  STA $26
C2F41C:  LDA #$05
C2F41E:  JSR C2F4F8
C2F421:  LDA #$06       ; INC acceptable
C2F423:  JSR C2F6E6
C2F426:  JSR C2FA33
C2F429:  JSR C2FA4F
C2F42C:  LDA #$CC
C2F42E:  STA $002124
C2F432:  STZ $961B      ; Reset clip plane shape
C2F435:  RTS

C2F436:  JSR C2FA33
C2F439:  JSR C2FA4F
C2F43C:  LDA #$3C
C2F43E:  STA $002123
C2F442:  STZ $961B      ; Reset clip plane shape
C2F445:  JSL C1C386
C2F449:  JSL C19A9E
C2F44D:  LDA $10
C2F44F:  JSL C1C3ED
C2F453:  LDA $10
C2F455:  AND #$03
C2F457:  ASL
C2F458:  ASL
C2F459:  ASL
C2F45A:  ASL
C2F45B:  ASL
C2F45C:  TAY
C2F45D:  LDA #$30
C2F45F:  STA $61BD,Y
C2F462:  LDA #$02
C2F464:  STA $7B0E
C2F467:  STA $7B0F
C2F46A:  RTS

C2F46B:  JSR C2FA33
C2F46E:  JSR C2FA4F
C2F471:  LDA #$CC
C2F473:  STA $002124
C2F477:  STZ $961B      ; Reset clip plane shape
C2F47A:  INC $60AC
C2F47D:  INC $60AD
C2F480:  LDA #$02
C2F482:  STA $7B0E
C2F485:  STA $7B0F
C2F488:  RTS

C2F489:  JSR C2FA33
C2F48C:  INC $60AC
C2F48F:  LDA #$02
C2F491:  STA $7B0E
C2F494:  STA $7B0F
C2F497:  RTS

C2F498:  JSR C2F49C
C2F49B:  RTL

C2F49C:  INC $60AC
C2F49F:  LDA #$08
C2F4A1:  STA $7B0E
C2F4A4:  STA $7B0F
C2F4A7:  LDX #$0102
C2F4AA:  STX $10
C2F4AC:  LDA #$12
C2F4AE:  JSL C1B000
C2F4B2:  RTS

C2F4B3:  JSL C19A9E
C2F4B7:  LDA $10
C2F4B9:  REP #$20       ; 16-bit A
C2F4BB:  ASL A
C2F4BC:  TAX
C2F4BD:  LDA C2CE8B,X
C2F4C1:  CLC
C2F4C2:  ADC #$0010
C2F4C5:  TAX
C2F4C6:  TDC
C2F4C7:  SEP #$20       ; 8-bit A
C2F4C9:  RTS

C2F4CA:  JSR C2F4B3
C2F4CD:  LDA #$01
C2F4CF:  STA $6A35,X
C2F4D2:  STA $6A45,X
C2F4D5:  STA $6A55,X
C2F4D8:  LDA #$00       ; Not TDC? Or DEC?
C2F4DA:  STA $74D8,X
C2F4DD:  LDA #$55
C2F4DF:  STA $74E8,X
C2F4E2:  LDA #$AA
C2F4E4:  STA $74F8,X
C2F4E7:  LDX #$0302
C2F4EA:  STX $10
C2F4EC:  LDA #$10
C2F4EE:  JSL C1B000
C2F4F2:  LDA #$04
C2F4F4:  STA $7B0F
C2F4F7:  RTS

C2F4F8:  STA $22
C2F4FA:  LDA $26
C2F4FC:  STA $28
C2F4FE:  LDX $613D
C2F501:  STX $12
C2F503:  TXA
C2F504:  ASL
C2F505:  ASL
C2F506:  ASL
C2F507:  ASL
C2F508:  STA $12
C2F50A:  REP #$20       ; 16-bit A
C2F50C:  LDA $12
C2F50E:  LSR
C2F50F:  LSR
C2F510:  LSR
C2F511:  LSR
C2F512:  STA $12
C2F514:  LDA $6080
C2F517:  LSR
C2F518:  LSR
C2F519:  LSR
C2F51A:  LSR
C2F51B:  STA $6080
C2F51E:  STZ $24
C2F520:  TDC
C2F521:  SEP #$20       ; 8-bit A
C2F523:  LDA $6080
C2F526:  AND #$01
C2F528:  BNE C2F56F     ; +69
C2F52A:  LDA $12
C2F52C:  AND #$01
C2F52E:  BEQ C2F56F     ; +63
C2F530:  LDA $22
C2F532:  STA $14
C2F534:  LDX $24
C2F536:  LDA #$01
C2F538:  STA $1A
C2F53A:  STX $1E
C2F53C:  LDA #$10
C2F53E:  STA $10
C2F540:  LDA $6A2E,X
C2F543:  STA $6A3E,X
C2F546:  LDA $6F7E,X
C2F549:  STA $6F8E,X
C2F54C:  LDA $74CE,X
C2F54F:  STA $74DE,X
C2F552:  INX
C2F553:  DEC $10
C2F555:  BNE C2F540     ; -23
C2F557:  PHX
C2F558:  LDX $1E
C2F55A:  LDA $1A
C2F55C:  STA $6A46,X
C2F55F:  INC $1A
C2F561:  LDA $6A35,X
C2F564:  CLC
C2F565:  ADC $26
C2F567:  STA $6A45,X
C2F56A:  PLX
C2F56B:  DEC $14
C2F56D:  BNE C2F53A     ; -53
C2F56F:  ROR $13
C2F571:  ROR $12
C2F573:  ROR $6081
C2F576:  ROR $6080
C2F579:  REP #$20       ; 16-bit A
C2F57B:  LDA $24
C2F57D:  CLC
C2F57E:  ADC #$0080
C2F581:  STA $24
C2F583:  TAX
C2F584:  TDC
C2F585:  SEP #$20       ; 8-bit A
C2F587:  CPX #$0500
C2F58A:  BNE C2F523     ; -105
C2F58C:  RTS

C2F58D:  JSR C2FA33
C2F590:  LDA #$08       ; 8
C2F592:  STA $26
C2F594:  LDA #$05       ; 5
C2F596:  JSR C2F4F8
C2F599:  LDA #$06       ; 6
C2F59B:  JMP C2F6E6

C2F59E:  JMP C2FA33     ; Is this really needed?

C2F5A1:  JMP C2FA33     ; Is THIS really needed?

C2F5A4:  LDA #$00       ; 0
C2F5A6:  STA $26
C2F5A8:  LDA #$07       ; 7
C2F5AA:  JSR C2F4F8
C2F5AD:  LDA #$08       ; 8
C2F5AF:  JSR C2F6E6
C2F5B2:  JSR C2FA4F
C2F5B5:  LDA #$3C       ; 60
C2F5B7:  STA $002123
C2F5BB:  STZ $961B      ; Reset clip plane shape
C2F5BE:  JMP C2FA27

C2F5C1:  INC $60AC
C2F5C4:  LDA #$00       ; 0
C2F5C6:  STA $26
C2F5C8:  LDA #$05       ; 5
C2F5CA:  JSR C2F4F8
C2F5CD:  LDA #$06       ; 6
C2F5CF:  JMP C2F6E6

C2F5D2:  LDY #$2800     ; 10,240
C2F5D5:  JSL C1B109
C2F5D9:  LDA $898D
C2F5DC:  AND #$FE
C2F5DE:  STA $898D
C2F5E1:  LDY #$0003
C2F5E4:  LDA ($76),Y
C2F5E6:  ASL
C2F5E7:  TAX
C2F5E8:  REP #$20       ; 16-bit A
C2F5EA:  LDA $2001,X    ; Enemy sprite ID
C2F5ED:  TAX
C2F5EE:  TDC
C2F5EF:  SEP #$20       ; 8-bit A
C2F5F1:  JSL C124D1
C2F5F5:  JMP C2F809

C2F5F8:  LDA #$08       ; 8
C2F5FA:  STA $26
C2F5FC:  LDA #$05       ; 5
C2F5FE:  JSR C2F4F8
C2F601:  LDA #$06       ; 6
C2F603:  JSR C2F6E6
C2F606:  JSR C2FA1B
C2F609:  INC $60AC
C2F60C:  RTS

C2F60D:  LDA #$08       ; 8
C2F60F:  STA $26
C2F611:  LDA #$05       ; 5
C2F613:  JSR C2F4F8
C2F616:  LDA #$06       ; 6
C2F618:  JSR C2F6E6
C2F61B:  JSR C2FA27
C2F61E:  JSR C2FA4F
C2F621:  LDA #$3C       ; 60
C2F623:  STA $002123
C2F627:  LDA #$05       ; 5
C2F629:  STA $961B      ; Set clip plane to wavy in
C2F62C:  INC $60AC
C2F62F:  RTS

C2F630:  LDA #$06       ; 6
C2F632:  STA $26
C2F634:  LDA #$05       ; 5
C2F636:  JSR C2F4F8
C2F639:  LDA #$06       ; 6
C2F63B:  JMP C2F6E6

C2F63E:  STZ $26
C2F640:  LDA #$03       ; 3
C2F642:  JSR C2F4F8
C2F645:  LDA #$04       ; 4
C2F647:  JSR C2F6E6
C2F64A:  JMP C2FA1B

; Data of some kind.
C2F64D:  db $00
C2F64E:  db $05
C2F64F:  db $02
C2F650:  db $01
C2F651:  db $01
C2F652:  db $00
C2F653:  db $00

C2F654:  db $01
C2F655:  db $06
C2F656:  db $03
C2F657:  db $02
C2F658:  db $02
C2F659:  db $01
C2F65A:  db $01

C2F65B:  JSR C2FA03
C2F65E:  JSR C2FA4F
C2F661:  LDA #$3C       ; 60
C2F663:  STA $002123
C2F667:  LDA #$CC       ; -52
C2F669:  STA $002124
C2F66D:  LDA #$08       ; 8
C2F66F:  STA $26
C2F671:  TDC            ; A = 0
C2F672:  TAX            ; X = 0
C2F673:  REP #$20       ; 16-bit A
C2F675:  LDA $613D
C2F678:  LDY #$0010     ; 16
C2F67B:  ASL
C2F67C:  BCC C2F67F     ; +1
C2F67E:  INX            ; Count the number of 1s in $613D and $613E
C2F67F:  DEY
C2F680:  BNE C2F67B     ; -7
C2F682:  CPX #$0006     ; 6
C2F685:  BCC C2F68A     ; +3
C2F687:  LDX #$0006     ; X <= 6
C2F68A:  TDC            ; A = 0
C2F68B:  SEP #$20
C2F68D:  LDA #$06       ; 6
C2F68F:  STA $961B      ; Set clip plane to a wide oval
C2F692:  LDA C2F64D,X
C2F696:  BEQ C2F69D     ; +5
C2F698:  PHX
C2F699:  JSR C2F4F8
C2F69C:  PLX
C2F69D:  LDA C2F654,X
C2F6A1:  JMP C2F6E6     ; BRA acceptable

C2F6A4:  JSR C2FA27
C2F6A7:  JSR C2FA4F
C2F6AA:  LDA #$3C       ; 60
C2F6AC:  STA $002123
C2F6B0:  STZ $961B      ; Reset clip plane shape
C2F6B3:  INC $60AC
C2F6B6:  LDA #$03       ; 3
C2F6B8:  STA $26
C2F6BA:  LDA #$05       ; 5
C2F6BC:  JSR C2F4F8
C2F6BF:  LDA #$06       ; 6
C2F6C1:  JMP C2F6E6     ; BRA acceptable

C2F6C4:  JSR C2FA3F
C2F6C7:  LDA #$08       ; 8
C2F6C9:  STA $26
C2F6CB:  LDA #$02       ; 2
C2F6CD:  JSR C2F4F8
C2F6D0:  LDA #$03       ; 3
C2F6D2:  JMP C2F6E6     ; BRA acceptable

C2F6D5:  JSR C2FA1B
C2F6D8:  LDA #$28       ; 40
C2F6DA:  STA $26
C2F6DC:  LDA #$01       ; 1
C2F6DE:  JSR C2F4F8
C2F6E1:  LDA #$02       ; 2
C2F6E3:  JMP C2F6E6     ; Not needed here!

C2F6E6:  STA $7B0F      ; Um, why are all of the next few functions lacking JMPs that go here?
C2F6E9:  STA $7B0E
C2F6EC:  RTS

C2F6ED:  JSR C2F4B3
C2F6F0:  LDA #$01       ; 1
C2F6F2:  STA $6A35,X
C2F6F5:  STA $6A45,X
C2F6F8:  LDA #$09       ; 9
C2F6FA:  STA $6A55,X
C2F6FD:  STA $6A65,X
C2F700:  LDA #$11       ; 11
C2F702:  STA $6A75,X
C2F705:  STA $6A85,X
C2F708:  LDA #$01       ; 1
C2F70A:  STA $6FAC,X
C2F70D:  STA $6FBC,X
C2F710:  LDA #$02       ; INC acceptable
C2F712:  STA $6FCC,X
C2F715:  STA $6FDC,X
C2F718:  LDA #$80       ; -128
C2F71A:  STA $74E8,X
C2F71D:  STA $7508,X
C2F720:  STA $7528,X
C2F723:  TDC            ; A = 0
C2F724:  STA $74D9,X
C2F727:  STA $74F9,X
C2F72A:  STA $7519,X
C2F72D:  LDA #$FF       ; DEC acceptable
C2F72F:  STA $74E9,X
C2F732:  STA $7509,X
C2F735:  STA $7529,X
C2F738:  JSR C2F741
C2F73B:  LDA #$07       ; 7
C2F73D:  STA $7B0F
C2F740:  RTS

C2F741:  JSR C2FA1B
C2F744:  JSL C1C386
C2F748:  JSL C19A9E
C2F74C:  LDA $10
C2F74E:  JSL C1C3ED
C2F752:  LDA #$02       ; 2
C2F754:  STA $7B0E
C2F757:  STA $7B0F
C2F75A:  LDA $896F
C2F75D:  AND #$F7
C2F75F:  STA $896F
C2F762:  RTS

C2F763:  JSR C2FA1B
C2F766:  JSR C2FA4F
C2F769:  LDA #$3C       ; 60
C2F76B:  STA $002123
C2F76F:  LDA #$03       ; 3
C2F771:  STA $961B      ; Set clip plane to a pillar
C2F774:  LDA #$02       ; DEC acceptable
C2F776:  STA $7B0E
C2F779:  STA $7B0F
C2F77C:  RTS

C2F77D:  JSR C2F9F7
C2F780:  JSR C2FA4F
C2F783:  LDA #$3C       ; 60
C2F785:  STA $002123
C2F789:  STZ $961B      ; Reset clip plane shape
C2F78C:  LDA #$02       ; 2
C2F78E:  STA $7B0E
C2F791:  STA $7B0F
C2F794:  RTS

C2F795:  JSR C2F9D3
C2F798:  LDA #$02       ; 2
C2F79A:  STA $7B0E
C2F79D:  STA $7B0F
C2F7A0:  RTS

C2F7A1:  JSR C2FA1B
C2F7A4:  JSR C2FA4F
C2F7A7:  LDA #$3C       ; 60
C2F7A9:  STA $002123
C2F7AD:  STZ $961B      ; Reset clip plane shape
C2F7B0:  JSL C1C386
C2F7B4:  JSL C19A9E
C2F7B8:  LDA $10
C2F7BA:  JSL C1C3ED
C2F7BE:  LDA #$02       ; 2
C2F7C0:  STA $7B0E
C2F7C3:  STA $7B0F
C2F7C6:  RTS

C2F7C7:  JSR C2FA27
C2F7CA:  JSR C2FA4F
C2F7CD:  LDA #$3C       ; 60
C2F7CF:  STA $002123
C2F7D3:  JSL C1C386
C2F7D7:  JSL C19A9E
C2F7DB:  LDA $10
C2F7DD:  JSL C1C3ED
C2F7E1:  LDA #$02       ; 2
C2F7E3:  STA $961B      ; Set clip plane to wavy. Could've used a BRA...
C2F7E6:  LDA #$02       ; And even though you didn't, this instruction is needless!
C2F7E8:  STA $7B0E
C2F7EB:  STA $7B0F
C2F7EE:  RTS

C2F7EF:  JSR C2FA33
C2F7F2:  JSR C2FA4F
C2F7F5:  LDA #$CC       ; -52
C2F7F7:  STA $002124
C2F7FB:  LDA #$01       ; 1
C2F7FD:  STA $961B      ; Set clip plane to a circle
C2F800:  LDA #$02       ; 2
C2F802:  STA $7B0E
C2F805:  STA $7B0F
C2F808:  RTS

C2F809:  LDA #$02       ; 2
C2F80B:  STA $7B0E
C2F80E:  STA $7B0F
C2F811:  RTS

C2F812:  INC $60AA
C2F815:  LDA #$06       ; 6
C2F817:  STA $7B0E
C2F81A:  LDA #$02       ; 2
C2F81C:  STA $7B0F
C2F81F:  RTS

C2F820:  INC $60AC
C2F823:  LDA #$02       ; 2
C2F825:  STA $7B0F
C2F828:  JMP C2FA3F

C2F82B:  LDA #$06       ; 6
C2F82D:  STA $7B0E
C2F830:  STA $7B0F
C2F833:  JMP C2FA3F

C2F836:  JMP C2FA3F     ; ???

C2F839:  JMP C2FA1B     ; ???

C2F83C:  LDA $896F
C2F83F:  AND #$F7
C2F841:  STA $896F
C2F844:  JMP C2FA0F

C2F847:  REP #$20       ; 16-bit A
C2F849:  LDA $6080
C2F84C:  EOR #$FFFF
C2F84F:  STA $22        ; Animation script pointer
C2F851:  LDA $607E
C2F854:  AND $22
C2F856:  PHA
C2F857:  TDC
C2F858:  SEP #$20       ; 8-bit A
C2F859:  PLX
C2F85B:  BNE C2F85E     ; +1
C2F85D:  RTS

C2F85E:  STZ $7B67
C2F861:  JSL C1C386
C2F865:  JSL C10226
C2F869:  JSL C1C3F1
C2F86D:  JSL C1B07E
C2F871:  JSL C1AAA1
C2F875:  LDA $12
C2F877:  BPL C2F88F     ; +22
C2F879:  AND #$7F
C2F87B:  SEC
C2F87C:  SBC #$04       ; 4
C2F87E:  JSR C2FA9E
C2F881:  JSL C11E5F
C2F885:  JSL C11F22
C2F889:  JSL C10226
C2F88D:  BRA C2F8AE     ; +31

C2F88F:  AND #$03
C2F891:  ASL
C2F892:  ASL
C2F893:  ASL
C2F894:  ASL
C2F895:  ASL
C2F896:  TAX
C2F897:  TDC
C2F898:  TAY
C2F899:  LDA $7F80,X
C2F89C:  STA $7E60,Y
C2F89F:  INY
C2F8A0:  INX
C2F8A1:  CPY #$0020     ; 32
C2F8A4:  BNE C2F899     ; -13
C2F8A6:  LDA $896F
C2F8A9:  ORA #$10
C2F8AB:  STA $896F
C2F8AE:  LDA $627D
C2F8B1:  AND #$7F
C2F8B3:  STA $627D
C2F8B6:  JSR C2F36F
C2F8B9:  JSL C10226
C2F8BD:  LDA $896F
C2F8C0:  AND #$F7
C2F8C2:  ORA #$40
C2F8C4:  STA $896F
C2F8C7:  JMP C2FA1B

C2F8CA:  STZ $7B67
C2F8CD:  JSL C1C386
C2F8D1:  JSL C10226
C2F8D5:  JSL C1B07E
C2F8D9:  JSL C1AAA1
C2F8DD:  LDA $12
C2F8DF:  BPL C2F925     ; +68
C2F8E1:  AND #$7F
C2F8E3:  SEC
C2F8E4:  SBC #$04       ; 4
C2F8E6:  JSR C2FA9E
C2F8E9:  PHA
C2F8EA:  STA $14
C2F8EC:  JSR C2EA54
C2F8EF:  LDA $898D
C2F8F2:  PHA
C2F8F3:  AND #$FE
C2F8F5:  STA $898D
C2F8F8:  LDA $14
C2F8FA:  JSL C11E5F
C2F8FE:  JSL C11F22
C2F902:  JSL C1C3F1
C2F906:  JSL C10226
C2F90A:  JSR C2EA54
C2F90D:  LDA $896F
C2F910:  AND #$E7
C2F912:  STA $896F
C2F915:  PLA
C2F916:  STA $898D
C2F919:  PLA
C2F91A:  EOR #$FF
C2F91C:  STA $60AB
C2F91F:  JSL C10226
C2F923:  BRA C2F95C     ; +55

C2F925:  PHA
C2F926:  JSR C2EA54
C2F929:  LDA $898D
C2F92C:  PHA
C2F92D:  AND #$FE
C2F92F:  STA $898D
C2F932:  LDA $896F
C2F935:  AND #$E7
C2F937:  ORA #$50
C2F939:  STA $896F
C2F93C:  JSL C11E55
C2F940:  PLA
C2F941:  STA $898D
C2F944:  PLA
C2F945:  AND #$03
C2F947:  ASL
C2F948:  ASL
C2F949:  ASL
C2F94A:  ASL
C2F94B:  ASL
C2F94C:  TAX
C2F94D:  TDC            ; A = 0
C2F94E:  TAY            ; Y = 0
C2F94F:  LDA $7F80,X
C2F952:  STA $7E60,Y
C2F955:  INY
C2F956:  INX
C2F957:  CPY #$0020     ; 32
C2F95A:  BNE C2F94F     ; -13
C2F95C:  LDA $627D
C2F95F:  AND #$7F
C2F961:  STA $627D
C2F964:  JMP C2FA0F

; Not sure what these functions do. They're all similar, though, so I could see a much more efficient way to do this.
C2F967:  LDX #$0402     ; 1,026
C2F96A:  STX $10
C2F96C:  LDA #$01       ; 1
C2F96E:  JSL C1B000
C2F972:  RTS

C2F973:  LDX #$4502     ; 17,666
C2F976:  STX $10
C2F978:  LDA #$12       ; 18
C2F97A:  JSL C1B000
C2F97E:  RTS

C2F97F:  LDX #$0402     ; 1,026
C2F982:  STX $10
C2F984:  LDA #$03       ; 3
C2F986:  JSL C1B000
C2F98A:  RTS

C2F98B:  LDX #$0102     ; 258
C2F98E:  STX $10
C2F990:  LDA #$02       ; 2
C2F992:  JSL C1B000
C2F996:  RTS

C2F997:  LDX #$0102     ; 258
C2F99A:  STX $10
C2F99C:  LDA #$14       ; 20
C2F99E:  JSL C1B000
C2F9A2:  RTS

C2F9A3:  LDX #$0402     ; 1,026
C2F9A6:  STX $10
C2F9A8:  LDA #$12       ; 18
C2F9AA:  JSL C1B000
C2F9AE:  RTS

C2F9AF:  LDX #$4102     ; 16,642
C2F9B2:  STX $10
C2F9B4:  LDA #$14       ; 20
C2F9B6:  JSL C1B000
C2F9BA:  RTS

C2F9BB:  LDX #$0202     ; 514
C2F9BE:  STX $10
C2F9C0:  LDA #$04       ; 4
C2F9C2:  JSL C1B000
C2F9C6:  RTS

C2F9C7:  LDX #$0502     ; 1,282
C2F9CA:  STX $10
C2F9CC:  LDA #$12       ; 18
C2F9CE:  JSL C1B000
C2F9D2:  RTS

C2F9D3:  LDX #$4102     ; 16,642
C2F9D6:  STX $10
C2F9D8:  LDA #$12       ; 18
C2F9DA:  JSL C1B000
C2F9DE:  RTS

C2F9DF:  LDX #$0402     ; 1,026
C2F9E2:  STX $10
C2F9E4:  LDA #$10       ; 16
C2F9E6:  JSL C1B000
C2F9EA:  RTS

C2F9EB:  LDX #$0202     ; 514
C2F9EE:  STX $10
C2F9F0:  LDA #$10       ; 16
C2F9F2:  JSL C1B000
C2F9F6:  RTS

C2F9F7:  LDX #$4102     ; 16,642
C2F9FA:  STX $10
C2F9FC:  LDA #$10       ; 16
C2F9FE:  JSL C1B000
C2FA02:  RTS

C2FA03:  LDX #$0402     ; 1,026
C2FA06:  STX $10
C2FA08:  LDA #$11       ; 17
C2FA0A:  JSL C1B000
C2FA0E:  RTS

C2FA0F:  LDX #$0102     ; 258
C2FA12:  STX $10
C2FA14:  LDA #$04       ; 4
C2FA16:  JSL C1B000
C2FA1A:  RTS

C2FA1B:  LDX #$0102     ; 258
C2FA1E:  STX $10
C2FA20:  LDA #$12       ; 18
C2FA22:  JSL C1B000
C2FA26:  RTS

C2FA27:  LDX #$0102     ; 258
C2FA2A:  STX $10
C2FA2C:  LDA #$10       ; 16
C2FA2E:  JSL C1B000
C2FA32:  RTS

C2FA33:  LDX #$0402     ; 1,026
C2FA36:  STX $10
C2FA38:  LDA #$13       ; 19
C2FA3A:  JSL C1B000
C2FA3E:  RTS

C2FA3F:  LDX #$0302     ; 770
C2FA42:  STX $10
C2FA44:  LDA #$10       ; 16
C2FA46:  JSL C1B000
C2FA4A:  RTS

; Called from C1/B0D6.
C2FA4B:  JSR C2FA4F
C2FA4E:  RTL

; Some sort of resetting/initializing of variables here.
C2FA4F:  TDC            ; A = 0
C2FA50:  TAX            ; X = 0
C2FA51:  TAY            ; Y = 0
C2FA52:  LDA #$FF       ; DEC A would work too...
C2FA54:  STA $9A21,X
C2FA57:  STA $961F,Y
C2FA5A:  INC            ; A = 0
C2FA5B:  STA $9A22,X
C2FA5E:  STA $9620,Y
C2FA61:  INY
C2FA62:  INY
C2FA63:  INX #4
C2FA67:  CPX #$025C     ; 604
C2FA6A:  BNE C2FA52     ; -26
C2FA6C:  INC $6197
C2FA6F:  RTS

; This function copies a monster palette from ROM to RAM.
C2FA70:  LDX $6169
C2FA73:  TDC            ; A = 0
C2FA74:  TAY            ; Y = 0
C2FA75:  LDA $D27820,X  ; Monster palette
C2FA79:  STA $7E60,Y    ; Store to RAM palette 3
C2FA7C:  STA $7C60,Y    ; Store to temp palette 3
C2FA7F:  INX
C2FA80:  INY
C2FA81:  CPY #$0020     ; 32
C2FA84:  BNE C2FA75     ; -17
C2FA86:  RTS

; This function copies a monster palette from ROM to a different location in RAM.
C2FA87:  LDX $6169
C2FA8A:  TDC            ; A = 0
C2FA8B:  TAY            ; Y = 0
C2FA8C:  LDA $D27820,X  ; Monster palette
C2FA90:  STA $7F60,Y    ; Store to RAM palette B
C2FA93:  STA $7D60,Y    ; Store to temp palette B
C2FA96:  INX
C2FA97:  INY
C2FA98:  CPY #$0020     ; 32
C2FA9B:  BNE C2FA8C     ; -17
C2FA9D:  RTS

C2FA9E:  TAX
C2FA9F:  LDA C11A01,X   ; A = 2^X
C2FAA3:  RTS

; Unused Space (457 bytes)(C2/FAA4 - C2/FC6C)
; The first 7 bytes are NOT available in FF3us v1.1
C2FAA4:  dd $FFFFFFFF
C2FAA8:  dd $FFFFFFFF
C2FAAC:  dd $FFFFFFFF
C2FAB0:  dd $FFFFFFFF
C2FAB4:  dd $FFFFFFFF
C2FAB8:  dd $FFFFFFFF
C2FABC:  dd $FFFFFFFF
C2FAC0:  dd $FFFFFFFF
C2FAC4:  dd $FFFFFFFF
C2FAC8:  dd $FFFFFFFF
C2FACC:  dd $FFFFFFFF
C2FAD0:  dd $FFFFFFFF
C2FAD4:  dd $FFFFFFFF
C2FAD8:  dd $FFFFFFFF
C2FADC:  dd $FFFFFFFF
C2FAE0:  dd $FFFFFFFF
C2FAE4:  dd $FFFFFFFF
C2FAE8:  dd $FFFFFFFF
C2FAEC:  dd $FFFFFFFF
C2FAF0:  dd $FFFFFFFF
C2FAF4:  dd $FFFFFFFF
C2FAF8:  dd $FFFFFFFF
C2FAFC:  dd $FFFFFFFF
C2FB00:  dd $FFFFFFFF
C2FB04:  dd $FFFFFFFF
C2FB08:  dd $FFFFFFFF
C2FB0C:  dd $FFFFFFFF
C2FB10:  dd $FFFFFFFF
C2FB14:  dd $FFFFFFFF
C2FB18:  dd $FFFFFFFF
C2FB1C:  dd $FFFFFFFF
C2FB20:  dd $FFFFFFFF
C2FB24:  dd $FFFFFFFF
C2FB28:  dd $FFFFFFFF
C2FB2C:  dd $FFFFFFFF
C2FB30:  dd $FFFFFFFF
C2FB34:  dd $FFFFFFFF
C2FB38:  dd $FFFFFFFF
C2FB3C:  dd $FFFFFFFF
C2FB40:  dd $FFFFFFFF
C2FB44:  dd $FFFFFFFF
C2FB48:  dd $FFFFFFFF
C2FB4C:  dd $FFFFFFFF
C2FB50:  dd $FFFFFFFF
C2FB54:  dd $FFFFFFFF
C2FB58:  dd $FFFFFFFF
C2FB5C:  dd $FFFFFFFF
C2FB60:  dd $FFFFFFFF
C2FB64:  dd $FFFFFFFF
C2FB68:  dd $FFFFFFFF
C2FB6C:  dd $FFFFFFFF
C2FB70:  dd $FFFFFFFF
C2FB74:  dd $FFFFFFFF
C2FB78:  dd $FFFFFFFF
C2FB7C:  dd $FFFFFFFF
C2FB80:  dd $FFFFFFFF
C2FB84:  dd $FFFFFFFF
C2FB88:  dd $FFFFFFFF
C2FB8C:  dd $FFFFFFFF
C2FB90:  dd $FFFFFFFF
C2FB94:  dd $FFFFFFFF
C2FB98:  dd $FFFFFFFF
C2FB9C:  dd $FFFFFFFF
C2FBA0:  dd $FFFFFFFF
C2FBA4:  dd $FFFFFFFF
C2FBA8:  dd $FFFFFFFF
C2FBAC:  dd $FFFFFFFF
C2FBB0:  dd $FFFFFFFF
C2FBB4:  dd $FFFFFFFF
C2FBB8:  dd $FFFFFFFF
C2FBBC:  dd $FFFFFFFF
C2FBC0:  dd $FFFFFFFF
C2FBC4:  dd $FFFFFFFF
C2FBC8:  dd $FFFFFFFF
C2FBCC:  dd $FFFFFFFF
C2FBD0:  dd $FFFFFFFF
C2FBD4:  dd $FFFFFFFF
C2FBD8:  dd $FFFFFFFF
C2FBDC:  dd $FFFFFFFF
C2FBE0:  dd $FFFFFFFF
C2FBE4:  dd $FFFFFFFF
C2FBE8:  dd $FFFFFFFF
C2FBEC:  dd $FFFFFFFF
C2FBF0:  dd $FFFFFFFF
C2FBF4:  dd $FFFFFFFF
C2FBF8:  dd $FFFFFFFF
C2FBFC:  dd $FFFFFFFF
C2FC00:  dd $FFFFFFFF
C2FC04:  dd $FFFFFFFF
C2FC08:  dd $FFFFFFFF
C2FC0C:  dd $FFFFFFFF
C2FC10:  dd $FFFFFFFF
C2FC14:  dd $FFFFFFFF
C2FC18:  dd $FFFFFFFF
C2FC1C:  dd $FFFFFFFF
C2FC20:  dd $FFFFFFFF
C2FC24:  dd $FFFFFFFF
C2FC28:  dd $FFFFFFFF
C2FC2C:  dd $FFFFFFFF
C2FC30:  dd $FFFFFFFF
C2FC34:  dd $FFFFFFFF
C2FC38:  dd $FFFFFFFF
C2FC3C:  dd $FFFFFFFF
C2FC40:  dd $FFFFFFFF
C2FC44:  dd $FFFFFFFF
C2FC48:  dd $FFFFFFFF
C2FC4C:  dd $FFFFFFFF
C2FC50:  dd $FFFFFFFF
C2FC54:  dd $FFFFFFFF
C2FC58:  dd $FFFFFFFF
C2FC5C:  dd $FFFFFFFF
C2FC60:  dd $FFFFFFFF
C2FC64:  dd $FFFFFFFF
C2FC68:  dd $FFFFFFFF
C2FC6C:  db $FF

; (Below are tables for gradually increasing or decreasing various parameters. During the
; ending, the data distribution affects Mode 7 rotation and governs the back-and-forth or
; up-and-down motion of various birds and airships. In battle, it influences the path of
; most sprites, such as the circular motion of boomerangs.)

; Sine/Cosine Table (16-bit, signed)(C2/FC6D - C2/FE6C)
; Data retrieved from C1/6C0A and C1/6C6E
; Bell curve - Positive slope
C2FC6D:  dw $0000    	; 00: +0
C2FC6F:  dw $0324    	; 01: +804
C2FC71:  dw $0648    	; 02: +1608
C2FC73:  dw $096A    	; 03: +2410
C2FC75:  dw $0C8C    	; 04: +3212
C2FC77:  dw $0FAB    	; 05: +4011
C2FC79:  dw $12C8    	; 06: +4808
C2FC7B:  dw $15E2    	; 07: +5602
C2FC7D:  dw $18F9    	; 08: +6393
C2FC7F:  dw $1C0B    	; 09: +7179
C2FC81:  dw $1F1A    	; 0A: +7962
C2FC83:  dw $2223    	; 0B: +8739
C2FC85:  dw $2528    	; 0C: +9512
C2FC87:  dw $2826    	; 0D: +10278
C2FC89:  dw $2B1F    	; 0E: +11039
C2FC8B:  dw $2E11    	; 0F: +11793
C2FC8D:  dw $30FB    	; 10: +12539
C2FC8F:  dw $33DF    	; 11: +13279
C2FC91:  dw $36BA    	; 12: +14010
C2FC93:  dw $398C    	; 13: +14732
C2FC95:  dw $3C56    	; 14: +15446
C2FC97:  dw $3F17    	; 15: +16151
C2FC99:  dw $41CE    	; 16: +16846
C2FC9B:  dw $447A    	; 17: +17530
C2FC9D:  dw $471C    	; 18: +18204
C2FC9F:  dw $49B3    	; 19: +18867
C2FCA1:  dw $4C3F    	; 1A: +19519
C2FCA3:  dw $4EBF    	; 1B: +20159
C2FCA5:  dw $5133    	; 1C: +20787
C2FCA7:  dw $539B    	; 1D: +21403
C2FCA9:  dw $55F5    	; 1E: +22005
C2FCAB:  dw $5842    	; 1F: +22594
C2FCAD:  dw $5A82    	; 20: +23170
C2FCAF:  dw $5CB3    	; 21: +23731
C2FCB1:  dw $5ED7    	; 22: +24279
C2FCB3:  dw $60EB    	; 23: +24811
C2FCB5:  dw $62F1    	; 24: +25329
C2FCB7:  dw $64E8    	; 25: +25832
C2FCB9:  dw $66CF    	; 26: +26319
C2FCBB:  dw $68A6    	; 27: +26790
C2FCBD:  dw $6A6D    	; 28: +27245
C2FCBF:  dw $6C23    	; 29: +27683
C2FCC1:  dw $6DC9    	; 2A: +28105
C2FCC3:  dw $6F5E    	; 2B: +28510
C2FCC5:  dw $70E2    	; 2C: +28898
C2FCC7:  dw $7254    	; 2D: +29268
C2FCC9:  dw $73B5    	; 2E: +29621
C2FCCB:  dw $7504    	; 2F: +29956
C2FCCD:  dw $7641    	; 30: +30273
C2FCCF:  dw $776B    	; 31: +30571
C2FCD1:  dw $7884    	; 32: +30852
C2FCD3:  dw $7989    	; 33: +31113
C2FCD5:  dw $7A7C    	; 34: +31356
C2FCD7:  dw $7B5C    	; 35: +31580
C2FCD9:  dw $7C29    	; 36: +31785
C2FCDB:  dw $7CE3    	; 37: +31971
C2FCDD:  dw $7D89    	; 38: +32137
C2FCDF:  dw $7E1D    	; 39: +32285
C2FCE1:  dw $7E9C    	; 3A: +32412
C2FCE3:  dw $7F09    	; 3B: +32521
C2FCE5:  dw $7F61    	; 3C: +32609
C2FCE7:  dw $7FA6    	; 3D: +32678
C2FCE9:  dw $7FD8    	; 3E: +32728
C2FCEB:  dw $7FF5    	; 3F: +32757

; Bell curve - Negative slope
C2FCED:  dw $7FFF    	; 40: +32767
C2FCEF:  dw $7FF5    	; 41: +32757
C2FCF1:  dw $7FD8    	; 42: +32728
C2FCF3:  dw $7FA6    	; 43: +32678
C2FCF5:  dw $7F61    	; 44: +32609
C2FCF7:  dw $7F09    	; 45: +32521
C2FCF9:  dw $7E9C    	; 46: +32412
C2FCFB:  dw $7E1D    	; 47: +32285
C2FCFD:  dw $7D89    	; 48: +32137
C2FCFF:  dw $7CE3    	; 49: +31971
C2FD01:  dw $7C29    	; 4A: +31785
C2FD03:  dw $7B5C    	; 4B: +31580
C2FD05:  dw $7A7C    	; 4C: +31356
C2FD07:  dw $7989    	; 4D: +31113
C2FD09:  dw $7884    	; 4E: +30852
C2FD0B:  dw $776B    	; 4F: +30571
C2FD0D:  dw $7641    	; 50: +30273
C2FD0F:  dw $7504    	; 51: +29956
C2FD11:  dw $73B5    	; 52: +29621
C2FD13:  dw $7254    	; 53: +29268
C2FD15:  dw $70E2    	; 54: +28898
C2FD17:  dw $6F5E    	; 55: +28510
C2FD19:  dw $6DC9    	; 56: +28105
C2FD1B:  dw $6C23    	; 57: +27683
C2FD1D:  dw $6A6D    	; 58: +27245
C2FD1F:  dw $68A6    	; 59: +26790
C2FD21:  dw $66CF    	; 5A: +26319
C2FD23:  dw $64E8    	; 5B: +25832
C2FD25:  dw $62F1    	; 5C: +25329
C2FD27:  dw $60EB    	; 5D: +24811
C2FD29:  dw $5ED7    	; 5E: +24279
C2FD2B:  dw $5CB3    	; 5F: +23731
C2FD2D:  dw $5A82    	; 60: +23170
C2FD2F:  dw $5842    	; 61: +22594
C2FD31:  dw $55F5    	; 62: +22005
C2FD33:  dw $539A    	; 63: +21402
C2FD35:  dw $5133    	; 64: +20787
C2FD37:  dw $4EBF    	; 65: +20159
C2FD39:  dw $4C3F    	; 66: +19519
C2FD3B:  dw $49B3    	; 67: +18867
C2FD3D:  dw $471C    	; 68: +18204
C2FD3F:  dw $447A    	; 69: +17530
C2FD41:  dw $41CE    	; 6A: +16846
C2FD43:  dw $3F17    	; 6B: +16151
C2FD45:  dw $3C56    	; 6C: +15446
C2FD47:  dw $398C    	; 6D: +14732
C2FD49:  dw $36BA    	; 6E: +14010
C2FD4B:  dw $33DE    	; 6F: +13278
C2FD4D:  dw $30FB    	; 70: +12539
C2FD4F:  dw $2E11    	; 71: +11793
C2FD51:  dw $2B1F    	; 72: +11039
C2FD53:  dw $2826    	; 73: +10278
C2FD55:  dw $2528    	; 74: +9512
C2FD57:  dw $2223    	; 75: +8739
C2FD59:  dw $1F1A    	; 76: +7962
C2FD5B:  dw $1C0B    	; 77: +7179
C2FD5D:  dw $18F8    	; 78: +6392
C2FD5F:  dw $15E2    	; 79: +5602
C2FD61:  dw $12C8    	; 7A: +4808
C2FD63:  dw $0FAB    	; 7B: +4011
C2FD65:  dw $0C8C    	; 7C: +3212
C2FD67:  dw $096A    	; 7D: +2410
C2FD69:  dw $0648    	; 7E: +1608
C2FD6B:  dw $0324    	; 7F: +804

; Well curve - Negative slope
C2FD6D:  dw $0000    	; 80: -0
C2FD6F:  dw $FCDC    	; 81: -804
C2FD71:  dw $F9B8    	; 82: -1608
C2FD73:  dw $F695    	; 83: -2411
C2FD75:  dw $F374    	; 84: -3212
C2FD77:  dw $F055    	; 85: -4011
C2FD79:  dw $ED38    	; 86: -4808
C2FD7B:  dw $EA1E    	; 87: -5602
C2FD7D:  dw $E707    	; 88: -6393
C2FD7F:  dw $E3F5    	; 89: -7179
C2FD81:  dw $E0E6    	; 8A: -7962
C2FD83:  dw $DDDC    	; 8B: -8740
C2FD85:  dw $DAD8    	; 8C: -9512
C2FD87:  dw $D7D9    	; 8D: -10279
C2FD89:  dw $D4E1    	; 8E: -11039
C2FD8B:  dw $D1EF    	; 8F: -11793
C2FD8D:  dw $CF04    	; 90: -12540
C2FD8F:  dw $CC21    	; 91: -13279
C2FD91:  dw $C946    	; 92: -14010
C2FD93:  dw $C673    	; 93: -14733
C2FD95:  dw $C3AA    	; 94: -15446
C2FD97:  dw $C0E9    	; 95: -16151
C2FD99:  dw $BE32    	; 96: -16846
C2FD9B:  dw $BB86    	; 97: -17530
C2FD9D:  dw $B8E3    	; 98: -18205
C2FD9F:  dw $B64C    	; 99: -18868
C2FDA1:  dw $B3C1    	; 9A: -19519
C2FDA3:  dw $B141    	; 9B: -20159
C2FDA5:  dw $AECD    	; 9C: -20787
C2FDA7:  dw $AC65    	; 9D: -21403
C2FDA9:  dw $AA0B    	; 9E: -22005
C2FDAB:  dw $A7BE    	; 9F: -22594
C2FDAD:  dw $A57E    	; A0: -23170
C2FDAF:  dw $A34C    	; A1: -23732
C2FDB1:  dw $A129    	; A2: -24279
C2FDB3:  dw $9F14    	; A3: -24812
C2FDB5:  dw $9D0F    	; A4: -25329
C2FDB7:  dw $9B18    	; A5: -25832
C2FDB9:  dw $9931    	; A6: -26319
C2FDBB:  dw $975A    	; A7: -26790
C2FDBD:  dw $9593    	; A8: -27245
C2FDBF:  dw $93DD    	; A9: -27683
C2FDC1:  dw $9237    	; AA: -28105
C2FDC3:  dw $90A2    	; AB: -28510
C2FDC5:  dw $8F1E    	; AC: -28898
C2FDC7:  dw $8DAC    	; AD: -29268
C2FDC9:  dw $8C4B    	; AE: -29621
C2FDCB:  dw $8AFC    	; AF: -29956
C2FDCD:  dw $89BF    	; B0: -30273
C2FDCF:  dw $8895    	; B1: -30571
C2FDD1:  dw $877C    	; B2: -30852
C2FDD3:  dw $8677    	; B3: -31113
C2FDD5:  dw $8584    	; B4: -31356
C2FDD7:  dw $84A4    	; B5: -31580
C2FDD9:  dw $83D7    	; B6: -31785
C2FDDB:  dw $831D    	; B7: -31971
C2FDDD:  dw $8277    	; B8: -32137
C2FDDF:  dw $81E3    	; B9: -32285
C2FDE1:  dw $8164    	; BA: -32412
C2FDE3:  dw $80F7    	; BB: -32521
C2FDE5:  dw $809F    	; BC: -32609
C2FDE7:  dw $805A    	; BD: -32678
C2FDE9:  dw $8028    	; BE: -32728
C2FDEB:  dw $800B    	; BF: -32757

; Well curve - Positive slope
C2FDED:  dw $8001    	; C0: -32767
C2FDEF:  dw $800B    	; C1: -32757
C2FDF1:  dw $8028    	; C2: -32728
C2FDF3:  dw $805A    	; C3: -32678
C2FDF5:  dw $809F    	; C4: -32609
C2FDF7:  dw $80F7    	; C5: -32521
C2FDF9:  dw $8164    	; C6: -32412
C2FDFB:  dw $81E3    	; C7: -32285
C2FDFD:  dw $8277    	; C8: -32137
C2FDFF:  dw $831D    	; C9: -31971
C2FE01:  dw $83D7    	; CA: -31785
C2FE03:  dw $84A4    	; CB: -31580
C2FE05:  dw $8584    	; CC: -31356
C2FE07:  dw $8677    	; CD: -31113
C2FE09:  dw $877D    	; CE: -30851
C2FE0B:  dw $8895    	; CF: -30571
C2FE0D:  dw $89BF    	; D0: -30273
C2FE0F:  dw $8AFC    	; D1: -29956
C2FE11:  dw $8C4B    	; D2: -29621
C2FE13:  dw $8DAC    	; D3: -29268
C2FE15:  dw $8F1E    	; D4: -28898
C2FE17:  dw $90A2    	; D5: -28510
C2FE19:  dw $9237    	; D6: -28105
C2FE1B:  dw $93DD    	; D7: -27683
C2FE1D:  dw $9593    	; D8: -27245
C2FE1F:  dw $975A    	; D9: -26790
C2FE21:  dw $9932    	; DA: -26318
C2FE23:  dw $9B18    	; DB: -25832
C2FE25:  dw $9D0F    	; DC: -25329
C2FE27:  dw $9F15    	; DD: -24811
C2FE29:  dw $A12A    	; DE: -24278
C2FE2B:  dw $A34D    	; DF: -23731
C2FE2D:  dw $A57E    	; E0: -23170
C2FE2F:  dw $A7BE    	; E1: -22594
C2FE31:  dw $AA0B    	; E2: -22005
C2FE33:  dw $AC66    	; E3: -21402
C2FE35:  dw $AECD    	; E4: -20787
C2FE37:  dw $B141    	; E5: -20159
C2FE39:  dw $B3C1    	; E6: -19519
C2FE3B:  dw $B64D    	; E7: -18867
C2FE3D:  dw $B8E4    	; E8: -18204
C2FE3F:  dw $BB86    	; E9: -17530
C2FE41:  dw $BE33    	; EA: -16845
C2FE43:  dw $C0EA    	; EB: -16150
C2FE45:  dw $C3AA    	; EC: -15446
C2FE47:  dw $C674    	; ED: -14732
C2FE49:  dw $C947    	; EE: -14009
C2FE4B:  dw $CC22    	; EF: -13278
C2FE4D:  dw $CF05    	; F0: -12539
C2FE4F:  dw $D1F0    	; F1: -11792
C2FE51:  dw $D4E2    	; F2: -11038
C2FE53:  dw $D7DA    	; F3: -10278
C2FE55:  dw $DAD9    	; F4: -9511
C2FE57:  dw $DDDD    	; F5: -8739
C2FE59:  dw $E0E7    	; F6: -7961
C2FE5B:  dw $E3F5    	; F7: -7179
C2FE5D:  dw $E708    	; F8: -6392
C2FE5F:  dw $EA1F    	; F9: -5601
C2FE61:  dw $ED39    	; FA: -4807
C2FE63:  dw $F055    	; FB: -4011
C2FE65:  dw $F375    	; FC: -3211
C2FE67:  dw $F696    	; FD: -2410
C2FE69:  dw $F9B9    	; FE: -1607
C2FE6B:  dw $FCDC    	; FF: -804

; Sine/Cosine Table (8-bit, signed) (C2/FE6D - C2/FF6C)
; Called from C1/6B9A.
C2FE6D:  db $00
C2FE6E:  db $03
C2FE6F:  db $06
C2FE70:  db $09
C2FE71:  db $0C
C2FE72:  db $10
C2FE73:  db $13
C2FE74:  db $16
C2FE75:  db $19
C2FE76:  db $1C
C2FE77:  db $1F
C2FE78:  db $22
C2FE79:  db $25
C2FE7A:  db $28
C2FE7B:  db $2B
C2FE7C:  db $2E
C2FE7D:  db $31
C2FE7E:  db $33
C2FE7F:  db $36
C2FE80:  db $39
C2FE81:  db $3C
C2FE82:  db $3F
C2FE83:  db $41
C2FE84:  db $44
C2FE85:  db $47
C2FE86:  db $49
C2FE87:  db $4C
C2FE88:  db $4E
C2FE89:  db $51
C2FE8A:  db $53
C2FE8B:  db $55
C2FE8C:  db $58
C2FE8D:  db $5A
C2FE8E:  db $5C
C2FE8F:  db $5E
C2FE90:  db $60
C2FE91:  db $62
C2FE92:  db $64
C2FE93:  db $66
C2FE94:  db $68
C2FE95:  db $6A
C2FE96:  db $6B
C2FE97:  db $6D
C2FE98:  db $6F
C2FE99:  db $70
C2FE9A:  db $71
C2FE9B:  db $73
C2FE9C:  db $74
C2FE9D:  db $75
C2FE9E:  db $76
C2FE9F:  db $78
C2FEA0:  db $79
C2FEA1:  db $7A
C2FEA2:  db $7A
C2FEA3:  db $7B
C2FEA4:  db $7C
C2FEA5:  db $7D
C2FEA6:  db $7D
C2FEA7:  db $7E
C2FEA8:  db $7E
C2FEA9:  db $7E
C2FEAA:  db $7F
C2FEAB:  db $7F
C2FEAC:  db $7F
C2FEAD:  db $7F
C2FEAE:  db $7F
C2FEAF:  db $7F
C2FEB0:  db $7F
C2FEB1:  db $7E
C2FEB2:  db $7E
C2FEB3:  db $7E
C2FEB4:  db $7D
C2FEB5:  db $7D
C2FEB6:  db $7C
C2FEB7:  db $7B
C2FEB8:  db $7A
C2FEB9:  db $7A
C2FEBA:  db $79
C2FEBB:  db $78
C2FEBC:  db $76
C2FEBD:  db $75
C2FEBE:  db $74
C2FEBF:  db $73
C2FEC0:  db $71
C2FEC1:  db $70
C2FEC2:  db $6F
C2FEC3:  db $6D
C2FEC4:  db $6B
C2FEC5:  db $6A
C2FEC6:  db $68
C2FEC7:  db $66
C2FEC8:  db $64
C2FEC9:  db $62
C2FECA:  db $60
C2FECB:  db $5E
C2FECC:  db $5C
C2FECD:  db $5A
C2FECE:  db $58
C2FECF:  db $55
C2FED0:  db $53
C2FED1:  db $51
C2FED2:  db $4E
C2FED3:  db $4C
C2FED4:  db $49
C2FED5:  db $47
C2FED6:  db $44
C2FED7:  db $41
C2FED8:  db $3F
C2FED9:  db $3C
C2FEDA:  db $39
C2FEDB:  db $36
C2FEDC:  db $33
C2FEDD:  db $31
C2FEDE:  db $2E
C2FEDF:  db $2B
C2FEE0:  db $28
C2FEE1:  db $25
C2FEE2:  db $22
C2FEE3:  db $1F
C2FEE4:  db $1C
C2FEE5:  db $19
C2FEE6:  db $16
C2FEE7:  db $13
C2FEE8:  db $10
C2FEE9:  db $0C
C2FEEA:  db $09
C2FEEB:  db $06
C2FEEC:  db $03
C2FEED:  db $00
C2FEEE:  db $FD
C2FEEF:  db $FA
C2FEF0:  db $F7
C2FEF1:  db $F4
C2FEF2:  db $F0
C2FEF3:  db $ED
C2FEF4:  db $EA
C2FEF5:  db $E7
C2FEF6:  db $E4
C2FEF7:  db $E1
C2FEF8:  db $DE
C2FEF9:  db $DB
C2FEFA:  db $D8
C2FEFB:  db $D5
C2FEFC:  db $D2
C2FEFD:  db $CF
C2FEFE:  db $CD
C2FEFF:  db $CA
C2FF00:  db $C7
C2FF01:  db $C4
C2FF02:  db $C1
C2FF03:  db $BF
C2FF04:  db $BC
C2FF05:  db $B9
C2FF06:  db $B7
C2FF07:  db $B4
C2FF08:  db $B2
C2FF09:  db $AF
C2FF0A:  db $AD
C2FF0B:  db $AB
C2FF0C:  db $A8
C2FF0D:  db $A6
C2FF0E:  db $A4
C2FF0F:  db $A2
C2FF10:  db $A0
C2FF11:  db $9E
C2FF12:  db $9C
C2FF13:  db $9A
C2FF14:  db $98
C2FF15:  db $96
C2FF16:  db $95
C2FF17:  db $93
C2FF18:  db $91
C2FF19:  db $90
C2FF1A:  db $8F
C2FF1B:  db $8D
C2FF1C:  db $8C
C2FF1D:  db $8B
C2FF1E:  db $8A
C2FF1F:  db $88
C2FF20:  db $87
C2FF21:  db $86
C2FF22:  db $86
C2FF23:  db $85
C2FF24:  db $84
C2FF25:  db $83
C2FF26:  db $83
C2FF27:  db $82
C2FF28:  db $82
C2FF29:  db $82
C2FF2A:  db $81
C2FF2B:  db $81
C2FF2C:  db $81
C2FF2D:  db $81
C2FF2E:  db $81
C2FF2F:  db $81
C2FF30:  db $81
C2FF31:  db $82
C2FF32:  db $82
C2FF33:  db $82
C2FF34:  db $83
C2FF35:  db $83
C2FF36:  db $84
C2FF37:  db $85
C2FF38:  db $86
C2FF39:  db $86
C2FF3A:  db $87
C2FF3B:  db $88
C2FF3C:  db $8A
C2FF3D:  db $8B
C2FF3E:  db $8C
C2FF3F:  db $8D
C2FF40:  db $8F
C2FF41:  db $90
C2FF42:  db $91
C2FF43:  db $93
C2FF44:  db $95
C2FF45:  db $96
C2FF46:  db $98
C2FF47:  db $9A
C2FF48:  db $9C
C2FF49:  db $9E
C2FF4A:  db $A0
C2FF4B:  db $A2
C2FF4C:  db $A4
C2FF4D:  db $A6
C2FF4E:  db $A8
C2FF4F:  db $AB
C2FF50:  db $AD
C2FF51:  db $AF
C2FF52:  db $B2
C2FF53:  db $B4
C2FF54:  db $B7
C2FF55:  db $B9
C2FF56:  db $BC
C2FF57:  db $BF
C2FF58:  db $C1
C2FF59:  db $C4
C2FF5A:  db $C7
C2FF5B:  db $CA
C2FF5C:  db $CD
C2FF5D:  db $CF
C2FF5E:  db $D2
C2FF5F:  db $D5
C2FF60:  db $D8
C2FF61:  db $DB
C2FF62:  db $DE
C2FF63:  db $E1
C2FF64:  db $E4
C2FF65:  db $E7
C2FF66:  db $EA
C2FF67:  db $ED
C2FF68:  db $F0
C2FF69:  db $F4
C2FF6A:  db $F7
C2FF6B:  db $FA
C2FF6C:  db $FD

; Decompress data

; $00F3 = 24-bit address of input data block.
; $00F6 - Bit 0 of $00F8 = 17-bit address to write to in WRAM.
; Our other output buffer is a temporary one of 800h bytes in length.  It resides
; in Bank 7F, from Offsets F800h to FFFFh.  The initial offset written to is FFDEh,
; wrapping to F800h after FFFFh is passed, going up to FFFFh again and wrapping to
; F800h as needed, etc.)

; Input block format:
; First 2 bytes: 16-bit number of bytes (including control bytes and these 2 bytes to
;                                        read from block.
; Control byte.  For N going from 0 through 7, ascending:
;                Bit N: Type of the (N+1)th value read from the input block after this
;                       control byte
;                       1 = 1 byte to copy to output blocks.
;                       0 = 2 bytes containing a pointer to elsewhere in temporary
;                           output block and a quantity of bytes to copy within
;                           output block.
; Data value from input block (8 in a row, unless there are no values left
;                              to read from block):
; If corresponding control bit was 1, a given value is just 1 plain data byte to
;  copy to output block.
; If corresponding control bit was 0, data value takes 2 bytes and has the format:
;  Byte 1 = Bits 0-7 of a 16-bit pointer to earlier in output block
;  Byte 2, Bits 0-2 = Bits 8-10 of a 16-bit pointer to earlier in temporary output
;                     buffer.
;                     Bits 11-15 of pointer will always be set, so it's
;                     F800h - FFFFh.
;  Byte 2, Bits 3-7 = Add 3 to get Quantity of bytes to copy from one place to
;                     another in our output block.
; Once 8 data values have been read in a row, and provided there are still more
; values to be read from input block, the next value read will be a new Control Byte,
; and the process will repeat.)

C2FF6D:  PHB            ; Save DB
C2FF6E:  PHD            ; Save DP
C2FF6F:  LDX #$0000     ; Clear X
C2FF72:  PHX            ; Put on stack
C2FF73:  PLD            ; Set DP to 0
C2FF74:  REP #$20       ; 16-bit A
C2FF76:  LDA [$F3]      ; Source size
C2FF78:  STA $FC        ; Memorize it
C2FF7A:  LDA $F6        ; Dest address
C2FF7C:  STA $002181    ; Set WRAM LBs
C2FF80:  SEP #$20       ; 8-bit A
C2FF82:  LDA $F8        ; Dest bank
C2FF84:  AND #$01       ; 00 or 01
C2FF86:  STA $002183    ; Set WRAM HB
C2FF8A:  LDA #$01       ; Strings left: 0
C2FF8C:  STA $FE        ; Init counter
C2FF8E:  LDY #$0002     ; Src index

; Fork: Clear dictionary buffer
C2FF91:  LDA #$7F       ; Bank: 7F
C2FF93:  PHA            ; Put on stack
C2FF94:  PLB            ; Set DB to 7F
C2FF95:  LDX #$F800     ; Base index
C2FF98:  TDC            ; Clear A
C2FF99:  STA $0000,X    ; Clear $F800+X
C2FF9C:  INX            ; Index +1
C2FF9D:  BNE C2FF99     ; If no overflow

; Fork: Load 8 new control flags if none remains
C2FF9F:  LDX #$FFDE     ; Buffer index
C2FFA2:  DEC $FE        ; Strings left -1
C2FFA4:  BNE C2FFAF     ; Branch if > 0
C2FFA6:  LDA #$08       ; Strings left: 8
C2FFA8:  STA $FE        ; Set counter
C2FFAA:  LDA [$F3],Y    ; Control flags
C2FFAC:  STA $FF        ; Memorize them
C2FFAE:  INY            ; Src index +1

; Fork: Decode source byte
C2FFAF:  LSR $FF        ; Control code?
C2FFB1:  BCC C2FFC4     ; Branch if so
C2FFB3:  LDA [$F3],Y    ; Literal byte
C2FFB5:  STA $002180    ; To destination
C2FFB9:  STA $0000,X    ; To dictionary
C2FFBC:  INX            ; Buffer index +1
C2FFBD:  BNE C2FFF6     ; If no overflow
C2FFBF:  LDX #$F800     ; Reset index
C2FFC2:  BRA C2FFF6     ; Load next byte

; Fork: Prepare to load from pseudo-dictionary
C2FFC4:  LDA [$F3],Y    ; Pointer LB
C2FFC6:  XBA            ; Save in B
C2FFC7:  INY            ; Src index +1
C2FFC8:  STY $F9        ; Memorize it
C2FFCA:  LDA [$F3],Y    ; Size x8 -3
C2FFCC:  LSR A          ; ÷2
C2FFCD:  LSR A          ; ÷4
C2FFCE:  LSR A          ; ÷8
C2FFCF:  CLC            ; Prepare ADC
C2FFD0:  ADC #$03       ; +3 bytes
C2FFD2:  STA $FB        ; Set string size
C2FFD4:  LDA [$F3],Y    ; Pointer HB
C2FFD6:  ORA #$F8       ; Intended value
C2FFD8:  XBA            ; Switch with LB
C2FFD9:  TAY            ; Index pointer

; Fork: Repeat a previous data string
C2FFDA:  LDA $0000,Y    ; Source byte
C2FFDD:  STA $002180    ; To destination
C2FFE1:  STA $0000,X    ; To dictionary
C2FFE4:  INX            ; Buffer index +1
C2FFE5:  BNE C2FFEA     ; If no overflow
C2FFE7:  LDX #$F800     ; Reset index
C2FFEA:  INY            ; Src index +1
C2FFEB:  BNE C2FFF0     ; If no overflow
C2FFED:  LDY #$F800     ; Reset src index
C2FFF0:  DEC $FB        ; One less byte
C2FFF2:  BNE C2FFDA     ; Loop till last

; Fork: Handle next source byte
C2FFF4:  LDY $F9        ; Src index
C2FFF6:  INY            ; Src index +1
C2FFF7:  CPY $FC        ; Done unpacking?
C2FFF9:  BNE C2FFA2     ; Loop if not
C2FFFB:  TDC            ; Clear A
C2FFFC:  XBA            ; ...
C2FFFD:  PLD            ; Restore DP
C2FFFE:  PLB            ; Restore DB
C2FFFF:  RTL